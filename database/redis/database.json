[
  {
    "date": 1470127473, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix a bug to delay bgsave while AOF rewrite in progress for replication", 
    "id": "d982f443727bb226652d5c6a8320ed1962df1727", 
    "files": [
      "src/replication.c"
    ]
  }, 
  {
    "date": 1469784496, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Update linenoise to fix insecure redis-cli history file creation.\n\nThe problem was fixed in antirez/linenoise repository applying a patch\ncontributed by @lamby. Here the new version is updated in the Redis\nsource tree.\n\nClose #1418\nClose #3322", 
    "id": "9d524114eda67dedc38a9f97c9d5f3a5c3747829", 
    "files": [
      "deps/linenoise/linenoise.c"
    ]
  }, 
  {
    "date": 1469199798, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Replication: when possible start RDB saving ASAP.\n\nIn a previous commit the replication code was changed in order to\ncentralize the BGSAVE for replication trigger in replicationCron(),\nhowever after further testings, the 1 second delay imposed by this\nchange is not acceptable.\n\nSo now the BGSAVE is only delayed if the AOF rewriting process is\nactive. However past comments made sure that replicationCron() is always\nable to trigger the BGSAVE when needed, making the code generally more\nrobust.\n\nThe new code is more similar to the initial @oranagra patch where the\nBGSAVE was delayed only if an AOF rewrite was in progress.\n\nTrivia: delaying the BGSAVE uncovered a minor Sentinel issue that is now\nfixed.", 
    "id": "03f5b508e5e939c941fb0c456b0f48b8e7a2c657", 
    "files": [
      "src/replication.c"
    ]
  }, 
  {
    "date": 1469092458, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix maxmemory shared integer check bug introduced with LFU.", 
    "id": "e0582b35984f8bc215f4a31860bcee5679f75330", 
    "files": [
      "src/object.c"
    ]
  }, 
  {
    "date": 1468844378, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "LFU: Fix bugs in frequency decay code.", 
    "id": "dbce190ad018fc757d9c494952531db31eaac700", 
    "files": [
      "src/evict.c"
    ]
  }, 
  {
    "date": 1468408350, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "LRU: Make cross-database choices for eviction.\n\nThe LRU eviction code used to make local choices: for each DB visited it\nselected the best key to evict. This was repeated for each DB. However\nthis means that there could be DBs with very frequently accessed keys\nthat are targeted by the LRU algorithm while there were other DBs with\nmany better candidates to expire.\n\nThis commit attempts to fix this problem for the LRU policy. However the\nTTL policy is still not fixed by this commit. The TTL policy will be\nfixed in a successive commit.\n\nThis is an initial (partial because of TTL policy) fix for issue #2647.", 
    "id": "e423f76e75bea83106c271b56d516c20cf74a16a", 
    "files": [
      "src/evict.c", 
      "src/server.c", 
      "src/server.h"
    ]
  }, 
  {
    "date": 1467815963, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Remove dead code from geohash_helper.c.\n\nThe function removed also had potential bugs related to signess of the\nexpression, and is not used anyway.", 
    "id": "1e6bb9ef0c60c22eab9e8d334be9f83a5845b2bb", 
    "files": [
      "src/geohash_helper.c"
    ]
  }, 
  {
    "date": 1467813758, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "geohash.c and geohash_helper.c are part of Redis.\n\nThey were under /deps since they originate from a different source tree,\nhowever at this point they are very modified and we took ownership of\nboth the files making changes, fixing bugs, so there is no upgrade path\nfrom the original code tree.\n\nGiven that, better to move the code under /src with proper dependencies\nand with a more simpler editing experience.", 
    "id": "eaa713e93b6aadf08fda33238670cd3577a7db52", 
    "files": [
      "src/geohash_helper.h", 
      "deps/geohash-int/geohash.h", 
      "src/Makefile", 
      "src/geohash_helper.c", 
      "deps/geohash-int/geohash.c", 
      "src/geohash.c", 
      "deps/geohash-int/Makefile", 
      "deps/Makefile", 
      "src/geohash.h", 
      "deps/geohash-int/geohash_helper.h", 
      "deps/geohash-int/geohash_helper.c"
    ]
  }, 
  {
    "date": 1467798213, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "getLongLongFromObject: use string2ll() instead of strict_strtoll().\n\nstrict_strtoll() has a bug that reports the empty string as ok and\nparses it as zero.\n\nApparently nobody ever replaced this old call with the faster/saner\nstring2ll() which is used otherwise in the rest of the Redis core.\n\nThis commit close #3333.", 
    "id": "23791828f1cd54ebea95d8c860058e55ff28aebf", 
    "files": [
      "src/object.c"
    ]
  }, 
  {
    "date": 1467724720, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "redis-cli: check SELECT reply type just in state updated.\n\nIn issues #3361 / #3365 a problem was reported / fixed with redis-cli\nnot updating correctly the current DB on error after SELECT.\n\nIn theory this bug was fixed in 0042fb0e, but actually the commit only\nfixed the prompt updating, not the fact the state was set in a wrong\nway.\n\nThis commit removes the check in the prompt update, now that hopefully\nit is the state that is correct, there is no longer need for this check.", 
    "id": "ef6a4df29c17e3c79a1e9b328fe3e2d1f2a9df39", 
    "files": [
      "src/redis-cli.c"
    ]
  }, 
  {
    "date": 1467043353, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix quicklistReplaceAtIndex() by updating the quicklist ziplist size.\n\nThe quicklist takes a cached version of the ziplist representation size\nin bytes. The implementation must update this length every time the\nunderlying ziplist changes. However quicklistReplaceAtIndex() failed to\nfix the length.\n\nDuring LSET calls, the size of the ziplist blob and the cached size\ninside the quicklist diverged. Later, when this size is used in an\nauthoritative way, for example during nodes splitting in order to copy\nthe nodes, we end with a duplicated node that may contain random\ngarbage.\n\nThis commit should fix issue #3343, however several problems were found\nreviewing the quicklist.c code in search of this bug that should be\naddressed soon or later.\n\nFor example:\n\n1. To take a cached ziplist length is fragile since failing to update it\nleads to this kind of issues.\n\n2. The node splitting code needs auditing. For example it works just for\na side effect of ziplistDeleteRange() to be able to cope with a wrong\ncount of elements to remove. The code inside quicklist.c assumes that\n-1 means \"delete till the end\" while actually it's just a count of how\nmany elements to delete, and is an unsigned count. So -1 gets converted\ninto the maximum integer, and just by chance the ziplist code stops\ndeleting elements after there are no more to delete.\n\n3. Node splitting is extremely inefficient, it copies the node and\nremoves elements from both nodes even when actually there is to move a\nsingle entry from one node to the other, or when the new resulting node\nis empty at all so there is nothing to copy but just to create a new\nnode.\n\nHowever at least for Redis 3.2 to introduce fresh code inside\nquicklist.c may be even more risky, so instead I'm writing a better\nfuzzy tester to stress the internals a bit more in order to anticipate\nother possible bugs.\n\nThis bug was found using a fuzzy tester written after having some clue\nabout where the bug could be. The tester eventually created a ~2000\ncommands sequence able to always crash Redis. I wrote a better version\nof the tester that searched for the smallest sequence that could crash\nRedis automatically. Later this smaller sequence was minimized by\nremoving random commands till it still crashed the server. This resulted\ninto a sequence of 7 commands. With this small sequence it was just a\nmatter of filling the code with enough printf() to understand enough\nstate to fix the bug.", 
    "id": "5e176e1af599637f4b5df1c60b22d110c6b1ae0c", 
    "files": [
      "src/quicklist.c"
    ]
  }, 
  {
    "date": 1466665791, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Modules: implement zig-zag scanning in autoMemoryFreed().\n\nMost of the time to check the last element is the way to go, however\nthere are patterns where the contrary is the best choice. Zig-zag\nscanning implemented in this commmit always checks the obvious element\nfirst (the last added -- think at a loop where the last element\nallocated gets freed again and again), and continues checking one\nelement in the head and one in the tail.\n\nThanks to @dvisrky that fixed the original implementation of the\nfunction and proposed zig zag scanning.", 
    "id": "f2dbc02f6510cc3cc415ac354888948af64434d1", 
    "files": [
      "src/module.c"
    ]
  }, 
  {
    "date": 1466098044, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix Sentinel pending commands counting.\n\nThis bug most experienced effect was an inability of Redis to\nreconfigure back old masters to slaves after they are reachable again\nafter a failover. This was due to failing to reset the count of the\npending commands properly, so the master appeared fovever down.\n\nWas introduced in Redis 3.2 new Sentinel connection sharing feature\nwhich is a lot more complex than the 3.0 code, but more scalable.\n\nMany thanks to people reporting the issue, and especially to\n@sskorgal for investigating the issue in depth.\n\nHopefully closes #3285.", 
    "id": "f7351f4c07f5e0b1c9bdb6949f45f84576ffd75f", 
    "files": [
      "src/sentinel.c"
    ]
  }, 
  {
    "date": 1466074473, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Minor aesthetic fixes to PR #3264.\n\nComment format fixed + local var modified from camel case to underscore\nseparators as Redis code base normally does (camel case is mostly used\nfor global symbols like structure names, function names, global vars,\n...).", 
    "id": "2f2fd64c0db00b82e6c336d0ee9e19d50a3aad5f", 
    "files": [
      "src/bitops.c"
    ]
  }, 
  {
    "date": 1465911239, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "TTL and TYPE LRU access fixed. TOUCH implemented.", 
    "id": "41d804d9dc48292f61fc1e1efd2241404dc9a6e8", 
    "files": [
      "src/db.c", 
      "src/server.c", 
      "src/server.h"
    ]
  }, 
  {
    "date": 1465542901, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed typo in Sentinel compareSlavesForPromotion() comment.", 
    "id": "2a57ad5d90e38969e8b821a4d44b75cf8ceb3aca", 
    "files": [
      "src/sentinel.c"
    ]
  }, 
  {
    "date": 1464596468, 
    "committer": {
      "email": "hrxwwd@163.com", 
      "name": "wenduo"
    }, 
    "message": "bitcount bug:return non-zero value when start > end (both negative)", 
    "id": "41dacdbcbefb7e90e78caf695db808833d652c8a", 
    "files": [
      "src/bitops.c"
    ]
  }, 
  {
    "date": 1464090763, 
    "committer": {
      "email": "oran@redislabs.com", 
      "name": "oranagra"
    }, 
    "message": "fix crash in BITFIELD GET on non existing key or wrong type see #3259\n\nthis was a bug in the recent refactoring: bee963c4459223d874e3294a0d8638a588d33c8e", 
    "id": "c4433d2a6aa9deac835c1032d72622ca9d2aadc6", 
    "files": [
      "src/bitops.c"
    ]
  }, 
  {
    "date": 1463492856, 
    "committer": {
      "email": "dvirsky@gmail.com", 
      "name": "Dvir Volk"
    }, 
    "message": "fixed bad transfer of ownership in HashSet causing a potential crash", 
    "id": "cfaef8d5d494dc199117cb7a6841dfbdc43dd22e", 
    "files": [
      "src/module.c"
    ]
  }, 
  {
    "date": 1462855211, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "RM_ZsetRangeNext()/Prev() typo in define name leading to crash fixed.", 
    "id": "5daece2ec6fae603742538284422ed416f021b2f", 
    "files": [
      "src/module.c"
    ]
  }, 
  {
    "date": 1462855211, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed crash when calling CreateStringFromCallReply on array elements", 
    "id": "9a71df505cd254a03c1a17e14d7d1dd3a7c77020", 
    "files": [
      "src/module.c"
    ]
  }, 
  {
    "date": 1462855210, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed comment formatting in RM_CreateCommand", 
    "id": "d41bd233d559df1b2c00395712638fb571b6c478", 
    "files": [
      "src/module.c"
    ]
  }, 
  {
    "date": 1462855210, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed comment", 
    "id": "87de31f9687594965b2fe60c7c2fffa90a0b3fc7", 
    "files": [
      "src/module.c"
    ]
  }, 
  {
    "date": 1462855209, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed return value of HashGet (and a slight error in the documentation)", 
    "id": "a1f8e22b790c8a392b8f6550b61226fa237f3314", 
    "files": [
      "src/module.c"
    ]
  }, 
  {
    "date": 1462855206, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed case in moduleCreateCallReplyFromProto", 
    "id": "e453d36e1e3b39c19586340d95eb54fbd6b69ef0", 
    "files": [
      "src/module.c"
    ]
  }, 
  {
    "date": 1462440823, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Cluster: make getNodeByQuery() responsible of -CLUSTERDOWN errors.\n\nThis fixes a bug introduced by d827dbf, and makes the code consistent\nwith the logic of always allowing, while the cluster is down, commands\nthat don't target any key.\n\nAs a side effect the code is also simpler now.", 
    "id": "971e3c51b63e7a5ced6a953bdfd2d9bd53b25e52", 
    "files": [
      "src/cluster.c", 
      "src/server.c"
    ]
  }, 
  {
    "date": 1456932028, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "BITFIELD: Farest bit set is offset+bits-1. Off by one error fixed.", 
    "id": "fc843784c340865f105fa8da37001f044a613829", 
    "files": [
      "src/bitops.c"
    ]
  }, 
  {
    "date": 1453908469, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Sentinel: improve handling of known Sentinel instances.\n\n1. Bug #3035 is fixed (NULL pointer access). This was happening with the\n   folling set of conditions:\n\n* For some reason one of the Sentinels, let's call it Sentinel_A, changed ID (reconfigured from scratch), but is as the same address at which it used to be.\n\n* Sentinel_A performs a failover and/or has a newer configuration compared to another Sentinel, that we call, Sentinel_B.\n\n* Sentinel_B receives an HELLO message from Sentinel_A, where the address and/or ID is mismatched, but it is reporting a newer configuration for the master they are both monitoring.\n\n2. Sentinels now must have an ID otherwise they are not loaded nor persisted in the configuration. This allows to have conflicting Sentinels with the same address since now the master->sentinels dictionary is indexed by Sentinel ID.\n\n3. The code now detects if a Sentinel is annoucing itself with an IP/port pair already busy (of another Sentinel). The old Sentinel that had the same port/pair is set as having port 0, that means, the address is invalid. We may discover the right address later via HELLO messages.", 
    "id": "751b5666fbbe5c415f6fad64e7f59e24721996be", 
    "files": [
      "src/sentinel.c"
    ]
  }, 
  {
    "date": 1453192123, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "More variadic MIGRATE fixes.\n\nAnother leak was fixed in the case of syntax error by restructuring the\nallocation strategy for the two dynamic vectors.\n\nWe also make sure to always close the cached socket on I/O errors so that\nall the I/O errors are handled the same, even if we had a previously\nqueued error of a different kind from the destination server.\n\nThanks to Kevin McGehee. Related to issue #3016.", 
    "id": "f5a1e608cc2140a98c51431958b9c274019ffbc5", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1452523151, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "CLUSTER BUMPEPOCH initial implementation fixed.", 
    "id": "02c40c9dc2da2a29c95b9ddfd2a8544dd04aaf11", 
    "files": [
      "src/cluster.c", 
      "src/redis-trib.rb"
    ]
  }, 
  {
    "date": 1450341583, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix a race that may lead to the active (slave) client to be freed.\n\nIn issue #2948 a crash was reported in processCommand(). Later Oran Agra\n(@oranagra) traced the bug (in private chat) in the following sequence\nof events:\n\n1. Some maxmemory is set.\n2. The slave is the currently active client and is executing PING or\n   REPLCONF or whatever a slave can send to its master.\n3. freeMemoryIfNeeded() is called since maxmemory is set.\n4. flushSlavesOutputBuffers() is called by freeMemoryIfNeeded().\n5. During slaves buffers flush, a write error could be encoutered in\n   writeToClient() or sendReplyToClient() depending on the version of\n   Redis. This will trigger freeClient() against the currently active\n   client, so a segmentation fault will likely happen in\n   processCommand() immediately after the call to freeMemoryIfNeeded().\n\nThere are different possible fixes:\n\n1. Add flags to writeToClient() (recent versions code base) so that\n   we can ignore the write errors, and use this flag in\n   flushSlavesOutputBuffers(). However this is not simple to do in older\n   versions of Redis.\n2. Use freeClientAsync() during write errors. This works but changes the\n   current behavior of releasing clients ASAP when possible. Normally\n   we write to clients during the normal event loop processing, in the\n   writable client, where there is no active client, so no care must be\n   taken.\n3. The fix of this commit: to detect that the current client is no\n   longer valid. This fix is a bit \"ad-hoc\", but works across all the\n   versions and has the advantage of not changing the remaining\n   behavior. Only alters what happens during this race condition,\n   hopefully.", 
    "id": "bb215375967cea35a1562feedbce97cf0222f811", 
    "files": [
      "src/server.c"
    ]
  }, 
  {
    "date": 1449839087, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "MIGRATE: fix replies processing and argument rewriting.\n\nWe need to process replies after errors in order to delete keys\nsuccessfully transferred. Also argument rewriting was fixed since\nit was broken in several ways. Now a fresh argument vector is created\nand set if we are acknowledged of at least one key.", 
    "id": "d85fc1e9cfb8fb7496cda524db8808bb1ab9e1e6", 
    "files": [
      "src/cluster.c", 
      "src/networking.c"
    ]
  }, 
  {
    "date": 1449821946, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Cluster: replica migration with delay.\n\nWe wait a fixed amount of time (5 seconds currently) much greater than\nthe usual Cluster node to node communication latency, before migrating.\nThis way when a failover occurs, before detecting the new master as a\ntarget for migration, we give the time to its natural slaves (the slaves\nof the failed over master) to announce they switched to the new master,\npreventing an useless migration operation.", 
    "id": "adc2fe69934fae596aee29c49db6acdc203a62d9", 
    "files": [
      "src/cluster.c", 
      "src/cluster.h"
    ]
  }, 
  {
    "date": 1443697346, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a bug in the emptyDb() new implementation.", 
    "id": "535969679673f8b3cb904eef3de0f8104cacf072", 
    "files": [
      "src/db.c"
    ]
  }, 
  {
    "date": 1443697345, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Hash new implementation memleaks fixed.", 
    "id": "1dab60df8132e5137ab8e9680dcf88fafc4842a6", 
    "files": [
      "src/t_hash.c", 
      "src/server.h"
    ]
  }, 
  {
    "date": 1443697344, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "SORT memory leak fixed.", 
    "id": "34e489cb8cee04b52b5cbbfe53280ad8419d0a96", 
    "files": [
      "src/sort.c"
    ]
  }, 
  {
    "date": 1443623061, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "redis-cli pipe mode: don't stay in the write loop forever.\n\nThe code was broken and resulted in redis-cli --pipe to, most of the\ntimes, writing everything received in the standard input to the Redis\nconnection socket without ever reading back the replies, until all the\ncontent to write was written.\n\nThis means that Redis had to accumulate all the output in the output\nbuffers of the client, consuming a lot of memory.\n\nFixed thanks to the original report of anomalies in the behavior\nprovided by Twitter user @fsaintjacques.", 
    "id": "d1b6a17d1ed64c919d55a27ea780e973196a5e98", 
    "files": [
      "src/redis-cli.c"
    ]
  }, 
  {
    "date": 1442265050, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "GEORADIUS: Don't report duplicates when radius is huge.\n\nGeoradius works by computing the center + neighbors squares covering all\nthe area of the specified position and radius. Then a distance filter is\nused to remove elements which are actually outside the range.\n\nWhen a huge radius is used, like 5000 km or more, adjacent neighbors may\ncollide and be the same, leading to the reporting of the same element\nmultiple times. This only happens in the edge case of huge radius but is\nnot ideal.\n\nA robust but slow solution would involve qsorting the range to remove\nall the duplicates. However since the collisions are only in adjacent\nboxes, for the way they are ordered in the code, it is much faster to\njust check if the current box is the same as the previous one processed.\n\nThis commit adds a regression test for the bug.\n\nFixes #2767.", 
    "id": "3c23b5ffd0d7dd01df79154c1701d4d3ded7bf66", 
    "files": [
      "src/geo.c", 
      "tests/unit/geo.tcl"
    ]
  }, 
  {
    "date": 1442226857, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "MOVE re-add TTL check fixed.\n\ngetExpire() returns -1 when no expire exists.\n\nRelated to #2765.", 
    "id": "4fec5ee1650131eed40044a1614bd3d70ba1696c", 
    "files": [
      "src/db.c"
    ]
  }, 
  {
    "date": 1442226600, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "MOVE now can move TTL metadata as well.\n\nMOVE was not able to move the TTL: when a key was moved into a different\ndatabase number, it became persistent like if PERSIST was used.\n\nIn some incredible way (I guess almost nobody uses Redis MOVE) this bug\nremained unnoticed inside Redis internals for many years.\nFinally Andy Grunwald discovered it and opened an issue.\n\nThis commit fixes the bug and adds a regression test.\n\nClose #2765.", 
    "id": "f529a01c1b52367b4337119ae8f86fd1d790a5ea", 
    "files": [
      "src/db.c", 
      "tests/unit/keyspace.tcl"
    ]
  }, 
  {
    "date": 1440085188, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "startBgsaveForReplication(): handle waiting slaves state change.\n\nBefore this commit, after triggering a BGSAVE it was up to the caller of\nstartBgsavForReplication() to handle slaves in WAIT_BGSAVE_START in\norder to update them accordingly. However when the replication target is\nthe socket, this is not possible since the process of updating the\nslaves and sending the FULLRESYNC reply must be coupled with the process\nof starting an RDB save (the reason is, we need to send the FULLSYNC\ncommand and spawn a child that will start to send RDB data to the slaves\nASAP).\n\nThis commit moves the responsibility of handling slaves in\nWAIT_BGSAVE_START to startBgsavForReplication() so that for both\ndiskless and disk-based replication we have the same chain of\nresponsiblity. In order accomodate such change, the syncCommand() also\nneeds to put the client in the slave list ASAP (just after the initial\nchecks) and not at the end, so that startBgsavForReplication() can find\nthe new slave alrady in the list.\n\nAnother related change is what happens if the BGSAVE fails because of\nfork() or other errors: we now remove the slave from the list of slaves\nand send an error, scheduling the slave connection to be terminated.\n\nAs a side effect of this change the following errors found by\nOran Agra are fixed (thanks!):\n\n1. rdbSaveToSlavesSockets() on failed fork will get the slaves cleaned\nup, otherwise they remain in a wrong state forever since we setup them\nfor full resync before actually trying to fork.\n\n2. updateSlavesWaitingBgsave() with replication target set as \"socket\"\nwas broken since the function changed the slaves state from\nWAIT_BGSAVE_START to WAIT_BGSAVE_END via\nreplicationSetupSlaveForFullResync(), so later rdbSaveToSlavesSockets()\nwill not find any slave in the right state (WAIT_BGSAVE_START) to feed.", 
    "id": "f18e5b634dbca5a31b88e6cc4e4a571afed0753b", 
    "files": [
      "src/replication.c"
    ]
  }, 
  {
    "date": 1438786310, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix synchronous readline \"\\n\" handling.\n\nOur function to read a line with a timeout handles newlines as requests\nto refresh the timeout, however the code kept subtracting the buffer\nsize left every time a newline was received, for a bug in the loop\nlogic. Fixed by this commit.", 
    "id": "7ab3af0edc238c869827c185f997c0a99f4506b5", 
    "files": [
      "src/syncio.c"
    ]
  }, 
  {
    "date": 1438786156, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix replication slave pings period.\n\nFor PINGs we use the period configured by the user, but for the newlines\nof slaves waiting for an RDB to be created (including slaves waiting for\nthe FULLRESYNC reply) we need to ping with frequency of 1 second, since\nthe timeout is fixed and needs to be refreshed.", 
    "id": "55ba77270363400625f4563788d8f842408389a2", 
    "files": [
      "src/replication.c"
    ]
  }, 
  {
    "date": 1438700770, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "PSYNC initial offset fix.\n\nThis commit attempts to fix a bug involving PSYNC and diskless\nreplication (currently experimental) found by Yuval Inbar from Redis Labs\nand that was later found to have even more far reaching effects (the bug also\nexists when diskstore is off).\n\nThe gist of the bug is that, a Redis master replies with +FULLRESYNC to\na PSYNC attempt that fails and requires a full resynchronization.\nHowever, the baseline offset sent along with FULLRESYNC was always the\ncurrent master replication offset. This is not ok, because there are\nmany reasosn that may delay the RDB file creation. And... guess what,\nthe master offset we communicate must be the one of the time the RDB\nwas created. So for example:\n\n1) When the BGSAVE for replication is delayed since there is one\n   already but is not good for replication.\n2) When the BGSAVE is not needed as we attach one currently ongoing.\n3) When because of diskless replication the BGSAVE is delayed.\n\nIn all the above cases the PSYNC reply is wrong and the slave may\nreconnect later claiming to need a wrong offset: this may cause\ndata curruption later.", 
    "id": "292fec058a32323d5aa52dddfa86be280e29fe65", 
    "files": [
      "src/rdb.c", 
      "src/replication.c", 
      "src/server.h", 
      "src/syncio.c"
    ]
  }, 
  {
    "date": 1437401888, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix SDS type 5 sdsIncrLen() bug and added test.\n\nThanks to @oranagra for spotting this error.", 
    "id": "cf68f4ee6a4c466b893fbb269f6aff14c7c75e6a", 
    "files": [
      "src/sds.c"
    ]
  }, 
  {
    "date": 1437122852, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "bugfix: errno might change before logging\n\nSigned-off-by: Yongyue Sun <abioy.sun@gmail.com>", 
    "id": "427794d845534ea0e84e0ef9582f9ae5800c96cf", 
    "files": [
      "src/aof.c", 
      "src/rdb.c"
    ]
  }, 
  {
    "date": 1435586237, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Geo: remove static declarations.\n\nStack traces produced by Redis on crash are the most useful tool we\nhave to fix non easily reproducible crashes, or even easily reproducible\nones where the user just posts a bug report and does not collaborate\nfurhter.\n\nBy declaring functions \"static\" they no longer show up in the stack\ntrace.", 
    "id": "083acbebc85191314840a02a8618f051f49d0319", 
    "files": [
      "src/geo.c"
    ]
  }, 
  {
    "date": 1435047614, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Geo: GEOADD implementation improved, replication fixed\n\n1. We no longer use a fake client but just rewriting.\n2. We group all the inserts into a single ZADD dispatch (big speed win).\n3. As a side effect of the correct implementation, replication works.\n4. The return value of the command is now correct.", 
    "id": "bb3284563c1465556f0d02ab7b4616dcc414b930", 
    "files": [
      "src/networking.c", 
      "src/redis.h", 
      "src/geo.c"
    ]
  }, 
  {
    "date": 1434126977, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Sentinel: fix bug in config rewriting during failover\n\nWe have a check to rewrite the config properly when a failover is in\nprogress, in order to add the current (already failed over) master as\nslave, and don't include in the slave list the promoted slave itself.\n\nHowever there was an issue, the variable with the right address was\ncomputed but never used when the code was modified, and no tests are\navailable for this feature for two reasons:\n\n1. The Sentinel unit test currently does not test Sentinel ability to\npersist its state at all.\n2. It is a very hard to trigger state since it lasts for little time in\nthe context of the testing framework.\n\nHowever this feature should be covered in the test in some way.\n\nThe bug was found by @badboy using the clang static analyzer.\n\nEffects of the bug on safety of Sentinel\n===\n\nThis bug results in severe issues in the following case:\n\n1. A Sentinel is elected leader.\n2. During the failover, it persists a wrong config with a known-slave\nentry listing the master address.\n3. The Sentinel crashes and restarts, reading invalid configuration from\ndisk.\n4. It sees that the slave now does not obey the logical configuration\n(should replicate from the current master), so it sends a SLAVEOF\ncommand to the master (since the slave master is the same) creating a\nreplication loop (attempt to replicate from itself) which Redis is\ncurrently unable to detect.\n5. This means that the master is no longer available because of the bug.\n\nHowever the lack of availability should be only transient (at least\nin my tests, but other states could be possible where the problem\nis not recovered automatically) because:\n\n6. Sentinels treat masters reporting to be slaves as failing.\n7. A new failover is triggered, and a slave is promoted to master.\n\nBug lifetime\n===\n\nThe bug is there forever. Commit 16237d78 actually tried to fix the bug\nbut in the wrong way (the computed variable was never used! My fault).\nSo this bug is there basically since the start of Sentinel.\n\nSince the bug is hard to trigger, I remember little reports matching\nthis condition, but I remember at least a few. Also in automated tests\nwhere instances were stopped and restarted multiple times automatically\nI remember hitting this issue, however I was not able to reproduce nor\nto determine with the information I had at the time what was causing the\nissue.", 
    "id": "821a986643717018cad8af9f35cba49818e60294", 
    "files": [
      "src/sentinel.c"
    ]
  }, 
  {
    "date": 1430251823, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix Sentinel memory leak (hiredis bug)\n\nThis fixes issue #2535, that was actually an hiredis library bug (I\nsubmitted an issue and fix to the redis/hiredis repo as well).\n\nWhen an asynchronous hiredis connection subscribes to a Pub/Sub channel\nand gets an error, and in other related conditions, the function\nredisProcessCallbacks() enters a code path where the link is\ndisconnected, however the function returns before freeing the allocated\nreply object. This causes a memory leak. The memory leak was trivial to\ntrigger in Redis Sentinel, which uses hiredis, every time we tried to\nsubscribe to an instance that required a password, in case the Sentinel\nwas configured either with the wrong password or without password at\nall. In this case, the -AUTH error caused the leaking code path to be\nexecuted.\n\nIt was verified with Valgrind that after this change the leak no longer\nhappens in Sentinel with a misconfigured authentication password.", 
    "id": "c806dd799bc8f3c578581194d499b50acec44b7d", 
    "files": [
      "deps/hiredis/async.c"
    ]
  }, 
  {
    "date": 1427709289, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Ensure array index is in range in addReplyLongLongWithPrefix().\n\nChange done in order to remove a warning and improve code robustness. No\nactual bug here.", 
    "id": "221d2932b51dc605130130369301c92f34336987", 
    "files": [
      "src/networking.c"
    ]
  }, 
  {
    "date": 1427209209, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Replication: disconnect blocked clients when switching to slave role.\n\nBug as old as Redis and blocking operations. It's hard to trigger since\nonly happens on instance role switch, but the results are quite bad\nsince an inconsistency between master and slave is created.\n\nHow to trigger the bug is a good description of the bug itself.\n\n1. Client does \"BLPOP mylist 0\" in master.\n2. Master is turned into slave, that replicates from New-Master.\n3. Client does \"LPUSH mylist foo\" in New-Master.\n4. New-Master propagates write to slave.\n5. Slave receives the LPUSH, the blocked client get served.\n\nNow Master \"mylist\" key has \"foo\", Slave \"mylist\" key is empty.\n\nHighlights:\n\n* At step \"2\" above, the client remains attached, basically escaping any\n  check performed during command dispatch: read only slave, in that case.\n* At step \"5\" the slave (that was the master), serves the blocked client\n  consuming a list element, which is not consumed on the master side.\n\nThis scenario is technically likely to happen during failovers, however\nsince Redis Sentinel already disconnects clients using the CLIENT\ncommand when changing the role of the instance, the bug is avoided in\nSentinel deployments.\n\nCloses #2473.", 
    "id": "c3ad70901f962808a1c0c474951406af81d26a3f", 
    "files": [
      "src/redis.h", 
      "src/replication.c", 
      "src/blocked.c"
    ]
  }, 
  {
    "date": 1427194584, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Cluster: redirection refactoring + handling of blocked clients.\n\nThere was a bug in Redis Cluster caused by clients blocked in a blocking\nlist pop operation, for keys no longer handled by the instance, or\nin a condition where the cluster became down after the client blocked.\n\nA typical situation is:\n\n1) BLPOP <somekey> 0\n2) <somekey> hash slot is resharded to another master.\n\nThe client will block forever int this case.\n\nA symmentrical non-cluster-specific bug happens when an instance is\nturned from master to slave. In that case it is more serious since this\nwill desynchronize data between slaves and masters. This other bug was\ndiscovered as a side effect of thinking about the bug explained and\nfixed in this commit, but will be fixed in a separated commit.", 
    "id": "9b7f8b1c9b379ab842d40df4636dfbbeb6376fcb", 
    "files": [
      "src/redis.c", 
      "src/cluster.c", 
      "src/cluster.h", 
      "src/blocked.c"
    ]
  }, 
  {
    "date": 1425047824, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Hash: HSTRLEN crash fixed when getting len of int-encoded value", 
    "id": "0ace1e6d04c6c7cb38a5e74c4bc5e53aac891905", 
    "files": [
      "src/t_hash.c"
    ]
  }, 
  {
    "date": 1423648347, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "dict.c: reset emptylen when bucket is not empty.\n\nFixed by @oranagra, thank you.", 
    "id": "8ddc14523fe5773d99a2dffba748d349f4419994", 
    "files": [
      "src/dict.c"
    ]
  }, 
  {
    "date": 1421854928, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "AOF rewrite: set iterator var to NULL when freed.\n\nThe cleanup code expects that if 'di' is not NULL, it is a valid\niterator that should be freed.\n\nThe result of this bug was a crash of the AOF rewriting process if an\nerror occurred after the DBs data are written and the iterator is no\nlonger valid.", 
    "id": "4433f5a7f24350cb398ae448fca691a53a51a155", 
    "files": [
      "src/aof.c"
    ]
  }, 
  {
    "date": 1421074500, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Cluster: initialize mf_end.\n\nCan't be initialized by resetManualFailover() since it's actual state\nthe function uses, so we need to initialize it at startup time. Not\nreally a bug in practical terms, but showed up into valgrind and is not\ntechnically correct anyway.", 
    "id": "6274a6789deaeea35951e5409e94e4ff77de645a", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1420715182, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Typo fixed: fiels -> fields in rdbSaveInfoAuxFields().\n\nThx to @badboy.", 
    "id": "a7722dc31b3a10c6b6bd0fb388f5cbc424d35f33", 
    "files": [
      "src/rdb.c"
    ]
  }, 
  {
    "date": 1419171225, 
    "committer": {
      "email": "alon@everything.me", 
      "name": "Alon Diamant"
    }, 
    "message": "Fixed memory leaks in rdbSaveToSlavesSockets()", 
    "id": "14b04c062efdca92cb91ef72a2efe0d531bb263f", 
    "files": [
      "src/rdb.c"
    ]
  }, 
  {
    "date": 1419171225, 
    "committer": {
      "email": "alon@everything.me", 
      "name": "Alon Diamant"
    }, 
    "message": "Following @mattsta's friendly review:\n  1. memory leak in t_set.c has been fixed\n  2. end-of-line spaces has been removed (from all over the place)\n  3. for loops have been ordered up to match existing Redis style (less weird)\n  4. comments format has been fixed (added * in the beggining of every comment line)", 
    "id": "d74a5a088036342ed430c6199d69f00610e14370", 
    "files": [
      "src/t_set.c", 
      "src/intset.c"
    ]
  }, 
  {
    "date": 1418421393, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Lua cmsgpack lib updated to latest version.\n\nIt fixes a bad bug that crashes the server in certain conditions\nas shown in issue #2210.", 
    "id": "66e2bdf21021a787e959c943ba453e56f9787093", 
    "files": [
      "deps/lua/src/lua_cmsgpack.c"
    ]
  }, 
  {
    "date": 1417535843, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Mark PFCOUNT as read-only, even if not true.\n\nPFCOUNT is technically speaking a write command, since the cached value\nof the HLL is exposed in the data structure (design error, mea culpa), and\ncan be modified by PFCOUNT.\n\nHowever if we flag PFCOUNT as \"w\", read only slaves can't execute the\ncommand, which is a problem since there are environments where slaves\nare used to scale PFCOUNT reads.\n\nNor it is possible to just prevent PFCOUNT to modify the data structure\nin slaves, since without the cache we lose too much efficiency.\n\nSo while this commit allows slaves to create a temporary inconsistency\n(the strings representing the HLLs in the master and slave can be\ndifferent in certain moments) it is actually harmless.\n\nIn the long run this should be probably fixed by turning the HLL into a\nmore opaque representation, for example by storing the cached value in\nthe part of the string which is not exposed (this should be possible\nwith SDS strings).", 
    "id": "8a7ccc58a16954a250fcb8f5ea6d184094d14653", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1415981331, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Lua: upgrade cmsgpack to 0.4.0\n\nMain reasons for upgrade:\n  - Remove a warning when building Redis\n  - Add multi pack/unpack\n  - Improve memory usage and use Lua allocator properly\n  - Fix some edge case encoding/decoding bugs", 
    "id": "90b6337c155aa0330143f5b0a0af1d430271d400", 
    "files": [
      "deps/lua/src/lua_cmsgpack.c"
    ]
  }, 
  {
    "date": 1414389772, 
    "committer": {
      "email": "zhh5919@163.com", 
      "name": "zhanghailei"
    }, 
    "message": "FIXED redis-benchmark's idle mode.With idle mode shouldn't create write event", 
    "id": "b4c4be785cf5aeb480eabefd18a131655d36734f", 
    "files": [
      "src/redis-benchmark.c"
    ]
  }, 
  {
    "date": 1413558164, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "rio.c fdset write() method fixed: wrong type for return value.", 
    "id": "fd112f52dce71e1ebd3fc3ffe1b7d521c628877e", 
    "files": [
      "src/rio.c"
    ]
  }, 
  {
    "date": 1411066075, 
    "committer": {
      "email": "matt@genges.com", 
      "name": "Matt Stancliff"
    }, 
    "message": "Fix hiredis getaddrinfo leak\n\nFixed in Redis by 1a5e5b6, but since that part of code\nis largely copy/paste from Redis, the fix needs to be\nported over too.\n\nCloses #2012", 
    "id": "56c1f8805e72cbc55d74a7fc46ff17fdc5d7882d", 
    "files": [
      "deps/hiredis/net.c"
    ]
  }, 
  {
    "date": 1410964781, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Cluster: claim ping_sent time even if we can't connect.\n\nThis fixes a potential bug that was never observed in practice since\nwhat happens is that the asynchronous connect returns ok (to fail later,\ncalling the handler) every time, so a ping is queued, and sent_ping\nhappens to always be populated.\n\nHowver technically connect(2) with a non blocking socket may return an\nerror synchronously, so before this fix the code was not correct.", 
    "id": "2374496799fc4d75338f821fa377a211f9557a55", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1410856378, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "On AOF end of file, truncate the AOF to last valid command.\n\nRecently we introduced the ability to load truncated AOFs, but\nunfortuantely the support was broken since the server, after loading the\ntruncated AOF, continues appending to the file that is corrupted at the\nend. The problem is fixed only in the next AOF rewrite.\n\nThis commit fixes the issue by truncating the AOF to the last valid\nopcode, and aborting if it is not possible to truncate the file\ncorrectly.", 
    "id": "0ba8fe1a43a624a6e4a4e5698ac7b6616ee5a133", 
    "files": [
      "src/aof.c"
    ]
  }, 
  {
    "date": 1409041596, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Cast to right type in dictNext().\n\nThis closes issue #1929, the other part was fixed in the context of issue", 
    "id": "72aa797c89e68d423b5c6857bbd47c275f1ed291", 
    "files": [
      "src/dict.c"
    ]
  }, 
  {
    "date": 1408110495, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix undefined behavior in ll2string().\n\nThe bug was found by @CAFxX, thanks!\nSee issue #1940.", 
    "id": "c951c3ee5a12110f1c0c1270c45ab663c04e0f77", 
    "files": [
      "src/util.c"
    ]
  }, 
  {
    "date": 1407499834, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "redis-check-dump: Prevent segfault if can't malloc\n\nFound by The Mayhem Team (Alexandre Rebert, Thanassis Avgerinos,\nSang Kil Cha, David Brumley, Manuel Egele) Cylab, Carnegie Mellon\nUniversity. See http://bugs.debian.org/716259 for more.\n\nSigned-off-by: Chris Lamb <lamby@debian.org>\n\nFixes #1191", 
    "id": "af62d9a687c7f61178c1fd8a4c7c9f1cc3d5083f", 
    "files": [
      "src/redis-check-dump.c"
    ]
  }, 
  {
    "date": 1407421057, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix intset midpoint selection\n\nThe classic (min+max)/2 is provably unsafe.  Fixed\nas recommended in research:\nhttp://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html\n\nFix inspired by @wjin, but I used a different approach.\n(later, I found @kuebler fixed the same issue too).\n\nFixes #1741, #1602", 
    "id": "c82e0b701f86989711988dae8be97bdbe63395ba", 
    "files": [
      "src/intset.c"
    ]
  }, 
  {
    "date": 1404917140, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a few missing newline in createLatencyReport().", 
    "id": "067e365042f8d26feff0bf06f8caff1bd9abbbce", 
    "files": [
      "src/latency.c"
    ]
  }, 
  {
    "date": 1404315749, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed conditional for aof-write-pending-fsync latency event selection.", 
    "id": "a99766fda1ef6a2594c51fc57080ac1725d0672c", 
    "files": [
      "src/aof.c"
    ]
  }, 
  {
    "date": 1403342238, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "ROLE command: array len fixed for slave output.", 
    "id": "7970d5399740d001d746cd95ddd5e159c450c0e6", 
    "files": [
      "src/replication.c"
    ]
  }, 
  {
    "date": 1403269160, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Jemalloc updated to 3.6.0.\n\nNot a single bug in about 3 months, and our previous version was\ntoo old (3.2.0).", 
    "id": "fceef8e0ddfca103b2f0328e3ad9ae522093f2c8", 
    "files": [
      "deps/jemalloc/test/include/test/jemalloc_test.h.in", 
      "deps/jemalloc/config.guess", 
      "deps/jemalloc/src/arena.c", 
      "deps/jemalloc/src/stats.c", 
      "deps/jemalloc/include/jemalloc/internal/private_namespace.h", 
      "deps/jemalloc/test/mremap.exp", 
      "deps/jemalloc/test/unit/math.c", 
      "deps/jemalloc/test/test.sh.in", 
      "deps/jemalloc/include/jemalloc/internal/hash.h", 
      "deps/jemalloc/test/integration/mallocx.c", 
      "deps/jemalloc/include/jemalloc/internal/huge.h", 
      "deps/jemalloc/configure", 
      "deps/jemalloc/test/include/test/mq.h", 
      "deps/jemalloc/test/integration/thread_arena.c", 
      "deps/jemalloc/test/unit/stats.c", 
      "deps/jemalloc/test/include/test/SFMT-sse2.h", 
      "deps/jemalloc/test/include/test/SFMT-params11213.h", 
      "deps/jemalloc/test/ALLOCM_ARENA.c", 
      "deps/jemalloc/test/unit/SFMT.c", 
      "deps/jemalloc/test/integration/allocm.c", 
      "deps/jemalloc/test/ALLOCM_ARENA.exp", 
      "deps/jemalloc/Makefile.in", 
      "deps/jemalloc/test/include/test/thd.h", 
      "deps/jemalloc/include/jemalloc/internal/qr.h", 
      "deps/jemalloc/src/jemalloc.c", 
      "deps/jemalloc/test/src/math.c", 
      "deps/jemalloc/.gitignore", 
      "deps/jemalloc/include/jemalloc/internal/ql.h", 
      "deps/jemalloc/test/thread_tcache_enabled.c", 
      "deps/jemalloc/src/util.c", 
      "deps/jemalloc/include/jemalloc/internal/private_namespace.sh", 
      "deps/jemalloc/test/src/SFMT.c", 
      "deps/jemalloc/test/unit/ql.c", 
      "deps/jemalloc/include/jemalloc/internal/public_unnamespace.sh", 
      "deps/jemalloc/src/tcache.c", 
      "deps/jemalloc/test/include/test/test.h", 
      "deps/jemalloc/test/src/test.c", 
      "deps/jemalloc/src/bitmap.c", 
      "deps/jemalloc/test/bitmap.exp", 
      "deps/jemalloc/include/jemalloc/jemalloc.h.in", 
      "deps/jemalloc/test/include/test/SFMT-params132049.h", 
      "deps/jemalloc/test/allocated.exp", 
      "deps/jemalloc/test/mremap.c", 
      "deps/jemalloc/include/jemalloc/jemalloc_defs.h.in", 
      "deps/jemalloc/doc/jemalloc.html", 
      "deps/jemalloc/test/posix_memalign.exp", 
      "deps/jemalloc/test/include/test/jemalloc_test_defs.h.in", 
      "deps/jemalloc/include/jemalloc/jemalloc_mangle.sh", 
      "deps/jemalloc/include/jemalloc/jemalloc_rename.sh", 
      "deps/jemalloc/test/allocm.c", 
      "deps/jemalloc/test/integration/xallocx.c", 
      "deps/jemalloc/src/huge.c", 
      "deps/jemalloc/test/unit/mq.c", 
      "deps/jemalloc/test/unit/prof_accum_a.c", 
      "deps/jemalloc/test/include/test/SFMT.h", 
      "deps/jemalloc/test/unit/ckh.c", 
      "deps/jemalloc/include/jemalloc/internal/quarantine.h", 
      "deps/jemalloc/test/integration/aligned_alloc.c", 
      "deps/jemalloc/test/unit/prof_gdump.c", 
      "deps/jemalloc/coverage.sh", 
      "deps/jemalloc/test/unit/prof_idump.c", 
      "deps/jemalloc/test/unit/rb.c", 
      "deps/jemalloc/test/rallocm.exp", 
      "deps/jemalloc/src/rtree.c", 
      "deps/jemalloc/src/quarantine.c", 
      "deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h", 
      "deps/jemalloc/test/include/test/SFMT-params607.h", 
      "deps/jemalloc/include/jemalloc/internal/public_namespace.sh", 
      "deps/jemalloc/include/jemalloc/jemalloc.sh", 
      "deps/jemalloc/test/posix_memalign.c", 
      "deps/jemalloc/test/unit/prof_accum.h", 
      "deps/jemalloc/include/jemalloc/internal/ckh.h", 
      "deps/jemalloc/test/integration/MALLOCX_ARENA.c", 
      "deps/jemalloc/src/chunk_mmap.c", 
      "deps/jemalloc/include/jemalloc/internal/private_symbols.txt", 
      "deps/jemalloc/test/rallocm.c", 
      "deps/jemalloc/test/src/thd.c", 
      "deps/jemalloc/test/include/test/mtx.h", 
      "deps/jemalloc/src/zone.c", 
      "deps/jemalloc/COPYING", 
      "deps/jemalloc/VERSION", 
      "deps/jemalloc/test/integration/allocated.c", 
      "deps/jemalloc/README", 
      "deps/jemalloc/test/unit/prof_accum.c", 
      "deps/jemalloc/test/thread_tcache_enabled.exp", 
      "deps/jemalloc/src/base.c", 
      "deps/jemalloc/include/jemalloc/internal/rb.h", 
      "deps/jemalloc/test/jemalloc_test.h.in", 
      "deps/jemalloc/test/unit/bitmap.c", 
      "deps/jemalloc/src/tsd.c", 
      "deps/jemalloc/include/jemalloc/jemalloc_macros.h.in", 
      "deps/jemalloc/src/chunk.c", 
      "deps/jemalloc/test/unit/zero.c", 
      "deps/jemalloc/test/integration/rallocm.c", 
      "deps/jemalloc/include/jemalloc/internal/chunk_dss.h", 
      "deps/jemalloc/test/unit/tsd.c", 
      "deps/jemalloc/test/include/test/SFMT-params2281.h", 
      "deps/jemalloc/include/jemalloc/internal/arena.h", 
      "deps/jemalloc/test/include/test/SFMT-params1279.h", 
      "deps/jemalloc/test/allocated.c", 
      "deps/jemalloc/test/unit/qr.c", 
      "deps/jemalloc/test/src/mtx.c", 
      "deps/jemalloc/src/ctl.c", 
      "deps/jemalloc/test/bitmap.c", 
      "deps/jemalloc/src/prof.c", 
      "deps/jemalloc/include/jemalloc/internal/tcache.h", 
      "deps/jemalloc/src/ckh.c", 
      "deps/jemalloc/include/jemalloc/jemalloc_protos.h.in", 
      "deps/jemalloc/include/jemalloc/internal/jemalloc_internal.h.in", 
      "deps/jemalloc/test/unit/quarantine.c", 
      "deps/jemalloc/doc/jemalloc.3", 
      "deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h.in", 
      "deps/jemalloc/test/integration/posix_memalign.c", 
      "deps/jemalloc/src/mutex.c", 
      "deps/jemalloc/include/jemalloc/internal/util.h", 
      "deps/jemalloc/bin/pprof", 
      "deps/jemalloc/include/jemalloc/internal/prng.h", 
      "deps/jemalloc/test/allocm.exp", 
      "deps/jemalloc/INSTALL", 
      "deps/jemalloc/doc/jemalloc.xml.in", 
      "deps/jemalloc/test/include/test/SFMT-params19937.h", 
      "deps/jemalloc/test/integration/mremap.c", 
      "deps/jemalloc/test/unit/junk.c", 
      "deps/jemalloc/include/jemalloc/internal/rtree.h", 
      "deps/jemalloc/test/thread_arena.c", 
      "deps/jemalloc/include/jemalloc/internal/private_unnamespace.sh", 
      "deps/jemalloc/test/thread_arena.exp", 
      "deps/jemalloc/ChangeLog", 
      "deps/jemalloc/test/integration/rallocx.c", 
      "deps/jemalloc/test/integration/thread_tcache_enabled.c", 
      "deps/jemalloc/src/chunk_dss.c", 
      "deps/jemalloc/include/jemalloc/internal/tsd.h", 
      "deps/jemalloc/test/include/test/SFMT-params.h", 
      "deps/jemalloc/test/include/test/SFMT-params4253.h", 
      "deps/jemalloc/test/unit/hash.c", 
      "deps/jemalloc/test/include/test/SFMT-params44497.h", 
      "deps/jemalloc/test/include/test/SFMT-params86243.h", 
      "deps/jemalloc/test/unit/mallctl.c", 
      "deps/jemalloc/test/aligned_alloc.c", 
      "deps/jemalloc/test/unit/util.c", 
      "deps/jemalloc/test/include/test/SFMT-params216091.h", 
      "deps/jemalloc/test/include/test/SFMT-alti.h", 
      "deps/jemalloc/config.sub", 
      "deps/jemalloc/test/aligned_alloc.exp", 
      "deps/jemalloc/test/unit/mtx.c", 
      "deps/jemalloc/include/jemalloc/internal/prof.h", 
      "deps/jemalloc/configure.ac", 
      "deps/jemalloc/test/include/test/math.h", 
      "deps/jemalloc/test/unit/rtree.c", 
      "deps/jemalloc/test/unit/prof_accum_b.c"
    ]
  }, 
  {
    "date": 1403166507, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Sentinel: handle SRI_PROMOTED flag correctly.\n\nLack of check of the SRI_PROMOTED flag caused Sentienl to act with the\npromoted slave turned into a master during failover like if it was a\nnormal instance.\n\nNormally this problem was not apparent because during real failovers the\nold master is down so the bugged code path was not entered, however with\nmanual failovers via the SENTINEL FAILOVER command, the problem was\neasily triggered.\n\nThis commit prevents promoted slaves from getting reconfigured, moreover\nwe now explicitly check that during a failover the slave turning into a\nmaster is the one we selected for promotion and not a different one.", 
    "id": "94bc467328cfaf9f8561e146fda1dfcc91f5c70e", 
    "files": [
      "src/sentinel.c"
    ]
  }, 
  {
    "date": 1402581952, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix semantics of Lua calls to SELECT.\n\nLua scripts are executed in the context of the currently selected\ndatabase (as selected by the caller of the script).\n\nHowever Lua scripts are also free to use the SELECT command in order to\naffect other DBs. When SELECT is called frm Lua, the old behavior, before\nthis commit, was to automatically set the Lua caller selected DB to the\nlast DB selected by Lua. See for example the following sequence of\ncommands:\n\n    SELECT 0\n    SET x 10\n    EVAL \"redis.call('select','1')\" 0\n    SET x 20\n\nBefore this commit after the execution of this sequence of commands,\nwe'll have x=10 in DB 0, and x=20 in DB 1.\n\nBecause of the problem above, there was a bug affecting replication of\nLua scripts, because of the actual implementation of replication. It was\npossible to fix the implementation of Lua scripts in order to fix the\nissue, but looking closely, the bug is the consequence of the behavior\nof Lua ability to set the caller's DB.\n\nUnder the old semantics, a script selecting a different DB, has no simple\nways to restore the state and select back the previously selected DB.\nMoreover the script auhtor must remember that the restore is needed,\notherwise the new commands executed by the caller, will be executed in\nthe context of a different DB.\n\nSo this commit fixes both the replication issue, and this hard-to-use\nsemantics, by removing the ability of Lua, after the script execution,\nto force the caller to switch to the DB selected by the Lua script.\n\nThe new behavior of the previous sequence of commadns is to just set\nX=20 in DB 0. However Lua scripts are still capable of writing / reading\nfrom different DBs if needed.\n\nWARNING: This is a semantical change that will break programs that are\nconceived to select the client selected DB via Lua scripts.\n\nThis fixes issue #1811.", 
    "id": "96e0fe6232afabff501bc72d3978a157ead7f359", 
    "files": [
      "tests/unit/scripting.tcl", 
      "src/scripting.c"
    ]
  }, 
  {
    "date": 1402424773, 
    "committer": {
      "email": "matt@genges.com", 
      "name": "Matt Stancliff"
    }, 
    "message": "Scripting: Fix regression from #1118\n\nThe new check-for-number behavior of Lua arguments broke\nusers who use large strings of just integers.\n\nThe Lua number check would convert the string to a number, but\nthat breaks user data because\nLua numbers have limited precision compared to an arbitrarily\nprecise number wrapped in a string.\n\nRegression fixed and new test added.\n\nFixes #1118 again.", 
    "id": "76efe1225fcd76cd10d6ea87ae9bec36b17edcfa", 
    "files": [
      "tests/unit/scripting.tcl", 
      "src/scripting.c"
    ]
  }, 
  {
    "date": 1402143947, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Cluster: SET-CONFIG-EPOCH should update currentEpoch.\n\nSET-CONFIG-EPOCH, used by redis-trib at cluster creation time, failed to\nupdate the currentEpoch, making it possible after a failover for a\nserver to set its configEpoch to a value smaller than the current one\n(since configEpochs are obtained using currentEpoch).\n\nThe bug totally break the Redis Cluster algorithms and protocols\nallowing for permanent split brain conditions about the slots\nconfiguration as shown in issue #1799.", 
    "id": "a2c2ef7de593ca9ae80b09c3b243965a746a106c", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1401901032, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed dbuf variable scope in luaRedisGenericCommand().\n\nI'm not sure if while the visibility is the inner block, the fact we\npoint to 'dbuf' is a problem or not, probably the stack var isx\nguaranteed to live until the function returns. However obvious code is\nbetter anyway.", 
    "id": "3758f27bc1d3be0b12676fa9a7f26678e4789c6c", 
    "files": [
      "src/scripting.c"
    ]
  }, 
  {
    "date": 1401263161, 
    "committer": {
      "email": "badboy@archlinux.us", 
      "name": "Jan-Erik Rediger"
    }, 
    "message": "Small typo fixed", 
    "id": "b187c591e39e072fa169bf60a1a46bebc855973b", 
    "files": [
      "src/debug.c"
    ]
  }, 
  {
    "date": 1400781672, 
    "committer": {
      "email": "andygrunwald@gmail.com", 
      "name": "Andy Grunwald"
    }, 
    "message": "Fixed typo in word avarege in result message of --intrinsic-latency analyzer", 
    "id": "94e3bb568ac2cb7763a1caab299337ed72149e4c", 
    "files": [
      "src/redis-cli.c"
    ]
  }, 
  {
    "date": 1400150037, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed typo in CLUSTER RESET implementation.", 
    "id": "7b87cda70e1462aa4208c666a7816facf17c8938", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1399909575, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Cluster: fixed data_age computation / check integer overflow.", 
    "id": "832a298005a8f7ccbdf1ff974a6928934f4c0ee9", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1399888094, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed possible buffer overflow bug if RDB file is corrupted.\n\n(Note: commit message modified by @antirez for clarity).", 
    "id": "b252fab06c5e3ccb739cdd27db5f5f0ddd03d506", 
    "files": [
      "src/rdb.c"
    ]
  }, 
  {
    "date": 1399886347, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed possible buffer overflow error", 
    "id": "433e835d3ee8c96426694a1029a1f3a8ae9aacec", 
    "files": [
      "src/rdb.c"
    ]
  }, 
  {
    "date": 1399471952, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed missing c->bufpos reset in luaRedisGenericCommand().\n\nBug introduced when adding a fast path to avoid copying the reply buffer\nfor small replies that fit into the client static buffer.", 
    "id": "3318b747053bf5009f16c4f10599d4fd9d418b1c", 
    "files": [
      "src/scripting.c"
    ]
  }, 
  {
    "date": 1398695897, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Added new sdscatfmt() %u and %U format specifiers.\n\nThis commit also fixes a bug in the implementation of sdscatfmt()\nresulting from stale references to the SDS string header after\nsdsMakeRoomFor() calls.", 
    "id": "2d76736a2ef00419320dae793e3523144e5f8c1c", 
    "files": [
      "src/sds.c"
    ]
  }, 
  {
    "date": 1398241183, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Missing return REDIS_ERR added to processMultibulkBuffer().\n\nWhen we set a protocol error we should return with REDIS_ERR to let the\ncaller know it should stop processing the client.\n\nBug found in a code auditing related to issue #1699.", 
    "id": "cb4e2ee9e784f23bbef1bb57c6c332dd3d2472bd", 
    "files": [
      "src/networking.c"
    ]
  }, 
  {
    "date": 1397466251, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "hllSparseAdd() opcode seek stop condition fixed.", 
    "id": "142d133c8a9d83540b4543796ec108d913024304", 
    "files": [
      "src/hyperloglog.c"
    ]
  }, 
  {
    "date": 1397461207, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed memmove() count in hllSparseAdd().", 
    "id": "82c31f750d71686f0412085ff35f67b37b407cc6", 
    "files": [
      "src/hyperloglog.c"
    ]
  }, 
  {
    "date": 1397313968, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Macro HLL_SPARSE_XZERO_LEN fixed.", 
    "id": "d9314079cac4fc869e8c277c4ea7e57b53a2ded2", 
    "files": [
      "src/hyperloglog.c"
    ]
  }, 
  {
    "date": 1396389553, 
    "committer": {
      "email": "ray.myers@vungle.com", 
      "name": "Raymond Myers"
    }, 
    "message": "Fixed pfadd/pfcount commands emitting hll* events instead of pf* events", 
    "id": "bf066c875f625d5740f2a85d56d36140023c9dc8", 
    "files": [
      "src/hyperloglog.c"
    ]
  }, 
  {
    "date": 1396027445, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "HyperLogLog algorithm fixed in two ways.\n\nThere was an error in the computation of 2^register, and the sequence of\nzeroes computed after the hashing did not included the \"1\".", 
    "id": "f90a4af3d75a3a97c6572429ad7bdb9a207c8bce", 
    "files": [
      "src/hyperloglog.c"
    ]
  }, 
  {
    "date": 1396011367, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "HLL_SET_REGISTER fixed.\n\nThere was an error in the first version of the macro.\nNow the HLLSELFTEST test reports success.", 
    "id": "e73839e7d5ed223d4adda66db1c0cb748d485998", 
    "files": [
      "src/hyperloglog.c"
    ]
  }, 
  {
    "date": 1396005346, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "HLL_(SET|GET)_REGISTER types fixed.", 
    "id": "1c88c5941b2392d3592583f8e99a9c05c8d0b2e2", 
    "files": [
      "src/hyperloglog.c"
    ]
  }, 
  {
    "date": 1395833488, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Cluster: clusterHandleConfigEpochCollision() fixed.\n\nNew config epochs must always be obtained incrementing the currentEpoch,\nthat is itself guaranteed to be >= the max configEpoch currently known\nto the node.", 
    "id": "3cf6f1f54fb3a31fb7157ab54919455feda41466", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1395764398, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Cluster: configEpoch collisions resolution.\n\nThe slave election in Redis Cluster guarantees that slaves promoted to\nmasters always end with unique config epochs, however failures during\nmanual reshardings, software bugs and operational errors may in theory\ncause two nodes to have the same configEpoch.\n\nThis commit introduces a mechanism to eventually always end with different\nconfigEpochs if a collision ever happens.\n\nAs a (wanted) side effect, this also ensures that after a new cluster\nis created, all nodes will end with a different configEpoch automatically.", 
    "id": "6c527a89a06ad93d7e250de78d3fecb39f13a6a3", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1395739935, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix off by one bug in freeMemoryIfNeeded() eviction pool.\n\nBug found by the continuous integration test running the Redis\nwith valgrind:\n\n==6245== Invalid read of size 8\n==6245==    at 0x4C2DEEF: memcpy@GLIBC_2.2.5 (mc_replace_strmem.c:876)\n==6245==    by 0x41F9E6: freeMemoryIfNeeded (redis.c:3010)\n==6245==    by 0x41D2CC: processCommand (redis.c:2069)\n\nmemmove() size argument was accounting for an extra element, going\noutside the bounds of the array.", 
    "id": "6540e9eeaae0e4b9a28e51680466d10c6ba3a3a1", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1395691664, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed undefined variable value with certain code paths.\n\nIn sentinelFlushConfig() fd could be undefined when the following if\nstatement was true:\n\n        if (rewrite_status == -1) goto werr;\n\nThis could cause random file descriptors to get closed.", 
    "id": "35667d75c38af8f7fc523dd47fa0751cb7afadac", 
    "files": [
      "src/sentinel.c"
    ]
  }, 
  {
    "date": 1395670653, 
    "committer": {
      "email": "matt@genges.com", 
      "name": "Matt Stancliff"
    }, 
    "message": "Fix maxclients error handling\n\nEverywhere in the Redis code base, maxclients is treated\nas an int with (int)maxclients or `maxclients = atoi(source)`,\nso let's make maxclients an int.\n\nThis fixes a bug where someone could specify a negative maxclients\non startup and it would work (as well as set maxclients very high)\nbecause:\n\n    unsigned int maxclients;\n    char *update = \"-300\";\n    maxclients = atoi(update);\n    if (maxclients < 1) goto fail;\n\nBut, (maxclients < 1) can only catch the case when maxclients\nis exactly 0.  maxclients happily sets itself to -300, which isn't\n-300, but rather 4294966996, which isn't < 1, so... everything\n\"worked.\"\n\nmaxclients config parsing checks for the case of < 1, but maxclients\nCONFIG SET parsing was checking for case of < 0 (allowing\nmaxclients to be set to 0).  CONFIG SET parsing is now updated to\nmatch config parsing of < 1.\n\nIt's tempting to add a MINIMUM_CLIENTS define, but... I didn't.\n\nThese changes were inspired by antirez#356, but this doesn't\nfix that issue.", 
    "id": "c138631cd16e5a28cf7f5169bee28ed4c6dae598", 
    "files": [
      "src/config.c", 
      "src/redis.h"
    ]
  }, 
  {
    "date": 1395353798, 
    "committer": {
      "email": "badboy@archlinux.us", 
      "name": "Jan-Erik Rediger"
    }, 
    "message": "Fixed a few typos.", 
    "id": "4fdd7a05463fee21e9d19d64c8505de09e0de8a1", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1394465022, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Cluster: evalGetKeys() fixed: was not setting keys count.", 
    "id": "21765c858886bfeb1349ab83dccb1113b5e55d2c", 
    "files": [
      "src/db.c"
    ]
  }, 
  {
    "date": 1394462681, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed memory leak in SORT LIMIT option argument parsing on error.", 
    "id": "8caecc9ab466011fd1432c0a7e2dc51ae8797629", 
    "files": [
      "src/sort.c"
    ]
  }, 
  {
    "date": 1394461573, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Cluster: evalGetKey() added for EVAL/EVALSHA.\n\nPreviously we used zunionInterGetKeys(), however after this function was\nfixed to account for the destination key (not needed when the API was\ndesigned for \"diskstore\") the two set of commands can no longer be served\nby an unique keys-extraction function.", 
    "id": "c0e818ab080f8c07eb1885945eea4a42f3ca3d29", 
    "files": [
      "src/redis.c", 
      "src/db.c", 
      "src/redis.h"
    ]
  }, 
  {
    "date": 1393976462, 
    "committer": {
      "email": "badboy@archlinux.us", 
      "name": "Jan-Erik Rediger"
    }, 
    "message": "Small typo fixed", 
    "id": "5f5118bdad709c5eef10140130ba1329b6a5e661", 
    "files": [
      "src/sentinel.c"
    ]
  }, 
  {
    "date": 1393903294, 
    "committer": {
      "email": "zhanghailei@youku.com", 
      "name": "zhanghailei"
    }, 
    "message": "FIXED  a typo  more thank  should be more than", 
    "id": "c0f86654142b47e2275fc84eacc08a5e680d7929", 
    "files": [
      "src/dict.c"
    ]
  }, 
  {
    "date": 1392709857, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Sentinel: fix slave promotion timeout.\n\nIf we can't reconfigure a slave in time during failover, go forward as\nanyway the slave will be fixed by Sentinels in the future, once they\ndetect it is misconfigured.\n\nOtherwise a failover in progress may never terminate if for some reason\nthe slave is uncapable to sync with the master while at the same time\nit is not disconnected.", 
    "id": "18b8bad53cf380471ec28ec097fd38960a246077", 
    "files": [
      "src/sentinel.c"
    ]
  }, 
  {
    "date": 1392300806, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Update cached time in rdbLoad() callback.\n\nserver.unixtime and server.mstime are cached less precise timestamps\nthat we use every time we don't need an accurate time representation and\na syscall would be too slow for the number of calls we require.\n\nSuch an example is the initialization and update process of the last\ninteraction time with the client, that is used for timeouts.\n\nHowever rdbLoad() can take some time to load the DB, but at the same\ntime it did not updated the time during DB loading. This resulted in the\nbug described in issue #1535, where in the replication process the slave\nloads the DB, creates the redisClient representation of its master, but\nthe timestamp is so old that the master, under certain conditions, is\nsensed as already \"timed out\".\n\nThanks to @yoav-steinberg and Redis Labs Inc for the bug report and\nanalysis.", 
    "id": "51bd9da1fdf3d4bb0d4f81234f33003c16db9a51", 
    "files": [
      "src/redis.c", 
      "src/rdb.c", 
      "src/redis.h"
    ]
  }, 
  {
    "date": 1392289843, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix script cache bug in the scripting engine.\n\nThis commit fixes a serious Lua scripting replication issue, described\nby Github issue #1549. The root cause of the problem is that scripts\nwere put inside the script cache, assuming that slaves and AOF already\ncontained it, even if the scripts sometimes produced no changes in the\ndata set, and were not actaully propagated to AOF/slaves.\n\nExample:\n\n    eval \"if tonumber(KEYS[1]) > 0 then redis.call('incr', 'x') end\" 1 0\n\nThen:\n\n    evalsha <sha1 step 1 script> 1 0\n\nAt this step sha1 of the script is added to the replication script cache\n(the script is marked as known to the slaves) and EVALSHA command is\ntransformed to EVAL. However it is not dirty (there is no changes to db),\nso it is not propagated to the slaves. Then the script is called again:\n\n    evalsha <sha1 step 1 script> 1 1\n\nAt this step master checks that the script already exists in the\nreplication script cache and doesn't transform it to EVAL command. It is\ndirty and propagated to the slaves, but they fail to evaluate the script\nas they don't have it in the script cache.\n\nThe fix is trivial and just uses the new API to force the propagation of\nthe executed command regardless of the dirty state of the data set.\n\nThank you to @minus-infinity on Github for finding the issue,\nunderstanding the root cause, and fixing it.", 
    "id": "21e6b0fbe9810a37844bbdf86e5aba655cfa5fe9", 
    "files": [
      "src/scripting.c"
    ]
  }, 
  {
    "date": 1392049270, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Cluster: fixed inverted arguments in logging function call.", 
    "id": "1a73c992a3aeedab3c7fd57ab538722327f3fc99", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1392046057, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Cluster: clusterReadHandler() fixed to work with new message header.", 
    "id": "f885fa8bac6e476e4ca9ad8be80707ac74a320af", 
    "files": [
      "src/cluster.c", 
      "src/cluster.h"
    ]
  }, 
  {
    "date": 1391612516, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Cluster: fixed MF condition in clusterHandleSlaveFailover().\n\nFor manual failover we need a manual failover in progress, and that\nmf_can_start is true (master offset received and matched).", 
    "id": "04fe000bf8e53d12a329b7e7f761f3eeb821ea6f", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1390900272, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed inverted if condition in MISCONF error code path.", 
    "id": "72f1715e45c8e8418e158fb676b7e491d51ab9e7", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1389800707, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Cluster: clusterBlacklistAddNode() key lookup fixed.\n\nWe can't lookup by node->name that's not an SDS string but a plain C\narray in the node structure.", 
    "id": "4e1861155f2dfc52e357b9253ea894c6f7959a06", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1389782026, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Cluster: range checking in getSlotOrReply() fixed.\n\nSee issue #1426 on Github.", 
    "id": "25ddefdea300958f356365ab8830a9676193df70", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1389364422, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Sentinel: releaseSentinelRedisInstance() top comment fixed.\n\nThe claim about unlinking the instance from the connected hash tables\nwas the opposite of the reality. Also the current actual behavior is\nsafer in most cases, so it is better to manually unlink when needed.", 
    "id": "cf2835519eab7d4695ead10a771fa2f3847f6d05", 
    "files": [
      "src/sentinel.c"
    ]
  }, 
  {
    "date": 1387993305, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "anetTcpGenericConnect() bug introduced in 9d19977 fixed.\n\nDurign a refactoring I mispelled _port for port.\nThis is one of the reasons I never used _varname myself.", 
    "id": "a2a900356e62628588742dd6b2de8c8d55b86784", 
    "files": [
      "src/anet.c"
    ]
  }, 
  {
    "date": 1387991728, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "anetTcpGenericConnect() code improved + 1 bug fix.\n\nNow the socket is closed if anetNonBlock() fails, and in general the\ncode structure makes it harder to introduce this kind of bugs in the\nfuture.\n\nReference: pull request #1059.", 
    "id": "491f68108868baed5b60045b75099b5475eddd35", 
    "files": [
      "src/anet.c"
    ]
  }, 
  {
    "date": 1387794695, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Configuring port to 0 disables IP socket as specified.\n\nThis was no longer the case with 2.8 becuase of a bug introduced with\nthe IPv6 support. Now it is fixed.\n\nThis fixes issue #1287 and #1477.", 
    "id": "7e9433cee16364f9352cc95f36fbad056eadd964", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1387269952, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed clearNodeFailureIfNeeded() time type to mstime_t.\n\nThis prevented 32bit cluster instances from clearing the FAIL flag when\nneeded.", 
    "id": "47815d38e0f39476494c5da8dcd90c9ba24aefd8", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1386930861, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "SDIFF iterator misuse fixed in diff algorithm #1.\n\nThe bug could be easily triggered by:\n\n    SADD foo a b c 1 2 3 4 5 6\n    SDIFF foo foo\n\nWhen the key was the same in two sets, an unsafe iterator was used to\ncheck existence of elements in the same set we were iterating.\nUsually this would just result into a wrong output, however with the\ndict.c API misuse protection we have in place, the result was actually\nan assertion failed that was triggered by the CI test, while creating\nrandom datasets for the \"MASTER and SLAVE consistency\" test.", 
    "id": "c00453da1d01dbd2de40d26602c979b516f8a47f", 
    "files": [
      "src/t_set.c"
    ]
  }, 
  {
    "date": 1386837209, 
    "committer": {
      "email": "codeeply@gmail.com", 
      "name": "codeeply"
    }, 
    "message": "comment mistake fixed", 
    "id": "0f06f8df079073263974110643ddbebe8c3447ac", 
    "files": [
      "src/sds.c"
    ]
  }, 
  {
    "date": 1386697584, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "dict.c: added optional callback to dictEmpty().\n\nRedis hash table implementation has many non-blocking features like\nincremental rehashing, however while deleting a large hash table there\nwas no way to have a callback called to do some incremental work.\n\nThis commit adds this support, as an optiona callback argument to\ndictEmpty() that is currently called at a fixed interval (one time every\n65k deletions).", 
    "id": "2eb781b35bfa9bde5ab88b192cd3e666e7872625", 
    "files": [
      "src/replication.c", 
      "src/db.c", 
      "src/redis.h", 
      "src/dict.c", 
      "src/t_list.c", 
      "src/debug.c", 
      "src/dict.h", 
      "src/sentinel.c"
    ]
  }, 
  {
    "date": 1386326266, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Sentinel: fix reported role fields when master is reset.\n\nWhen there is a master address switch, the reported role must be set to\nmaster so that we have a chance to re-sample the INFO output to check if\nthe new address is reporting the right role.\n\nOtherwise if the role was wrong, it will be sensed as wrong even after\nthe address switch, and for enough time according to the role change\ntime, for Sentinel consider the master SDOWN.\n\nThis fixes isue #1446, that describes the effects of this bug in\npractice.", 
    "id": "2b414a4b5f280216c5d97564506ae3ee742ef673", 
    "files": [
      "src/sentinel.c"
    ]
  }, 
  {
    "date": 1386257732, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed grammar: before H the article is a, not an.", 
    "id": "11e81a1e9ad1d1b4639aa8ed3fd2616ed8d1f176", 
    "files": [
      "src/networking.c", 
      "src/t_list.c", 
      "src/redis-check-dump.c", 
      "src/object.c", 
      "src/zmalloc.c", 
      "src/aof.c", 
      "src/scripting.c", 
      "src/ae_epoll.c", 
      "src/zipmap.c", 
      "src/db.c", 
      "src/rdb.c", 
      "src/sort.c", 
      "src/dict.c", 
      "src/cluster.c", 
      "src/redis.c", 
      "src/t_zset.c", 
      "src/sds.c", 
      "src/replication.c", 
      "src/sentinel.c"
    ]
  }, 
  {
    "date": 1386251707, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix clients timeout handling.\n\nDuring the refactoring of blocking operations, commit\n82b672f6335ac2db32a724ba5dc10398c949a4a8, a bug was introduced where\na milliseconds time is compared to a seconds time, so all the clients\nalways appear to timeout if timeout is set to non-zero value.\n\nThanks to Jonathan Leibiusky for finding the bug and helping verifying\nthe cause and fix.", 
    "id": "58713c6b13ebe736ad33ff48fba13a1db5d58e68", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1385466951, 
    "committer": {
      "email": "huangz1990@gmail.com", 
      "name": "huangz1990"
    }, 
    "message": "fix a bug in sentinel.c about pub/sub link", 
    "id": "86a540a66e3a429ada1efe25534c8db255ac9895", 
    "files": [
      "src/sentinel.c"
    ]
  }, 
  {
    "date": 1385373593, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Sentinel: fixes inverted strcmp() test preventing config updates.\n\nThe result of this one-char bug was pretty serious, if the new master\nhad the same port of the previous master, but just a different IP\naddress, non-leader Sentinels would not be able to recognize the\nconfiguration change.\n\nThis commit fixes issue #1394.\n\nMany thanks to @shanemadden that reported the bug and helped\ninvestigating it.", 
    "id": "6f4fd5576242cc98829dbf0f4683adc703188a71", 
    "files": [
      "src/sentinel.c"
    ]
  }, 
  {
    "date": 1385030150, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Sentinel: check for disconnected links in sentinelSendHello().\n\nDoes not fix any bug as the test is performed by the caller, but better\nto have the check.", 
    "id": "d920177f8ddadc4af7fbc8a02438340eea5ca1f3", 
    "files": [
      "src/sentinel.c"
    ]
  }, 
  {
    "date": 1384860886, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Sentinel: failover script execution fixed.", 
    "id": "1f9728cb20f7eaed3f613e7b8c49292edd1edc34", 
    "files": [
      "src/sentinel.c"
    ]
  }, 
  {
    "date": 1384855190, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Sentinel: rewriteConfigSentinelOption() sub-iterators var typo fixed.", 
    "id": "b8a94463b751e55c9b3dfe08646738a13974c274", 
    "files": [
      "src/sentinel.c"
    ]
  }, 
  {
    "date": 1384849727, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Sentinel: can-failover option removed, many comments fixed.", 
    "id": "47df12d5d9ab45a2603e1b16e862e8d0e29c0f2c", 
    "files": [
      "src/sentinel.c"
    ]
  }, 
  {
    "date": 1384357197, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Sentinel: role reporting fixed and added in SENTINEL output.", 
    "id": "ddaad9fe2d9100f9ccbd6aa3515157ecbf7e413e", 
    "files": [
      "src/sentinel.c"
    ]
  }, 
  {
    "date": 1383733304, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Sentinel: increment pending_commands counter in two more places.\n\nAUTH and SCRIPT KILL were sent without incrementing the pending commands\ncounter. Clearly this needs some kind of wrapper doing it for the caller\nin order to be less bug prone.", 
    "id": "23800d9e496a582760a35573cb33e0431d077808", 
    "files": [
      "src/sentinel.c"
    ]
  }, 
  {
    "date": 1383732807, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Sentinel: always send CONFIG REWRITE when changing instance role.\n\nThis change makes Sentinel less fragile about a number of failure modes.\n\nThis commit also fixes a different bug as a side effect, SLAVEOF command\nwas sent multiple times without incrementing the pending commands count.", 
    "id": "671c1dfb5629e32f3addfe865e5e5a04f35b007d", 
    "files": [
      "src/db.c", 
      "src/sentinel.c"
    ]
  }, 
  {
    "date": 1383668591, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed typo in parseScanCursorOrReply(): ad -> at.\n\nThanks to @badboy for reporting it.", 
    "id": "5fd6dee0e633cc3c2f4cb6f33741e6cb1eed9653", 
    "files": [
      "src/db.c"
    ]
  }, 
  {
    "date": 1382713555, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed typos in dictScan() comment.", 
    "id": "7bd45659b9e7dc9efc4e939e211971be2f9ee528", 
    "files": [
      "src/dict.c"
    ]
  }, 
  {
    "date": 1382694498, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "SCAN: use define REDIS_LONGSTR_SIZE instead of fixed len.", 
    "id": "64722b0946716a524528462379416ed212c971f2", 
    "files": [
      "src/db.c"
    ]
  }, 
  {
    "date": 1382694362, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed typo in SCAN comment. iff -> if.", 
    "id": "43fdf3b404413f6e3b2c39ac491238c70ecee81c", 
    "files": [
      "src/db.c"
    ]
  }, 
  {
    "date": 1381329366, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Cluster: data_age conversion to milliseconds fixed.", 
    "id": "1447d28c0f2659a7a3df769c8426a6ee8a5b4552", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1380896094, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Replication: install the write handler when reusing a cached master.\n\nSometimes when we resurrect a cached master after a successful partial\nresynchronization attempt, there is pending data in the output buffers\nof the client structure representing the master (likely REPLCONF ACK\ncommands).\n\nIf we don't reinstall the write handler, it will never be installed\nagain by addReply*() family functions as they'll assume that if there is\nalready data pending, the write handler is already installed.\n\nThis bug caused some slaves after a successful partial sync to never\nsend REPLCONF ACK, and continuously being detected as timing out by the\nmaster, with a disconnection / reconnection loop.", 
    "id": "0150c70b2bc50ab4d29680619115bd1629801f5d", 
    "files": [
      "src/replication.c"
    ]
  }, 
  {
    "date": 1380895945, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Replication: install the write handler when reusing a cached master.\n\nSometimes when we resurrect a cached master after a successful partial\nresynchronization attempt, there is pending data in the output buffers\nof the client structure representing the master (likely REPLCONF ACK\ncommands).\n\nIf we don't reinstall the write handler, it will never be installed\nagain by addReply*() family functions as they'll assume that if there is\nalready data pending, the write handler is already installed.\n\nThis bug caused some slaves after a successful partial sync to never\nsend REPLCONF ACK, and continuously being detected as timing out by the\nmaster, with a disconnection / reconnection loop.", 
    "id": "1461422ce66056eb79231e8240dde01db2260fa0", 
    "files": [
      "src/replication.c"
    ]
  }, 
  {
    "date": 1380882450, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "PSYNC: safer handling of PSYNC requests.\n\nThere was a bug that over-esteemed the amount of backlog available,\nhowever this could only happen when a slave was asking for an offset\nthat was in the \"future\" compared to the master replication backlog.\n\nNow this case is handled well and logged as an incident in the master\nlog file.", 
    "id": "d62ae1ec059942a39060a3dcb18fd171372a6100", 
    "files": [
      "src/replication.c"
    ]
  }, 
  {
    "date": 1380882309, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "PSYNC: safer handling of PSYNC requests.\n\nThere was a bug that over-esteemed the amount of backlog available,\nhowever this could only happen when a slave was asking for an offset\nthat was in the \"future\" compared to the master replication backlog.\n\nNow this case is handled well and logged as an incident in the master\nlog file.", 
    "id": "37e06bd95262f69144aae7c85401a9e7d9411b3f", 
    "files": [
      "src/replication.c"
    ]
  }, 
  {
    "date": 1378214148, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "A mistype fixed", 
    "id": "70e82e5c79affb255d57e88474e254f1ccee56cf", 
    "files": [
      "src/replication.c"
    ]
  }, 
  {
    "date": 1378201423, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Cluster: fixed a bug in clusterSendPublish() due to inverted statements.\n\nThe code used to copy the header *after* the 'hdr' pointer was already\nswitched to the new buffer. Of course we need to do the reverse.", 
    "id": "f6efb6cdec292f5f4891445346e9125965874f30", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1377770043, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed critical memory leak from EVAL.\n\nMultiple missing calls to lua_pop prevented the error handler function\npushed on the stack for lua_pcall() to be popped before returning,\ncausing a memory leak in almost all the code paths of EVAL (both\nsuccessful calls and calls returning errors).\n\nThis caused two issues: Lua leaking memory (and this was very visible\nfrom INFO memory output, as the 'used_memory_lua' field reported an\nalways increasing amount of memory used), and as a result slower and\nslower GC cycles resulting in all the CPU being used.\n\nThanks to Tanguy Le Barzic for noticing something was wrong with his 2.8\nslave, and for creating a testing EC2 environment where I was able to\ninvestigate the issue.", 
    "id": "41d3147344da4656b6a21c73373c34d25fe8f24d", 
    "files": [
      "src/scripting.c"
    ]
  }, 
  {
    "date": 1377526585, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Don't update node pong time via gossip.\n\nThis feature was implemented in the initial days of the Redis Cluster\nimplementaiton but is not a good idea at all.\n\n1) It depends on clocks to be synchronized, that is already very bad.\n2) Moreover it adds a bug where the pong time is updated via gossip so\nno new PING is ever sent by the current node, with the effect of no PONG\nreceived, no update of tables, no clearing of PFAIL flag.\n\nIn general to trust other nodes about the reachability of other nodes is\na broken distributed programming model.", 
    "id": "303dde3757b75f9ce529ad804abf7e6d6ae5e793", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1377176033, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Cluster: set event handler in cluster bus listening socket.\n\nThe commit using listenToPort() introduced this bug by no longer\ncreating the event handler to handle incoming messages from the cluster\nbus.", 
    "id": "6ae37b0e1de3b0255b667edc9efdaf436a3edb6b", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1376917837, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed type in dict.c comment: 265 -> 256.", 
    "id": "6253180abd9fd11a385c644fe1dee932ef83d86f", 
    "files": [
      "src/dict.c"
    ]
  }, 
  {
    "date": 1376917257, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "dict.c iterator API misuse protection.\n\ndict.c allows the user to create unsafe iterators, that are iterators\nthat will not touch the dictionary data structure in any way, preventing\ncopy on write, but at the same time are limited in their usage.\n\nThe limitation is that when itearting with an unsafe iterator, no call\nto other dictionary functions must be done inside the iteration loop,\notherwise the dictionary may be incrementally rehashed resulting into\nmissing elements in the set of the elements returned by the iterator.\n\nHowever after introducing this kind of iterators a number of bugs were\nfound due to misuses of the API, and we are still finding\nbugs about this issue. The bugs are not trivial to track because the\neffect is just missing elements during the iteartion.\n\nThis commit introduces auto-detection of the API misuse. The idea is\nthat an unsafe iterator has a contract: from initialization to the\nrelease of the iterator the dictionary should not change.\n\nSo we take a fingerprint of the dictionary state, xoring a few important\ndict properties when the unsafe iteartor is initialized. We later check\nwhen the iterator is released if the fingerprint is still the same. If it\nis not, we found a misuse of the iterator, as not allowed API calls\nchanged the internal state of the dictionary.\n\nThis code was checked against a real bug, issue #1240.\n\nThis is what Redis prints (aborting) when a misuse is detected:\n\nAssertion failed: (iter->fingerprint == dictFingerprint(iter->d)),\nfunction dictReleaseIterator, file dict.c, line 587.", 
    "id": "48cde3fe4710b43be6537854ab464b8568616fb8", 
    "files": [
      "src/dict.h", 
      "src/dict.c"
    ]
  }, 
  {
    "date": 1376304629, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "replicationFeedSlave() reworked for correctness and speed.\n\nThe previous code using a static buffer as an optimization was lame:\n\n1) Premature optimization, actually it was *slower* than naive code\n   because resulted into the creation / destruction of the object\n   encapsulating the output buffer.\n2) The code was very hard to test, since it was needed to have specific\n   tests for command lines exceeding the size of the static buffer.\n3) As a result of \"2\" the code was bugged as the current tests were not\n   able to stress specific corner cases.\n\nIt was replaced with easy to understand code that is safer and faster.", 
    "id": "dcc48a81436c08128a15f88170eee1287122e87a", 
    "files": [
      "src/replication.c"
    ]
  }, 
  {
    "date": 1376301095, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix a PSYNC bug caused by a variable name typo.", 
    "id": "aa05128f51baf8063606770b608432e9ffd96981", 
    "files": [
      "src/replication.c"
    ]
  }, 
  {
    "date": 1375008574, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix replicationFeedSlaves() off-by-one bug.\n\nThis fixes issue #1221.", 
    "id": "c151eb6d92ae69a8fecf14f7429d38929e0c75d0", 
    "files": [
      "src/replication.c"
    ]
  }, 
  {
    "date": 1374737760, 
    "committer": {
      "email": "kaoshi.juan@163.com", 
      "name": "Allan"
    }, 
    "message": "fixed initServer fail while having no IPv6 nor IPv4", 
    "id": "a0e986d7f28d79ba0d6fcf7d5a4104e5d5398916", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1374737313, 
    "committer": {
      "email": "kaoshi.juan@163.com", 
      "name": "Allan"
    }, 
    "message": "fixed initServer failed if no IPV4 or no IPV6", 
    "id": "cba7a4e69a9fbfadf0e0206a0a3859abf26ef0f8", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1374672895, 
    "committer": {
      "email": "kaoshi.juan@163.com", 
      "name": "Allan"
    }, 
    "message": "fixed bug issue of #1213", 
    "id": "1e7cff23b34041f2be8a208841ae398091683790", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1374483955, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a possible bug in client->reply_bytes computation.", 
    "id": "7ed7652846a0cb5f3db25e98b323ba75a31ebcb5", 
    "files": [
      "src/networking.c"
    ]
  }, 
  {
    "date": 1373623012, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed compareStringObject() and introduced collateStringObject().\n\ncompareStringObject was not always giving the same result when comparing\ntwo exact strings, but encoded as integers or as sds strings, since it\nswitched to strcmp() when at least one of the strings were not sds\nencoded.\n\nFor instance the two strings \"123\" and \"123\\x00456\", where the first\nstring was integer encoded, would result into the old implementation of\ncompareStringObject() to return 0 as if the strings were equal, while\ninstead the second string is \"greater\" than the first in a binary\ncomparison.\n\nThe same compasion, but with \"123\" encoded as sds string, would instead\nreturn a value < 0, as it is correct. It is not impossible that the\nabove caused some obscure bug, since the comparison was not always\ndeterministic, and compareStringObject() is used in the implementation\nof skiplists, hash tables, and so forth.\n\nAt the same time, collateStringObject() was introduced by this commit, so\nthat can be used by SORT command to return sorted strings usign\ncollation instead of binary comparison. See next commit.", 
    "id": "81e55ec0f399d5bb2b75e5b2ffa5a62d60a31bc2", 
    "files": [
      "src/redis.h", 
      "src/object.c"
    ]
  }, 
  {
    "date": 1373291497, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix cluster.c inet_ntop use of sizeof(n->ip).\n\nUsing sizeof with an array will only return expected results if the\narray is created in the scope of the function where sizeof is used. This\ncommit changes the inet_ntop calls so that they use the fixed buffer\nvalue as defined in redis.h which is 16.", 
    "id": "6e894f02cf305ac0e86413e96f51b03571fdbebf", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1372062364, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Replication of scripts as EVALSHA: sha1 caching implemented.\n\nThis code is only responsible to take an LRU-evicted fixed length cache\nof SHA1 that we are sure all the slaves received.\n\nIn this commit only the implementation is provided, but the Redis core\ndoes not use it to actually send EVALSHA to slaves when possible.", 
    "id": "94ec7db47067ce8644e800b669ced032095747f3", 
    "files": [
      "src/redis.c", 
      "src/redis.h", 
      "src/replication.c"
    ]
  }, 
  {
    "date": 1369436407, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a bug in no queueing replies to master.", 
    "id": "a950f48906a7699314d2f1c3e2dee522a29e97fb", 
    "files": [
      "src/networking.c"
    ]
  }, 
  {
    "date": 1368608816, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "CONFIG REWRITE: fixed typo in AOF fsync policy.", 
    "id": "402a0f1ca0c317cf1ba374c633984c7fefb07be1", 
    "files": [
      "src/config.c"
    ]
  }, 
  {
    "date": 1367588489, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Cluster: createClusterLink() comment fixed for grammar.", 
    "id": "8a51c067adf56996644a4fadab10d9ce4f05b370", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1367501759, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix AOF bug: expire could be removed from key on AOF rewrite.\n\nThere was a race condition in the AOF rewrite code that, with bad enough\ntiming, could cause a volatile key just about to expire to be turned\ninto a non-volatile key. The bug was never reported to cause actualy\nissues, but was found analytically by an user in the Redis mailing list:\n\nhttps://groups.google.com/forum/?fromgroups=#!topic/redis-db/Kvh2FAGK4Uk\n\nThis commit fixes issue #1079.", 
    "id": "9cd06e4406377254c4d788299d11e4a040c200d6", 
    "files": [
      "src/aof.c"
    ]
  }, 
  {
    "date": 1364294722, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "TTL / PTTL commands: two bugs fixed.\n\nThis commit fixes two corner cases for the TTL command.\n\n1) When the key was already logically expired (expire time older\nthan current time) the command returned -1 instead of -2.\n\n2) When the key was existing and the expire was found to be exactly 0\n(the key was just about to expire), the command reported -1 (that is, no\nexpire) instead of a TTL of zero (that is, about to expire).", 
    "id": "873f328fd84aea9b3b7ac0ae9621383ec84e0eb3", 
    "files": [
      "src/db.c"
    ]
  }, 
  {
    "date": 1363292832, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Cluster: two lame bugs fixed in FAILOVER AUTH messages generation.", 
    "id": "90e99a208277d976a7682f4249fa873295c65de8", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1363240363, 
    "committer": {
      "email": "xn212516@163.com", 
      "name": "NanXiao"
    }, 
    "message": "Update config.c\n\nFix bug in configGetCommand function: get correct masterauth value.", 
    "id": "79a13b46fbad91418a223ee1a2846dad8bd9117e", 
    "files": [
      "src/config.c"
    ]
  }, 
  {
    "date": 1361376472, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Cluster: ASKING command fixed, state was not retained.", 
    "id": "9ec1b709f51b05df6e4ca1637bd5143d585418ab", 
    "files": [
      "src/networking.c"
    ]
  }, 
  {
    "date": 1359957668, 
    "committer": {
      "email": "ltnwgl@gmail.com", 
      "name": "Gengliang Wang"
    }, 
    "message": "Fix a bug in srandmemberWithCountCommand()\n\nIn CASE 2, the call\u00a0sunionDiffGenericCommand will involve the string \"srandmember\" \r\n> sadd foo one\r\n(integer 1)\r\n> sadd srandmember two\r\n(integer 2)\r\n> srandmember foo 3\r\n1)\"one\"\r\n2)\"two\"", 
    "id": "002747336a37b72b84503848a3f7f4f8cbc414cf", 
    "files": [
      "src/t_set.c"
    ]
  }, 
  {
    "date": 1359463801, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Z*STORE event fixed: generate del only if resulting sorted set is empty.", 
    "id": "ad297a1a6782905394cb56b00ed6dbd08707fb04", 
    "files": [
      "src/t_zset.c"
    ]
  }, 
  {
    "date": 1359375316, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Keyspace notifications: fixed a leak and a bug introduced in the latest commit.", 
    "id": "562b2bd6a7d6e8ee893d68059360b593ed43352f", 
    "files": [
      "tests/assets/default.conf", 
      "src/notify.c"
    ]
  }, 
  {
    "date": 1359375293, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix decrRefCount() prototype from void to robj pointer.\n\ndecrRefCount used to get its argument as a void* pointer in order to be\nused as destructor where a 'void free_object(void*)' prototype is\nexpected. However this made simpler to introduce bugs by freeing the\nwrong pointer. This commit fixes the argument type and introduces a new\nwrapper called decrRefCountVoid() that can be used when the void*\nargument is needed.", 
    "id": "8766e81079dd4e26b0f5e1b04b8fc319b8d13eb7", 
    "files": [
      "src/aof.c", 
      "src/networking.c", 
      "src/redis.h", 
      "src/object.c", 
      "src/t_list.c"
    ]
  }, 
  {
    "date": 1359375282, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed over-80-cols comment in db.c", 
    "id": "2ea9518a530bf64cfe3b6e124f67efc1d355240f", 
    "files": [
      "src/db.c"
    ]
  }, 
  {
    "date": 1358934648, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Lua struct library updated to version 0.2.\n\nThere was a bug in the previous version of this library that caused a\ncrash under the circumstances described in issue #901.\n\nThe newer version of the library appears to be fixed (I tested it\nmanually with valgrind and everything seems fine now).\n\nFor more information about this library please visit this web site:\n\n    http://www.inf.puc-rio.br/~roberto/struct/", 
    "id": "61853a9c758bc9d368d4610c0f89387c95b9301d", 
    "files": [
      "deps/lua/src/lua_struct.c"
    ]
  }, 
  {
    "date": 1358768062, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a bug in memtest progress bar, that had no actual effects.\n\nThis closes issue #859, thanks to @erbenmo.", 
    "id": "93f61bb2a492cf008e353db951275ba0b12490dc", 
    "files": [
      "src/memtest.c"
    ]
  }, 
  {
    "date": 1358599574, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Additionally two typos fixed thanks to @jodal", 
    "id": "e50cdbe461263db87f910ce963c3e6a222c91835", 
    "files": [
      "src/networking.c", 
      "src/t_string.c"
    ]
  }, 
  {
    "date": 1358589584, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed many typos.", 
    "id": "9d09ce3981deb58282ae47c87e1080936f04991f", 
    "files": [
      "src/networking.c", 
      "src/redis-cli.c", 
      "src/ae.c", 
      "src/sha1.c", 
      "src/dict.c", 
      "src/redis-check-dump.c", 
      "src/t_zset.c", 
      "src/replication.c", 
      "src/object.c", 
      "tests/unit/scripting.tcl", 
      "src/cluster.c", 
      "src/release.c", 
      "src/pubsub.c", 
      "src/zmalloc.c", 
      "src/db.c", 
      "src/adlist.c", 
      "src/ae_evport.c", 
      "src/t_list.c", 
      "00-RELEASENOTES", 
      "src/lzfP.h", 
      "src/mkreleasehdr.sh", 
      "src/scripting.c", 
      "sentinel.conf", 
      "src/multi.c", 
      "src/t_set.c", 
      "src/rdb.c", 
      "src/anet.c", 
      "src/bio.c", 
      "src/rdb.h", 
      "src/redis-trib.rb", 
      "src/debug.c", 
      "src/crc16.c", 
      "src/aof.c", 
      "redis.conf", 
      "src/redis.h", 
      "src/sort.c", 
      "src/t_string.c", 
      "src/bitops.c", 
      "src/redis.c", 
      "src/config.c", 
      "src/sds.c", 
      "src/sentinel.c"
    ]
  }, 
  {
    "date": 1358385654, 
    "committer": {
      "email": "charsyam@gmail.com", 
      "name": "charsyam"
    }, 
    "message": "redis-cli prompt bug fix", 
    "id": "e3962366519e171aff0c7ae1253edb554fc85c5d", 
    "files": [
      "src/redis-cli.c"
    ]
  }, 
  {
    "date": 1358330683, 
    "committer": {
      "email": "huww06@gmail.com", 
      "name": "Hu Weiwei"
    }, 
    "message": "fixed some typos.", 
    "id": "1dc2d6dc47b9cc70e9eee4501fea5b209b0a22a7", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1358253253, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Typo fixed, ASCI -> ASCII.", 
    "id": "9b89ab06c46cbf72df3c0ac89118523faefe0c77", 
    "files": [
      "src/networking.c"
    ]
  }, 
  {
    "date": 1357748218, 
    "committer": {
      "email": "bilal@bilalhusain.com", 
      "name": "Bilal Husain"
    }, 
    "message": "s/adiacent/adjacent/\n\nfixed typo in a comment (step 2 memcheck)", 
    "id": "717e5ffb45acc4e976e44d19d816e320cd2d0662", 
    "files": [
      "src/debug.c"
    ]
  }, 
  {
    "date": 1354533173, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Memory leak fixed: release client's bpop->keys dictionary.\n\nRefactoring performed after issue #801 resolution (see commit\n2f87cf8b0162bd9d78c3a89860c0971cd71d39db) introduced a memory leak that\nis fixed by this commit.\n\nI simply forgot to free the new allocated dictionary in the client\nstructure trusting the output of \"make test\" on OSX.\n\nHowever due to changes in the \"leaks\" utility the test was no longer\ntesting memory leaks. This problem was also fixed.\n\nFortunately the CI test running at ci.redis.io spotted the bug in the\nvalgrind run.\n\nThe leak never ended into a stable release.", 
    "id": "ab2924cff353d7abe293b8f10d032dc466dfd4a4", 
    "files": [
      "src/networking.c"
    ]
  }, 
  {
    "date": 1353595800, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "EVALSHA is now case insensitive.\n\nEVALSHA used to crash if the SHA1 was not lowercase (Issue #783).\nFixed using a case insensitive dictionary type for the sha -> script\nmap used for replication of scripts.", 
    "id": "95f68f7b0fc4ffc700361484b6c792a8e03f3a13", 
    "files": [
      "src/redis.c", 
      "tests/unit/scripting.tcl", 
      "src/scripting.c", 
      "src/redis.h"
    ]
  }, 
  {
    "date": 1353351031, 
    "committer": {
      "email": "charsyam@gmail.com", 
      "name": "charsyam"
    }, 
    "message": "fix randstring bug", 
    "id": "52b52a350818f88c543a224375fbe308bb17cd12", 
    "files": [
      "src/ziplist.c"
    ]
  }, 
  {
    "date": 1352229934, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Type mismatch errors are now prefixed with WRONGTYPE.\n\nSo instead to reply with a generic error like:\n\n-ERR ... wrong kind of value ...\n\nnow it replies with:\n\n-WRONGTYPE ... wrong kind of value ...\n\nThis makes this particular error easy to check without resorting to\n(fragile) pattern matching of the error string (however the error string\nused to be consistent already).\n\nClient libraries should return a specific exeption type for this error.\n\nMost of the commit is about fixing unit tests.", 
    "id": "c4b0b6854e543ea1ae75b94ffc59b1285ddce9d5", 
    "files": [
      "src/redis.c", 
      "tests/unit/basic.tcl", 
      "tests/unit/type/list.tcl", 
      "tests/unit/bitops.tcl", 
      "tests/unit/type/set.tcl"
    ]
  }, 
  {
    "date": 1348221332, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "SRANDMEMBER <count> leak fixed.\n\nFor \"CASE 4\" (see code) we need to free the element if it's already in\nthe result dictionary and adding it failed.", 
    "id": "578c94597fda163eb6050ce5e0f832a6587a14b9", 
    "files": [
      "src/t_set.c"
    ]
  }, 
  {
    "date": 1346800669, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Scripting: Force SORT BY constant determinism inside SORT itself.\n\nSORT is able to return (faster than when ordering) unordered output if\nthe \"BY\" clause is used with a constant value. However we try to play\nwell with scripting requirements of determinism providing always sorted\noutputs when SORT (and other similar commands) are called by Lua\nscripts.\n\nHowever we used the general mechanism in place in scripting in order to\nreorder SORT output, that is, if the command has the \"S\" flag set, the\nLua scripting engine will take an additional step when converting a\nmulti bulk reply to Lua value, calling a Lua sorting function.\n\nThis is suboptimal as we can do it faster inside SORT itself.\nThis is also broken as issue #545 shows us: basically when SORT is used\nwith a constant BY, and additionally also GET is used, the Lua scripting\nengine was trying to order the output as a flat array, while it was\nactually a list of key-value pairs.\n\nWhat we do know is to recognized if the caller of SORT is the Lua client\n(since we can check this using the REDIS_LUA_CLIENT flag). If so, and if\na \"don't sort\" condition is triggered by the BY option with a constant\nstring, we force the lexicographical sorting.\n\nThis commit fixes this bug and improves the performance, and at the same\ntime simplifies the implementation. This does not mean I'm smart today,\nit means I was stupid when I committed the original implementation ;)", 
    "id": "36741b2c818a95e8ef167818271614ee6b1bc414", 
    "files": [
      "src/redis.c", 
      "tests/unit/scripting.tcl", 
      "src/scripting.c", 
      "src/redis.h", 
      "src/sort.c"
    ]
  }, 
  {
    "date": 1345803024, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Sentinel: fixed a crash on script execution.\n\nThe call to sentinelScheduleScriptExecution() lacked the final NULL\nargument to signal the end of arguments. This resulted into a crash.", 
    "id": "01477753e6dae515d31950d94e69e132ef4ed0b4", 
    "files": [
      "src/sentinel.c"
    ]
  }, 
  {
    "date": 1341462567, 
    "committer": {
      "email": "sg@redu.cx", 
      "name": "Saj Goonatilleke"
    }, 
    "message": "Bug fix: slaves being pinged every second\n\nREDIS_REPL_PING_SLAVE_PERIOD controls how often the master should\ntransmit a heartbeat (PING) to its slaves.  This period, which defaults\nto 10, is measured in seconds.\n\nRedis 2.4 masters used to ping their slaves every ten seconds, just like\nit says on the tin.\n\nThe Redis 2.6 masters I have been experimenting with, on the other hand,\nping their slaves *every second*.  (master_last_io_seconds_ago never\napproaches 10.)  I think the ping period was inadvertently slashed to\none-tenth of its nominal value around the time REDIS_HZ was introduced.\nThis commit reintroduces correct ping schedule behaviour.", 
    "id": "9edfe63553314fc2258392db94bfce8a4144b303", 
    "files": [
      "src/redis.h", 
      "src/replication.c"
    ]
  }, 
  {
    "date": 1340783037, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "REPLCONF internal command introduced.\n\nThe REPLCONF command is an internal command (not designed to be directly\nused by normal clients) that allows a slave to set some replication\nrelated state in the master before issuing SYNC to start the\nreplication.\n\nThe initial motivation for this command, and the only reason currently\nit is used by the implementation, is to let the slave instance\ncommunicate its listening port to the slave, so that the master can\nshow all the slaves with their listening ports in the \"replication\"\nsection of the INFO output.\n\nThis allows clients to auto discover and query all the slaves attached\ninto a master.\n\nCurrently only a single option of the REPLCONF command is supported, and\nit is called \"listening-port\", so the slave now starts the replication\nprocess with something like the following chat:\n\n    REPLCONF listening-prot 6380\n    SYNC\n\nNote that this works even if the master is an older version of Redis and\ndoes not understand REPLCONF, because the slave ignores the REPLCONF\nerror.\n\nIn the future REPLCONF can be used for partial replication and other\nreplication related features where there is the need to exchange\ninformation between master and slave.\n\nNOTE: This commit also fixes a bug: the INFO outout already carried\ninformation about slaves, but the port was broken, and was obtained\nwith getpeername(2), so it was actually just the ephemeral port used\nby the slave to connect to the master as a client.", 
    "id": "3a32897856ec77c77be5dd8e69623dd3624035fc", 
    "files": [
      "src/redis.c", 
      "src/networking.c", 
      "src/redis.h", 
      "src/replication.c"
    ]
  }, 
  {
    "date": 1340281553, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed comment typo into time_independent_strcmp().", 
    "id": "5410168c6ece740e0bd179d5a6fd45739f18ae32", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1340272201, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a timing attack on AUTH (Issue #560).\n\nThe way we compared the authentication password using strcmp() allowed\nan attacker to gain information about the password using a well known\nclass of attacks called \"timing attacks\".\n\nThe bug appears to be practically not exploitable in most modern systems\nrunning Redis since even using multiple bytes of differences in the\ninput at a time instead of one the difference in running time in in the\norder of 10 nanoseconds, making it hard to exploit even on LAN. However\nattacks always get better so we are providing a fix ASAP.\n\nThe new implementation uses two fixed length buffers and a constant time\ncomparison function, with the goal of:\n\n1) Completely avoid leaking information about the content of the\npassword, since the comparison is always performed between 512\ncharacters and without conditionals.\n2) Partially avoid leaking information about the length of the\npassword.\n\nAbout \"2\" we still have a stage in the code where the real password and\nthe user provided password are copied in the static buffers, we also run\ntwo strlen() operations against the two inputs, so the running time\nof the comparison is a fixed amount plus a time proportional to\nLENGTH(A)+LENGTH(B). This means that the absolute time of the operation\nperformed is still related to the length of the password in some way,\nbut there is no way to change the input in order to get a difference in\nthe execution time in the comparison that is not just proportional to\nthe string provided by the user (because the password length is fixed).\n\nThus in practical terms the user should try to discover LENGTH(PASSWORD)\nlooking at the whole execution time of the AUTH command and trying to\nguess a proportionality between the whole execution time and the\npassword length: this appears to be mostly unfeasible in the real world.\n\nAlso protecting from this attack is not very useful in the case of Redis\nas a brute force attack is anyway feasible if the password is too short,\nwhile with a long password makes it not an issue that the attacker knows\nthe length.", 
    "id": "31a1439bfd6e24647f023281da65473047b69dfb", 
    "files": [
      "src/redis.c", 
      "src/config.c", 
      "src/redis.h"
    ]
  }, 
  {
    "date": 1339747405, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix c->reply_bytes computation in setDeferredMultiBulkLength()\n\nIn order to implement reply buffer limits introduced in 2.6 and useful\nto close the connection under user-selected circumastances of big output\nbuffers (for instance slow consumers in pub/sub, a blocked slave, and so\nforth) Redis takes a counter with the amount of used memory in objects\ninside the output list stored into c->reply.\n\nThe computation was broken in the function setDeferredMultiBulkLength(),\nin the case the object was glued with the next one. This caused the\nc->reply_bytes field to go out of sync, be subtracted more than needed,\nand wrap back near to ULONG_MAX values.\n\nThis commit fixes this bug and adds an assertion that is able to trap\nthis class of problems.\n\nThis problem was discovered looking at the INFO output of an unrelated\nissue (issue #547).", 
    "id": "5b63ccce6c5a3b2097c87cc1b6af314c209172ef", 
    "files": [
      "src/networking.c"
    ]
  }, 
  {
    "date": 1338493967, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "BITOP bug when called against non existing keys fixed.\n\nIn the issue #529 an user reported a bug that can be triggered with the\nfollowing code:\n\nflushdb\nset a\n\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\nbitop or x a b\n\nThe bug was introduced with the speed optimization in commit 8bbc076\nthat specializes every BITOP operation loop up to the minimum length of\nthe input strings.\n\nHowever the computation of the minimum length contained an error when a\nnon existing key was present in the input, after a key that was non zero\nlength.\n\nThis commit fixes the bug and adds a regression test for it.", 
    "id": "1419406e8dd828f12b4810286d701b2b87ccd7ee", 
    "files": [
      "tests/unit/bitops.tcl", 
      "src/bitops.c"
    ]
  }, 
  {
    "date": 1337940690, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Four new persistence fields in INFO. A few renamed.\n\nThe 'persistence' section of INFO output now contains additional four\nfields related to RDB and AOF persistence:\n\n rdb_last_bgsave_time_sec       Duration of latest BGSAVE in sec.\n rdb_current_bgsave_time_sec    Duration of current BGSAVE in sec.\n aof_last_rewrite_time_sec      Duration of latest AOF rewrite in sec.\n aof_current_rewrite_time_sec   Duration of current AOF rewrite in sec.\n\nThe 'current' fields are set to -1 if a BGSAVE / AOF rewrite is not in\nprogress. The 'last' fileds are set to -1 if no previous BGSAVE / AOF\nrewrites were performed.\n\nAdditionally a few fields in the persistence section were renamed for\nconsistency:\n\n changes_since_last_save -> rdb_changes_since_last_save\n bgsave_in_progress -> rdb_bgsave_in_progress\n last_save_time -> rdb_last_save_time\n last_bgsave_status -> rdb_last_bgsave_status\n bgrewriteaof_in_progress -> aof_rewrite_in_progress\n bgrewriteaof_scheduled -> aof_rewrite_scheduled\n\nAfter the renaming, fields in the persistence section start with rdb_ or\naof_ prefix depending on the persistence method they describe.\nThe field 'loading' and related fields are not prefixed because they are\nunique for both the persistence methods.", 
    "id": "33e1db36fa3948c8b9baa3991fd40e7f6b31fb9e", 
    "files": [
      "src/redis.c", 
      "src/aof.c", 
      "src/rdb.c", 
      "src/redis.h"
    ]
  }, 
  {
    "date": 1337865616, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "BITOP: handle integer encoded objects correctly.\n\nA bug in the implementation caused BITOP to crash the server if at least\none one of the source objects was integer encoded.\n\nThe new implementation takes an additional array of Redis objects\npointers and calls getDecodedObject() to get a reference to a string\nencoded object, and then uses decrRefCount() to release the object.\n\nTests modified to cover the regression and improve coverage.", 
    "id": "fa4a5d59220b1c9e7833b563cb7e9e314747bdf7", 
    "files": [
      "tests/unit/bitops.tcl", 
      "src/bitops.c"
    ]
  }, 
  {
    "date": 1337852121, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Dead code removed from replication.c.\n\nThe user @jokea noticed that the following line of code into\nreplication.c made little sense:\n\n    addReplySds(slave,sdsempty());\n\nInvestigating a bit I found that this was introduced by commit 6208b3a7\nthree years ago in the early stages of Redis. The code apparently is not\nuseful at all, so I'm removing it.\n\nThis change will not be backported into 2.4 so that in the rare case\nthis should introduce a bug, we'll have a chance to detect it into the\ndevelopment branch. However following the code path it seems like the\ncode is not useful at all, so the risk is truly small.", 
    "id": "ef37997608dfa5ad457961e0f3e427315ba4be83", 
    "files": [
      "src/replication.c"
    ]
  }, 
  {
    "date": 1337764363, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed issue #516 (ZINTERSTORE mixing sets and zsets).\n\nWeeks ago trying to fix an harmless GCC warning I introduced a bug in\nthe ziplist-encoded implementations of sorted sets.\n\nThe bug completely broke zuiNext() iterator, that is used in the\nZINTERSTORE and ZUNIONSTORE implementation, so those two commands are no\nlonger reliable starting from Redis version 2.4.12 and latest 2.6.0-RC\nreleases.\n\nThis commit fixes the problem and adds a regression test.", 
    "id": "348ee1a40a4d8105dfaf6fa2ab2dffc15a47d86d", 
    "files": [
      "src/t_zset.c", 
      "tests/unit/type/zset.tcl"
    ]
  }, 
  {
    "date": 1337159385, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Jemalloc updated to 3.0.0.\n\nFull changelog here:\n\nhttp://www.canonware.com/cgi-bin/gitweb.cgi?p=jemalloc.git;a=blob_plain;f=ChangeLog;hb=master\n\nNotable improvements from the point of view of Redis:\n\n1) Bugfixing.\n2) Support for Valgrind.\n3) Support for OSX Lion, FreeBSD.", 
    "id": "ad4c0b4117ec15c0061b702f230caf1bc5eb4e06", 
    "files": [
      "deps/jemalloc.orig/include/jemalloc/internal/ql.h", 
      "deps/jemalloc/config.guess", 
      "deps/jemalloc.orig/test/thread_arena.c", 
      "deps/jemalloc/src/arena.c", 
      "deps/jemalloc.orig/include/jemalloc/internal/prof.h", 
      "deps/jemalloc/include/jemalloc/internal/private_namespace.h", 
      "deps/jemalloc/include/jemalloc/internal/mb.h", 
      "deps/jemalloc.orig/test/allocm.exp", 
      "deps/jemalloc.orig/src/chunk_dss.c", 
      "deps/jemalloc.orig/include/jemalloc/internal/atomic.h", 
      "deps/jemalloc/include/jemalloc/internal/hash.h", 
      "deps/jemalloc.orig/src/mutex.c", 
      "deps/jemalloc/include/jemalloc/internal/huge.h", 
      "deps/jemalloc/configure", 
      "deps/jemalloc.orig/src/rtree.c", 
      "deps/jemalloc/src/util.c", 
      "deps/jemalloc.orig/test/allocated.c", 
      "deps/jemalloc.orig/autogen.sh", 
      "deps/jemalloc/include/jemalloc/internal/stats.h", 
      "deps/jemalloc/include/msvc_compat/strings.h", 
      "deps/jemalloc/src/chunk_swap.c", 
      "deps/jemalloc/Makefile.in", 
      "deps/jemalloc.orig/include/jemalloc/internal/tcache.h", 
      "deps/jemalloc.orig/include/jemalloc/internal/jemalloc_internal.h.in", 
      "deps/jemalloc/src/jemalloc.c", 
      "deps/jemalloc.orig/include/jemalloc/jemalloc_defs.h.in", 
      "deps/jemalloc/src/stats.c", 
      "deps/jemalloc/.gitignore", 
      "deps/jemalloc/src/extent.c", 
      "deps/jemalloc.orig/test/allocm.c", 
      "deps/jemalloc/include/jemalloc/internal/ctl.h", 
      "deps/jemalloc.orig/configure.ac", 
      "deps/jemalloc/include/jemalloc/internal/arena.h", 
      "deps/jemalloc/include/msvc_compat/stdint.h", 
      "deps/jemalloc/include/jemalloc/internal/chunk_mmap.h", 
      "deps/jemalloc/src/tcache.c", 
      "deps/jemalloc/test/thread_arena.c", 
      "deps/jemalloc.orig/include/jemalloc/internal/base.h", 
      "deps/jemalloc.orig/src/base.c", 
      "deps/jemalloc/include/jemalloc/internal/prn.h", 
      "deps/jemalloc.orig/test/bitmap.exp", 
      "deps/jemalloc/COPYING", 
      "deps/jemalloc/include/jemalloc/jemalloc.h.in", 
      "deps/jemalloc/test/mremap.c", 
      "deps/jemalloc/include/msvc_compat/stdbool.h", 
      "deps/jemalloc/include/jemalloc/internal/size_classes.sh", 
      "deps/jemalloc/include/jemalloc/jemalloc_defs.h.in", 
      "deps/jemalloc.orig/include/jemalloc/internal/rtree.h", 
      "deps/jemalloc/include/jemalloc/internal/tsd.h", 
      "deps/jemalloc.orig/.gitignore", 
      "deps/jemalloc/test/allocm.c", 
      "deps/jemalloc.orig/include/jemalloc/internal/mb.h", 
      "deps/jemalloc/src/huge.c", 
      "deps/jemalloc.orig/doc/html.xsl.in", 
      "deps/jemalloc.orig/include/jemalloc/internal/ckh.h", 
      "deps/jemalloc/include/jemalloc/internal/zone.h", 
      "deps/jemalloc.orig/README", 
      "deps/jemalloc.orig/include/jemalloc/internal/chunk_dss.h", 
      "deps/jemalloc.orig/doc/stylesheet.xsl", 
      "deps/jemalloc.orig/src/huge.c", 
      "deps/jemalloc.orig/src/prof.c", 
      "deps/jemalloc/bin/jemalloc.sh.in", 
      "deps/jemalloc.orig/src/tcache.c", 
      "deps/jemalloc.orig/src/extent.c", 
      "deps/jemalloc/include/jemalloc/internal/quarantine.h", 
      "deps/jemalloc/include/jemalloc/internal/chunk_swap.h", 
      "deps/jemalloc.orig/test/allocated.exp", 
      "deps/jemalloc.orig/include/jemalloc/internal/bitmap.h", 
      "deps/jemalloc.orig/config.sub", 
      "deps/jemalloc/include/jemalloc/internal/chunk.h", 
      "deps/jemalloc.orig/include/jemalloc/internal/chunk_mmap.h", 
      "deps/jemalloc.orig/test/rallocm.exp", 
      "deps/jemalloc.orig/src/mb.c", 
      "src/zmalloc.h", 
      "deps/jemalloc.orig/config.stamp.in", 
      "deps/jemalloc/include/jemalloc/internal/ckh.h", 
      "deps/jemalloc/src/prof.c", 
      "deps/jemalloc/src/chunk_mmap.c", 
      "deps/jemalloc/test/rallocm.c", 
      "deps/jemalloc/include/jemalloc/internal/mutex.h", 
      "deps/jemalloc/src/zone.c", 
      "deps/jemalloc.orig/doc/jemalloc.xml.in", 
      "deps/jemalloc.orig/include/jemalloc/internal/qr.h", 
      "deps/jemalloc/VERSION", 
      "deps/jemalloc.orig/test/posix_memalign.exp", 
      "deps/jemalloc/README", 
      "deps/jemalloc.orig/src/ctl.c", 
      "deps/jemalloc/test/thread_tcache_enabled.exp", 
      "deps/jemalloc.orig/test/rallocm.c", 
      "deps/jemalloc.orig/INSTALL", 
      "deps/jemalloc/src/base.c", 
      "deps/jemalloc/include/jemalloc/internal/rb.h", 
      "deps/jemalloc.orig/include/jemalloc/internal/chunk_swap.h", 
      "deps/jemalloc.orig/Makefile.in", 
      "deps/jemalloc/test/jemalloc_test.h.in", 
      "deps/jemalloc.orig/src/chunk.c", 
      "deps/jemalloc.orig/include/jemalloc/internal/extent.h", 
      "deps/jemalloc/src/tsd.c", 
      "deps/jemalloc.orig/ChangeLog", 
      "deps/jemalloc/src/chunk.c", 
      "deps/jemalloc.orig/include/jemalloc/internal/hash.h", 
      "deps/jemalloc.orig/test/thread_arena.exp", 
      "deps/jemalloc.orig/include/jemalloc/internal/mutex.h", 
      "deps/jemalloc.orig/src/chunk_mmap.c", 
      "deps/jemalloc/include/jemalloc/internal/chunk_dss.h", 
      "deps/jemalloc.orig/include/jemalloc/internal/ctl.h", 
      "deps/jemalloc/test/posix_memalign.c", 
      "deps/jemalloc.orig/include/jemalloc/internal/rb.h", 
      "deps/jemalloc.orig/src/chunk_swap.c", 
      "deps/jemalloc/src/quarantine.c", 
      "deps/jemalloc.orig/src/arena.c", 
      "deps/jemalloc/test/allocated.c", 
      "deps/jemalloc.orig/test/posix_memalign.c", 
      "deps/jemalloc/test/thread_tcache_enabled.c", 
      "deps/jemalloc.orig/include/jemalloc/internal/huge.h", 
      "deps/jemalloc/src/ctl.c", 
      "deps/jemalloc/test/bitmap.c", 
      "deps/jemalloc.orig/test/mremap.exp", 
      "deps/jemalloc/include/jemalloc/internal/tcache.h", 
      "deps/jemalloc/src/ckh.c", 
      "deps/jemalloc.orig/doc/manpages.xsl.in", 
      "deps/jemalloc.orig/src/ckh.c", 
      "deps/jemalloc/doc/jemalloc.html", 
      "deps/jemalloc/include/jemalloc/internal/jemalloc_internal.h.in", 
      "deps/jemalloc/include/msvc_compat/inttypes.h", 
      "deps/jemalloc/doc/jemalloc.3", 
      "deps/jemalloc.orig/src/hash.c", 
      "deps/jemalloc/include/jemalloc/internal/base.h", 
      "deps/jemalloc.orig/src/atomic.c", 
      "deps/jemalloc.orig/install-sh", 
      "deps/jemalloc.orig/src/stats.c", 
      "deps/jemalloc.orig/src/jemalloc.c", 
      "deps/jemalloc.orig/test/bitmap.c", 
      "deps/jemalloc.orig/include/jemalloc/internal/chunk.h", 
      "deps/jemalloc/bin/pprof", 
      "deps/jemalloc/include/jemalloc/internal/prng.h", 
      "deps/jemalloc/INSTALL", 
      "deps/jemalloc/doc/jemalloc.xml.in", 
      "deps/jemalloc.orig/include/jemalloc/internal/arena.h", 
      "deps/jemalloc/src/mutex.c", 
      "deps/jemalloc/include/jemalloc/internal/util.h", 
      "deps/jemalloc.orig/include/jemalloc/internal/zone.h", 
      "deps/jemalloc.orig/bin/pprof", 
      "deps/jemalloc/ChangeLog", 
      "deps/jemalloc/src/chunk_dss.c", 
      "deps/jemalloc.orig/COPYING", 
      "deps/jemalloc.orig/src/bitmap.c", 
      "deps/jemalloc.orig/config.guess", 
      "deps/jemalloc.orig/test/mremap.c", 
      "deps/jemalloc/include/jemalloc/internal/atomic.h", 
      "deps/jemalloc/include/jemalloc/internal/extent.h", 
      "deps/jemalloc.orig/include/jemalloc/internal/stats.h", 
      "deps/jemalloc/test/aligned_alloc.c", 
      "deps/jemalloc.orig/src/zone.c", 
      "deps/jemalloc/config.sub", 
      "deps/jemalloc.orig/include/jemalloc/internal/prn.h", 
      "deps/jemalloc/test/aligned_alloc.exp", 
      "deps/jemalloc/include/jemalloc/internal/prof.h", 
      "deps/jemalloc.orig/include/jemalloc/internal/private_namespace.h", 
      "deps/jemalloc/configure.ac", 
      "deps/jemalloc.orig/include/jemalloc/jemalloc.h.in"
    ]
  }, 
  {
    "date": 1335536984, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "memtest.c fixed to actually use v1 and v2 in memtest_fill_value().", 
    "id": "ffe003dcbe9e719659f9a9d690f5bc5fd7b0615e", 
    "files": [
      "src/memtest.c"
    ]
  }, 
  {
    "date": 1335261739, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Add a 24bit integer to ziplists to save one byte for ints that can\nfit in 24 bits (thanks to antirez for catching and solving the two's compliment\nbug).\n\nIncrement REDIS_RDB_VERSION to 6", 
    "id": "5a86ab47995586f0a0ef18472eafd6e9131644c1", 
    "files": [
      "src/rdb.h", 
      "src/ziplist.c"
    ]
  }, 
  {
    "date": 1335259690, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a bug in propagation of PUBLISH via the cluster bus.\n\nThis bug was spotted by clang on FreeBSD.", 
    "id": "21661d7acc9ed525c1150f6fa55646d19f5a31d9", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1334660709, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "lookupKeyByPattern() used by SORT GET/BY rewritten. Fixes issue #460.\n\nlookupKeyByPattern() was implemented with a trick to speedup the lookup\nprocess allocating two fake Redis obejcts on the stack. However now that\nwe propagate expires to the slave as DEL operations the lookup of the\nkey may result into a call to expireIfNeeded() having the stack\nallocated object as argument, that may in turn use it to create the\nprotocol to send to the slave. But since this fake obejcts are\ninherently read-only this is a problem.\n\nAs a side effect of this fix there are no longer size limits in the\npattern to be used with GET/BY option of SORT.\n\nSee https://github.com/antirez/redis/issues/460 for bug details.", 
    "id": "3c25c4a691aec646cfdc3f840f356ef3bb5840c0", 
    "files": [
      "src/sort.c"
    ]
  }, 
  {
    "date": 1334224192, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "memtest.c: integer overflow fixed.", 
    "id": "4c442e9d88c493a16f4f1197413b063c7205d812", 
    "files": [
      "src/memtest.c"
    ]
  }, 
  {
    "date": 1334134622, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Comment typo fixed. Clusetr -> Cluster.", 
    "id": "f2f2ba1b3ab5147684143ebfb2981c14c9a0bd27", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1333967637, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "dump/restore fixed to use the new crc64 API.", 
    "id": "46738646d4ef6b6ea97cf933d232177a05722100", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1333802429, 
    "committer": {
      "email": "erik@dubbelboer.com", 
      "name": "Erik Dubbelboer"
    }, 
    "message": "Fixed some spelling errors in the comments", 
    "id": "65fd32ab0a7ff1d3d052e3b70dcceac6719de58c", 
    "files": [
      "src/t_set.c", 
      "src/zipmap.c", 
      "src/rdb.c", 
      "src/dict.c"
    ]
  }, 
  {
    "date": 1333448260, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Two fixed for MIGRATE: fix TTL propagation and fix transferring of data bigger than 64k.", 
    "id": "84e5684bca4c737fac6ccc00fd1fa5737ded2cb7", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1333358087, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "RESTORE ability to set a TTL fixed, bug introduced with millisecond expires.", 
    "id": "70d848e1faff36e778f8e32c5a86628574c22b00", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1333185810, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "syncio.c calls in replication.c fixed for the new millisecond timeout API.", 
    "id": "9157549fad46025548b6f500a0202d2720779524", 
    "files": [
      "src/replication.c"
    ]
  }, 
  {
    "date": 1333096469, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a memory leak with replication\n\noccurs when two or more dbs are replicated and at least one of them is >db10", 
    "id": "f892797e1b459ad568df32d891b368302c40b3c9", 
    "files": [
      "src/redis.c", 
      "src/redis.h", 
      "src/replication.c"
    ]
  }, 
  {
    "date": 1333006409, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed typo in comment: \"te\" -> \"the\".", 
    "id": "4cba71e89886b5e7810686b6a6b2e18ab13f1fa1", 
    "files": [
      "src/networking.c"
    ]
  }, 
  {
    "date": 1332530674, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed memory leak in hash loading.", 
    "id": "58e34e6cb1499a00b9dfa51307e4188f8107fbe3", 
    "files": [
      "src/rdb.c"
    ]
  }, 
  {
    "date": 1332502940, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Big endian fix. The bug was introduced because of a typo.", 
    "id": "bd376d13f820b168954ac6683b5197a4ed72f03b", 
    "files": [
      "src/ziplist.c"
    ]
  }, 
  {
    "date": 1332088076, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed typo.", 
    "id": "a5801142a410b8e61867413c132f772484740a7e", 
    "files": [
      "src/memtest.c"
    ]
  }, 
  {
    "date": 1331632818, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "RDB hashes loading, fixed another bug in the loading of HT-encoded hashes: when the hash entry is too big for ziplist, add the field, then convert. The code used to break before the new entry was inserted, resulting into missing fields in the loaded Hash object.", 
    "id": "c3e7441dadf1d287c76c1c0a3cab68f15a875dbd", 
    "files": [
      "src/rdb.c"
    ]
  }, 
  {
    "date": 1331628551, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "RDB hashes loading fixed removing the assertion that failed every time an HT-encoded hash was loaded.", 
    "id": "c3c856228da2f0d73c608f38395991eecf735606", 
    "files": [
      "src/rdb.c"
    ]
  }, 
  {
    "date": 1329845171, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed undefined behavior in *INCR style functions overflow detection. Sorry clang!", 
    "id": "7c96b467c1f882874f80403101ec96ddaf624f1a", 
    "files": [
      "src/t_hash.c", 
      "src/t_string.c"
    ]
  }, 
  {
    "date": 1328022561, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Order output of commands returning random arrays using table.sort when called from Lua, partially fixing issue #165. The issue is yet not completely fixed since we can't add the REDIS_CMD_SORT_FOR_SCRIPT flag in SORT currently, both because it may contain NULLs and because it is not cool to re-sort everything at every call when instead this should be sorted only if BY <constant> is used.", 
    "id": "548efd91e5a33e1358213a902b8533d88f40f7cf", 
    "files": [
      "src/redis.c", 
      "src/scripting.c", 
      "src/redis.h"
    ]
  }, 
  {
    "date": 1328006612, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed redis-benchmark --help output typo", 
    "id": "8dd19d818f52d27284fd3e3b6e0fc237388e7678", 
    "files": [
      "src/redis-benchmark.c"
    ]
  }, 
  {
    "date": 1327511276, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed typo in getClientLimitClassByName()", 
    "id": "c715c9b8bfbd83022502e29ae72be7f0eae1a3da", 
    "files": [
      "src/networking.c"
    ]
  }, 
  {
    "date": 1327507194, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed another possible bug in cluster.c found by clang --analyze.", 
    "id": "4e97c2c71a3c511165c966769f51d2255d7a7b33", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1327507176, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed another possible bug in cluster.c found by clang --analyze.", 
    "id": "d329031fad1ac8c5d2d0c58a17d08a2de98b7b15", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1327506395, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a non critical bug signaled by clang static analyzer thanks to Mukund Sivaraman for reporting it: there was a not initialized field populating the cluster message header, but it is always fixed at later time before sending the packet.", 
    "id": "6710ff24d067d56b6b8d768532a6a7d3c4bc7a80", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1327393959, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "asyncCloseClientOnOutputBufferLimitReached() now ignores clients with REDIS_CLOSE_ASAP flag already set. Return value of the function changed from int to void since it is not used. Fixed logging of the client scheduled to be closed.", 
    "id": "06b3dced99371c68fa9d7bcb0523cc05f3324e06", 
    "files": [
      "src/networking.c", 
      "src/redis.h"
    ]
  }, 
  {
    "date": 1327192823, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed typo in hahs function seed default value. It is no longer used but fixed to retain the old constant as default anyway.", 
    "id": "b362c111daa0939f86123cb6fb82fbb389cffc7b", 
    "files": [
      "src/dict.c"
    ]
  }, 
  {
    "date": 1327185246, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "typo in comment fixed", 
    "id": "06c5523a88ec0f76ff932de5240c8d3ad3b1cc19", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1326309951, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "error in comment fixed", 
    "id": "d8bd12f984d3d5f78c0bcc9819fe002a3b379308", 
    "files": [
      "src/t_zset.c"
    ]
  }, 
  {
    "date": 1325344186, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Protections against protocol desyncs, leading to infinite query buffer growing, due to nul-terms in specific bytes of the request or indefinitely long multi bulk or bulk count strings without newlines. This bug is related to Issue #141 as well.", 
    "id": "11e0c4c55b8edd8d2226ba2e5fde989778695195", 
    "files": [
      "src/networking.c", 
      "src/redis.h"
    ]
  }, 
  {
    "date": 1325270443, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed replication when multiple slaves are attaching at the same time. The output buffer was not copied correctly between slaves. This fixes issue #141.", 
    "id": "1824e3a3a37eb9618aa487e6e071395758bdaca8", 
    "files": [
      "src/networking.c", 
      "src/redis.h", 
      "src/replication.c"
    ]
  }, 
  {
    "date": 1324396850, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "startAppendOnly() fixed to set server.appendonly to 0 if the start failed.", 
    "id": "af77acc310204696a1af4e52345b2cf0be341cb1", 
    "files": [
      "src/aof.c"
    ]
  }, 
  {
    "date": 1324286197, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed memleak in CLIENT INFO, added simple test that will work as regression test on mac os x and in the CI when running over valgrind. This fixes issue #256", 
    "id": "0a466a754226d5b13cd555a2893867084ee981d4", 
    "files": [
      "src/networking.c"
    ]
  }, 
  {
    "date": 1323946215, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "ae_epoll.c typo introduced in the previous commit fixed.", 
    "id": "36dda9554a826104653765ec8782e055384c39f1", 
    "files": [
      "src/ae_epoll.c"
    ]
  }, 
  {
    "date": 1323244709, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a theoretical memory leak with no practical effects in ae_kqueue.c and ae_epoll.c, thanks to magicyang87 for reporting it.", 
    "id": "fb293ccbddb43f427ea1f791d8603fbd18e703e6", 
    "files": [
      "src/ae_kqueue.c", 
      "src/ae_epoll.c"
    ]
  }, 
  {
    "date": 1322752085, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed SORT bugs (issue #224) with regression tests.", 
    "id": "237194b76064c95028b14e9ff7d7abfb10abd63d", 
    "files": [
      "src/sort.c", 
      "tests/unit/sort.tcl"
    ]
  }, 
  {
    "date": 1322663716, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Replication bug fixed: now non blocking connect is also forced to follow the configured replication timeout.", 
    "id": "27acd7aa89c50a207f500fb0d0fb7194ae05812a", 
    "files": [
      "src/replication.c"
    ]
  }, 
  {
    "date": 1322146046, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "better bug report info on crash", 
    "id": "fa5af017d95dfd56b92ebe14064f995b19e4907f", 
    "files": [
      "src/redis.c", 
      "src/redis.h", 
      "src/debug.c"
    ]
  }, 
  {
    "date": 1321953375, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed command table for SETEX and PSETEX causing the expire time to be hashed by Redis cluster instead of the key.", 
    "id": "39da5d1f2183eb6e7440bf742b558f974a5a4172", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1321888770, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed bug in getClientInfoString() that was not rendering the N (no flags) special flag correctly.", 
    "id": "afd0f06b755ff53ce91d1dabeca959655590d3f0", 
    "files": [
      "src/networking.c"
    ]
  }, 
  {
    "date": 1321869352, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a comment typo in the command table.", 
    "id": "7e14a2080151f64a1540e26f00cecd8b9ae9cee3", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1321056267, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed issues with expire introduced with latest millisecond resolution feature. Many time_t were not converted to long long, and one time() call was not replaced with mstime().", 
    "id": "4be855e757b800a9f848823fcee8b7faf3e1eba0", 
    "files": [
      "src/redis.c", 
      "src/aof.c", 
      "src/rdb.c", 
      "src/debug.c"
    ]
  }, 
  {
    "date": 1320943922, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "high resolution expires API modified to use separated commands. AOF transation to PEXPIREAT of all the expire-style commands fixed.", 
    "id": "12d293ca6edab6cc94cbd90840c629a535a12aef", 
    "files": [
      "src/redis.c", 
      "src/aof.c", 
      "src/db.c", 
      "src/redis.h", 
      "src/t_string.c"
    ]
  }, 
  {
    "date": 1320872367, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a few typos", 
    "id": "dab5332f95bd2f4fabf8e746b0998cd5bc37e448", 
    "files": [
      "src/rdb.h", 
      "src/rdb.c"
    ]
  }, 
  {
    "date": 1320860868, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed bug breaking rdbSaveMillisecondTime() in 32 bit systems. Thanks to @anydot (P\u0159emysl Hrub\u00fd)", 
    "id": "bdbdb02edb5aff16c3cbfb0fba31152d69e30160", 
    "files": [
      "src/rdb.c"
    ]
  }, 
  {
    "date": 1319816584, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a memory leak in redis-cli.c", 
    "id": "db6a2e7f78f99503eaa2fcc0574a16eea570637a", 
    "files": [
      "src/redis-cli.c"
    ]
  }, 
  {
    "date": 1319360221, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a few warnings compiling on Linux.", 
    "id": "f013f40003e5709203e31dcba4485f8342e2cccc", 
    "files": [
      "src/cluster.c", 
      "src/rio.c", 
      "src/ziplist.c", 
      "src/t_zset.c"
    ]
  }, 
  {
    "date": 1318936706, 
    "committer": {
      "email": "eowner@gmail.com", 
      "name": "smly"
    }, 
    "message": "Fixed a small memory leak I found with valgrind", 
    "id": "046f70f758a263052a044f78e808a5ebf2bc24ca", 
    "files": [
      "src/redis-check-dump.c"
    ]
  }, 
  {
    "date": 1318862345, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a typo causing segfault on MIGRATE", 
    "id": "bfbc16ae8321603ce527012f6c33fd7619ad9b09", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1318253515, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Issue #131. stime/utime reported in INFO was inverted. Fixed thanks to Didier Spezia.", 
    "id": "d83eda48e9566a438048c10add8448e0fe65b534", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1318252879, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix for bug #128 about the RENAME command.", 
    "id": "4ab18a3331a870d9617ec5fc763f227cf4110283", 
    "files": [
      "src/db.c"
    ]
  }, 
  {
    "date": 1318064344, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "not used parameter for redisLog() removed. Error message grammar fixed.\nThanks to @ardsrk.", 
    "id": "ff15dba09390b8b0a864e57fb0fdd84b20d4193d", 
    "files": [
      "src/aof.c"
    ]
  }, 
  {
    "date": 1317474667, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "when processing gossip packets make sure to also update the node bitmap when associating slots to nodes. Fixed simply using the appropriate helper function to add a slot.", 
    "id": "66c146592a0c0ff39570633811008cee8773233e", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1317413844, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed two bugs in the CLUSTER SETSLOT ... NODE subcommand", 
    "id": "d38d2fdfdcfc2390fd9b02f1016e5571faf1fc6e", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1317302046, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed command table for RESTORE to make it accepting keys only for the right slots when cluster is enabled.", 
    "id": "7afc3a9611a598686efb8d612f919d921b3487ec", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1316636534, 
    "committer": {
      "email": "jvain@iki.fi", 
      "name": "Juri M. Vainonen"
    }, 
    "message": "fixed a small bug that caused redis-cli to segfault when given single numeric parameter greater that zero.", 
    "id": "aee7f99760ec3a8d7250789f60751245c0e349e0", 
    "files": [
      "src/redis-cli.c"
    ]
  }, 
  {
    "date": 1316447407, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed comment typo", 
    "id": "e7aec180e87ecf2cb33644b4e0f57b9a34c7377a", 
    "files": [
      "src/aof.c"
    ]
  }, 
  {
    "date": 1316108004, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a bug in the average latency metering of redis-cli --latency", 
    "id": "96674b6d95c8990cc7dae885b27c76f377ddeb91", 
    "files": [
      "src/redis-cli.c"
    ]
  }, 
  {
    "date": 1316103838, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed a problem in bioOlderJobType() when there are no jobs of the specified type. Now the function returns 0 when this happens.", 
    "id": "b39a4d0b3941be82629d94dfd06f1ddc13fb260b", 
    "files": [
      "src/bio.c"
    ]
  }, 
  {
    "date": 1315923577, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "typo fixed in bio.c", 
    "id": "8ea2dfd75c962865ee73cdb5d1893b9a64212b27", 
    "files": [
      "src/bio.c"
    ]
  }, 
  {
    "date": 1315818388, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Remove the write handler only if there are no longer objects in the output queue AND if the static buffer is empty. This bug was the cause of a possible server-stop-responding-to-client bug under some specific work load. Thanks to Pieter Noordhuis for spotting and fixing it.", 
    "id": "3bc89500d22ea86a15d58f88e159bb92374a61e0", 
    "files": [
      "src/networking.c"
    ]
  }, 
  {
    "date": 1315814663, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed typos in the comments of rpoplpushHandlePush()", 
    "id": "48082cc044202878364edce68a1323a96d2d40b4", 
    "files": [
      "src/t_list.c"
    ]
  }, 
  {
    "date": 1312883178, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Auto rewrite integer overflow fixed. Thanks to Gaurav for finding it (see issue 602 on google code), and Pieter Noordhuis for tracing it.", 
    "id": "11aaf523131d4f3aa4507043f46984854505bc28", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1311328341, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "prepareForShutdown() fixed for correctness regarding what to do with AOF and RDB persistence on exit.", 
    "id": "adae85cdaed4db207537400c312fdc9e5f525883", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1310122770, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Take a pointer to the relevant entry of the command table in the client structure. This is generally a more sounding design, simplifies a few functions prototype, and as a side effect fixes a bug related to the conversion of EXPIRE -1 to DEL: before of this fix Redis tried to convert it into an EXPIREAT in the AOF code, regardless of our rewrite of the command.", 
    "id": "09e2d9eeba3ff65fd60f905a5bcb0f684f7a883e", 
    "files": [
      "src/redis.c", 
      "src/networking.c", 
      "src/redis.h", 
      "src/t_list.c", 
      "src/multi.c"
    ]
  }, 
  {
    "date": 1308583176, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix for bug 561 and other related problems", 
    "id": "c1c9d551da6dd534c8dae051a3a7e64bf7db6bfb", 
    "files": [
      "src/networking.c", 
      "tests/unit/type/list.tcl", 
      "src/redis.h", 
      "tests/integration/replication.tcl", 
      "src/t_set.c", 
      "src/t_list.c"
    ]
  }, 
  {
    "date": 1308563648, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed INFO implementation to use the new allocator name define", 
    "id": "fec5a664f8ce7a1e0f687d07079aa09230fa5846", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1307710032, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed bug in AOF rewrite not working because of integer overflow", 
    "id": "4f948300bc26abb0aaa99343bc9f089ea98a9abe", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1307709791, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "AOF auto rewrite percentage option parsing fixed", 
    "id": "4ff34b6adb9f5f9daad1f27e3aac8e016554b86c", 
    "files": [
      "src/redis.c", 
      "src/config.c"
    ]
  }, 
  {
    "date": 1307626752, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Two fixes for replication: Slave performs the AOF rewrite at the right point. Non blocking connect also uses readable handler as with old Linux kernels like 2.6.18 on connection refused the writable even is not fired (kernel bug).", 
    "id": "45029d37cb7fe589bdfd9a08dd5a3afd611ad57e", 
    "files": [
      "src/replication.c"
    ]
  }, 
  {
    "date": 1306319567, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a problem in the script engine that crashed the server if the reply was not stored just int the static buffer of the client structure.", 
    "id": "09ab5591fab7e347406252fe71eb3f4da6fe04bf", 
    "files": [
      "src/scripting.c"
    ]
  }, 
  {
    "date": 1306319567, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Eval command table fixed to return the keys arguments of the command. We use zunionInterGetKeys() as it ZUNION/ZINTER have exactly the same semantic with a prefixed number of keys followed by key names.", 
    "id": "497fc8775fd4b85289a6998bb4eaddbe657e6be7", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1306319566, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed nul bulk parsing in Redis protocol to Lua type convertion. Check for bad Lua types as arguements of the redis() Lua command.", 
    "id": "379789cc523df4de1a3263c879114610949fade1", 
    "files": [
      "src/scripting.c", 
      "src/SCRIPTING.txt"
    ]
  }, 
  {
    "date": 1306319565, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed arity detection of Redis command executed from Lua script. Error reporting from Lua fixed. More work on the Redis reply to lua conversion code.", 
    "id": "3791000f15ad793854fac48aa4840914970048db", 
    "files": [
      "src/scripting.c", 
      "src/SCRIPTING.txt"
    ]
  }, 
  {
    "date": 1306319535, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix for Pub/Sub system, introduced in Redis 2.2.6 with the new copy-on-write safe iterator semantics. In the hope this is the last bug I introduced this way.", 
    "id": "efc3408748061a08ec5ff18e392c30f31f5094a2", 
    "files": [
      "src/pubsub.c"
    ]
  }, 
  {
    "date": 1306226158, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed typo in comment", 
    "id": "d200342ac2730c27cd456a79cc9e8725eaf0c5c2", 
    "files": [
      "src/t_zset.c"
    ]
  }, 
  {
    "date": 1305820732, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix for ZUNIONSTORE bug when there is an empty set among input sets. Regression test added.", 
    "id": "521ddcce1483d1b8760a108fd5d7df0ae663799a", 
    "files": [
      "src/t_zset.c", 
      "tests/unit/type/zset.tcl"
    ]
  }, 
  {
    "date": 1305820709, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix for ZUNIONSTORE bug when there is an empty set among input sets. Regression test added.", 
    "id": "38a154a9a6244826a8cb536347a60749cef2ee4a", 
    "files": [
      "src/t_zset.c", 
      "tests/unit/type/zset.tcl"
    ]
  }, 
  {
    "date": 1305473286, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed misuse of the new iterator semantics in ZUNIONSTORE", 
    "id": "cb16b6c3899d0696a7e633c29f764e06b222b2fe", 
    "files": [
      "src/t_zset.c"
    ]
  }, 
  {
    "date": 1305466381, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix for a possible bug related to ZINTER/UNIONSTORE called with the same source set more than one time.", 
    "id": "d070abe44cdc63ece3533d06986629b5b5c21ca8", 
    "files": [
      "src/t_zset.c"
    ]
  }, 
  {
    "date": 1305454680, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed SINTER[STORE] problem related to the new copy on write safe iterator", 
    "id": "dd1eefa4f3c89177cbe4f2e98dbd8f409ff87bc6", 
    "files": [
      "src/t_set.c"
    ]
  }, 
  {
    "date": 1304611802, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed semantics of CLUSTER SETSLOT, SELECT now only denied in cluster mode if selected DB is not 0 so that MIGRATE still works well.", 
    "id": "a7b058dae612ad3ab31a2b2d6f07e5ff7fe06618", 
    "files": [
      "src/cluster.c", 
      "src/db.c"
    ]
  }, 
  {
    "date": 1304610972, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "CLUSTER SETSLOT STABLE fixed", 
    "id": "46834808fe31e7cbf08d6c9f7638a54c5c8bff8a", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1304610614, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed problem in cluster redirection due to a stupid typo", 
    "id": "0276e5545c78490613871939d48989090a54c2c9", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1304257007, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a problem with string2ll()", 
    "id": "5cbe90dbfd5d9f46f5fa42e4e96a40a46d29b234", 
    "files": [
      "src/util.c"
    ]
  }, 
  {
    "date": 1304079496, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a bug with replication where SLAVEOF NO ONE caused a slave to close the connection with its slaves", 
    "id": "d37299e3b737addf5a2f6cd1ea47afabdf98730c", 
    "files": [
      "src/networking.c"
    ]
  }, 
  {
    "date": 1302211998, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed lame error in slot assignment", 
    "id": "a55c7868c1d66c491399895c1274cb300c983a95", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1302211407, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "evaluate cluster state after config load. Still bugs in the slot allocation after nodes config load to fix.", 
    "id": "5a547b27f7e4a12ac6ecd4e0b7f7c25841018deb", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1302210632, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "master node without slaves rejoin fixed", 
    "id": "93666e583cf344ff97e87503c77d9b3020ab357b", 
    "files": [
      "src/cluster.c"
    ]
  }, 
  {
    "date": 1301677168, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "DUMP implemented, RESTORE and MIGRATE fixed. Use zcalloc() instead of zmalloc()+memset() in sds.c when a new string is created with NULL initialization pointer.", 
    "id": "626f6b2d644b2458184edf9318f24ce95ba83532", 
    "files": [
      "src/redis.c", 
      "src/cluster.c", 
      "src/redis.h", 
      "src/sds.c"
    ]
  }, 
  {
    "date": 1301593935, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed memory leak introduced with the previous commit. Many thanks to Pieter Noordhuis for spotting it in no time", 
    "id": "5b94b8ac5d10dded6bb79909c660fe8d3f3ba677", 
    "files": [
      "src/networking.c"
    ]
  }, 
  {
    "date": 1301582683, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed issue #503. MONITOR + QUIT could crash the server, there are actually other interactions that could have the same effect (for instance Pub/Sub).", 
    "id": "25ef31920adad5c52a1f5dbe7fd307d4abec5862", 
    "files": [
      "src/networking.c"
    ]
  }, 
  {
    "date": 1301330782, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed a bug in RENAME getKeys() function", 
    "id": "4b61ca460c5d043b9d199a4e4991bfac5dde66c5", 
    "files": [
      "src/db.c"
    ]
  }, 
  {
    "date": 1301329266, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "bug fixed in zunionstore specific getKeys() implementation", 
    "id": "6e1b9b58ec6ae895da686015d82d4f121f1bfb85", 
    "files": [
      "src/db.c"
    ]
  }, 
  {
    "date": 1300830552, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed sdssplitargs() handling of hex-style escapes.", 
    "id": "e360e3bb7e58fd493c71911caab948e05e7fbe85", 
    "files": [
      "src/sds.c"
    ]
  }, 
  {
    "date": 1300641889, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "sdscatrepr() fixed. Now newlines and other special chars are escaped correctly", 
    "id": "612810af6e4456d14a7d68f01ce35905b2ff89d9", 
    "files": [
      "src/sds.c"
    ]
  }, 
  {
    "date": 1299772018, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed diskstore race condition", 
    "id": "0aed6a952a0acf5a02ec4b588031ec3dc231a68c", 
    "files": [
      "src/dscache.c"
    ]
  }, 
  {
    "date": 1299771559, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed diskstore race condition", 
    "id": "7493d2a0325fe33dc75317bfedf9b1c1e5b0d0b5", 
    "files": [
      "src/dscache.c"
    ]
  }, 
  {
    "date": 1299593031, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "comment typo fixed", 
    "id": "c5b6f461321e9b3075eed9f55989ca1d0d18394e", 
    "files": [
      "src/dscache.c"
    ]
  }, 
  {
    "date": 1299252170, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed return value of GETRANGE / SUBSTR", 
    "id": "0b537972f48a432cd5799d9b516d4526ea1ffef7", 
    "files": [
      "src/t_string.c"
    ]
  }, 
  {
    "date": 1299251634, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "AOF file descriptor leak fixed", 
    "id": "4aec2ec8c4226f3894418c33f865e14866f2b283", 
    "files": [
      "src/aof.c"
    ]
  }, 
  {
    "date": 1299250141, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "TTL command fixed to work reliably with diskstore", 
    "id": "15db4aa00636e8ec60767fedec364a7d66ccb26c", 
    "files": [
      "src/db.c"
    ]
  }, 
  {
    "date": 1298910972, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "define name typo fixed", 
    "id": "0a04b5f5a0caf3c59afc46aea7b1f6a9beea35df", 
    "files": [
      "src/rdb.c"
    ]
  }, 
  {
    "date": 1297419375, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed two diskstore issues, a quasi-deadlock creating problems with I/O speed and a race condition among threads", 
    "id": "05600eb8a7cb981f1a132bfba7d30f0b81f0a472", 
    "files": [
      "src/redis.h", 
      "src/diskstore.c", 
      "src/dscache.c", 
      "src/rdb.c", 
      "src/dict.c"
    ]
  }, 
  {
    "date": 1296120445, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a theoretical non exploitable security bug reported by @chrisrohlf. In theory if we undefine SDS_ABORT_ON_OOM from sds.c AND modify zmalloc.c in order to don't quit on out of memory (but this would break every other part of Redis), on out of memory there is a possible heap overflow.", 
    "id": "be86082be4c79922906a1261228a8e7df4279a86", 
    "files": [
      "src/sds.c"
    ]
  }, 
  {
    "date": 1295525903, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed issue #435 and at the same time introduced explicit ping in the master-slave channel that will detect a blocked master or a broken even if apparently connected TCP link.", 
    "id": "89a1433e69db5f7c996484672437616a16a6fe0a", 
    "files": [
      "src/redis.c", 
      "src/networking.c", 
      "src/replication.c"
    ]
  }, 
  {
    "date": 1294995237, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "master-slave replication fixed, it was not listing any key using KEYS command in the slave.", 
    "id": "3a73be752476f44dfb099863ac9424c2f27f2be0", 
    "files": [
      "src/db.c"
    ]
  }, 
  {
    "date": 1294593934, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "test adapted to run with diskstore, and a few bugs fixed", 
    "id": "69bfffb4a7aec38e5079ec10b0acc8629c1ee82b", 
    "files": [
      "tests/test_helper.tcl", 
      "src/aof.c", 
      "src/diskstore.c", 
      "src/dscache.c", 
      "tests/unit/other.tcl", 
      "src/db.c", 
      "src/debug.c"
    ]
  }, 
  {
    "date": 1294072640, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "stupid bug fixed", 
    "id": "bafa88c8b700b1648b561e86dce6ceca4c139d46", 
    "files": [
      "src/dscache.c"
    ]
  }, 
  {
    "date": 1294048305, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "diskstore FLUSH* fixed", 
    "id": "0b305fcfd9fd9131f6a393a19ffec38514f6756c", 
    "files": [
      "src/diskstore.c"
    ]
  }, 
  {
    "date": 1294048059, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "diskstore bug fixing and negative cache proper implementation", 
    "id": "c15a3887e08d468b96d4313cc19862b5e4b09977", 
    "files": [
      "src/db.c", 
      "src/diskstore.c", 
      "src/dscache.c", 
      "src/redis.h"
    ]
  }, 
  {
    "date": 1294003646, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed cache-flush-delay configuration parsing", 
    "id": "d2033feb5cd94872fc02fe9506d21ccb5ebf286e", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1294000757, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed a bug in diskstore", 
    "id": "4942145d722559698416483c6f31ead9909884be", 
    "files": [
      "tests/assets/default.conf", 
      "src/db.c", 
      "src/dscache.c"
    ]
  }, 
  {
    "date": 1293986524, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "diskstore race condition fixed", 
    "id": "e37efb0d8bb12172990f6c688230bc7515aa6524", 
    "files": [
      "src/dscache.c"
    ]
  }, 
  {
    "date": 1293914388, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "blocking load fixed with the new design", 
    "id": "9a3730289f6dba0878d83ddb3e8e5ec323ad6682", 
    "files": [
      "src/db.c"
    ]
  }, 
  {
    "date": 1293802224, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "major bug and a dead lock fixed", 
    "id": "a440ecf0d36d22305f994a4482e60099720c47f3", 
    "files": [
      "src/db.c", 
      "src/dscache.c"
    ]
  }, 
  {
    "date": 1293730666, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "diskstore cache bug fixing", 
    "id": "8d51fb6a80fb40abd0bb487d71435d3a30c2942e", 
    "files": [
      "src/db.c", 
      "src/redis.h", 
      "src/dscache.c"
    ]
  }, 
  {
    "date": 1293726114, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed bugs on diskstore cache", 
    "id": "eea15afe5f38fee227bb6500f51c6208f6c8c70d", 
    "files": [
      "src/dscache.c"
    ]
  }, 
  {
    "date": 1293720924, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed a few bugs in DS store, now it's somewhat about able to reply to 'GET foo' with a bogus value.", 
    "id": "1609a1c42d8f49bada5375a8756a2ca56609ece8", 
    "files": [
      "src/redis.c", 
      "src/diskstore.c", 
      "src/dscache.c"
    ]
  }, 
  {
    "date": 1291029617, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "quick and dirty fix for hiredis bug creating problem with the new redis-cli connect commmand. Also change prompt when redis-cli is not connected", 
    "id": "d8d528e9926d712cf02617dcdb6e9bde90e4e49c", 
    "files": [
      "deps/hiredis/hiredis.c", 
      "src/redis-cli.c"
    ]
  }, 
  {
    "date": 1289588540, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix for bug 374, thanks to Jeremy Zawodny for reporting and tracing why it was crashing.", 
    "id": "9fd01051bf8400babcca73a76a67dfc1847633ff", 
    "files": [
      "src/replication.c"
    ]
  }, 
  {
    "date": 1289477957, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "volatile-lru maxmemory policy segfault fixed, thanks to Anthony Lauzon for reporting the problem with the patch. Original patch modified a bit in order to avoid the double lookup if the policy is allkeys-lru", 
    "id": "0c2f75c6d809a1658a244e74ef209dabb19fb4c7", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1288888503, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "typos and minor stuff fixed in the new non blocking replication code", 
    "id": "62ec599c363f36a8f2b0b7d39c1533895f491631", 
    "files": [
      "src/redis.c", 
      "src/redis.h", 
      "src/replication.c"
    ]
  }, 
  {
    "date": 1287057178, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Object approximated LRU algorithm enhanced / fixed / refactored. This is used for the VM currently but will soon be used for maxmemory expiring.", 
    "id": "ef59a8bc9ef426f9d24e701e9b73a6a03ddd3d0f", 
    "files": [
      "src/object.c", 
      "src/db.c", 
      "src/redis.h", 
      "src/redis.c", 
      "src/vm.c", 
      "src/debug.c"
    ]
  }, 
  {
    "date": 1286795109, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "maxmemory fixed, we now try to release memory just before we check for the memory limit. Before fixing there was code between the attempt to free memory and the check for memory limits, and this code could result into allocations going again after the memory limit.", 
    "id": "1dd10ca233a533928ec2ff83f675499e4e7c1ff1", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1286461295, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed an alignment problem with time_t is 32 bit, long is 64 bit, and arch is sparc or any other where unaligned accesses will result to sigbus", 
    "id": "144a5e72f2adc9d151438569f680533e41778504", 
    "files": [
      "src/db.c"
    ]
  }, 
  {
    "date": 1286448554, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "minor typo fixed, reported by Thomas Bassetto", 
    "id": "fdc0bde9359d12dd53b686a6db9c66cf0001670f", 
    "files": [
      "src/redis-cli.c"
    ]
  }, 
  {
    "date": 1285170544, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "two leaks fixed", 
    "id": "50a9fad5d50488592447dc599a9ef6a184088ee3", 
    "files": [
      "src/t_zset.c"
    ]
  }, 
  {
    "date": 1284732301, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "new parsing code bugfixing", 
    "id": "a4f3f93b90c7cc688ffff665914bdadc224847fc", 
    "files": [
      "src/networking.c"
    ]
  }, 
  {
    "date": 1284470298, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed typo in the latest commit", 
    "id": "412e457c278395a20dbc985f85a2d3d5316a2919", 
    "files": [
      "src/aof.c"
    ]
  }, 
  {
    "date": 1283945176, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a race condition in VM happening when a key was deleted while there was a client waiting for this key to be resumed from swap to memory. The client would hang forever.", 
    "id": "7f00cd226438d3cd91238974346cee624d8920e1", 
    "files": [
      "src/db.c"
    ]
  }, 
  {
    "date": 1283847934, 
    "committer": {
      "email": "pcnoordhuis@gmail.com", 
      "name": "Pieter Noordhuis"
    }, 
    "message": "Fix bug where the client is not present in server.clients when free'ing it\n\nWhen creating the readable event results in an error (this happens when\nthe server hits OS limits), the client was not added to the list of\nclients when freeClient was called. This results in an assertion error.\nIt is better to check this condition first and free the client\nimmediately when this condition occurs. Port of 00a90feb.", 
    "id": "106bd87a3ca7b90e1e6fb764398bbefccee3e4fa", 
    "files": [
      "src/networking.c"
    ]
  }, 
  {
    "date": 1283463281, 
    "committer": {
      "email": "pcnoordhuis@gmail.com", 
      "name": "Pieter Noordhuis"
    }, 
    "message": "Fix bug in gluing a deferred multi bulk length to the next reply chunk", 
    "id": "49128f0b9da725de992e427fa341a837bcc2991b", 
    "files": [
      "src/networking.c"
    ]
  }, 
  {
    "date": 1283358690, 
    "committer": {
      "email": "antirez@metal.(none)", 
      "name": "antirez"
    }, 
    "message": "fixed a few harmless warnings complining on Linux", 
    "id": "a047bf52a4fed963a434c6e7e7376880cf17abcf", 
    "files": [
      "src/redis-check-dump.c"
    ]
  }, 
  {
    "date": 1283161905, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed MONITOR mode and Issue 296", 
    "id": "e0e1c195202dd74ab22554dd4293672cc95368ee", 
    "files": [
      "src/db.c", 
      "src/redis-cli.c"
    ]
  }, 
  {
    "date": 1282921466, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix for bug 312, yet to verify in a couple of minutes...", 
    "id": "c1ae36aea814e1bcb0f046a00b51ed46d7432c3b", 
    "files": [
      "src/vm.c"
    ]
  }, 
  {
    "date": 1282905970, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed another instace of the Issue 173", 
    "id": "09252fc4f36e9a5b89c9a9ff8b3c9750a3144b45", 
    "files": [
      "src/replication.c"
    ]
  }, 
  {
    "date": 1282899663, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed segfault in freeMemoryIfNeeded due to the fact that keys are now sds strings and not objects in the main hash table, thanks to Anthony Lauzon for spotting the bug and providing a patch.", 
    "id": "357d36733dc37d87160ca2f65013656693290e9d", 
    "files": [
      "src/redis.c"
    ]
  }, 
  {
    "date": 1282842640, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "intset loading bug fixed", 
    "id": "2df84b726983ae1f4fc9c16da61d5a0ce5114cc4", 
    "files": [
      "src/rdb.c"
    ]
  }, 
  {
    "date": 1282821504, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed a memory leak in the new Set code", 
    "id": "bad7d097e95ec0735c41f85b50ace65bec6134ae", 
    "files": [
      "tests/test_helper.tcl", 
      "src/rdb.c"
    ]
  }, 
  {
    "date": 1282666089, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Issue 179 fixed, now redis-cli is able to parse correctly multi bulk replies with elements that are errors", 
    "id": "b37ca6edb10faa0ebcf54a7d23cee31d895fe5b1", 
    "files": [
      "src/redis-cli.c"
    ]
  }, 
  {
    "date": 1282575998, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed overflow detection in argument to long convertion function in general, and in expire/ttl pairs specifically, addressing issue 54", 
    "id": "c91abdcd077f868a59290bc9d68fba3130a3121d", 
    "files": [
      "src/db.c", 
      "src/object.c"
    ]
  }, 
  {
    "date": 1280934133, 
    "committer": {
      "email": "pcnoordhuis@gmail.com", 
      "name": "Pieter Noordhuis"
    }, 
    "message": "Tests for redis-cli in non-interactive mode\n\nMinor change in redis-cli output for the (multi-)bulk response but this\nwill be fixed in the next commit.", 
    "id": "07242c0ccf1fd6a4d8199fa09981e6f7a3a1cce9", 
    "files": [
      "tests/integration/redis-cli.tcl", 
      "src/redis-cli.c"
    ]
  }, 
  {
    "date": 1280336212, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fix of the fix for the replication bug", 
    "id": "cbf7e1070a5f3bcd8024dff481a2f729a2b5cf2f", 
    "files": [
      "src/t_zset.c"
    ]
  }, 
  {
    "date": 1280335322, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a replication bug in ZINTERSTORE.\n\nIn order to trigger the bug what's needed is to call ZINTERSTORE\nresulting into an empty set created, bug against a key that already\nexisted. The command was not propagated, so the replica ended with the\nkey that the master removed. Sequence of command to reproduce:\n\nredis-cli hset 446 34 905\nredis-cli hset 446 393 911\nredis-cli zadd 966 0.085412045980529885 652\nredis-cli zadd 645 0.25081839284432045 280\nredis-cli zinterstore 446 2 966 645", 
    "id": "8c1420ff2a2a9e68ab3faa98bb82d682301fa66b", 
    "files": [
      "src/t_zset.c"
    ]
  }, 
  {
    "date": 1280237168, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed a ziplist bug about encoding of integer values overflowing 64 bit", 
    "id": "6171250871e408928a172c09d5fdf41961720fbc", 
    "files": [
      "src/ziplist.c"
    ]
  }, 
  {
    "date": 1279802925, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "other shared objects where created in the I/O thread in createStringObjectFromLongLong. Fixed as well.", 
    "id": "e002ec6801f41d29e1038f687b52dfe6c7fc9c8a", 
    "files": [
      "src/object.c"
    ]
  }, 
  {
    "date": 1279797144, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "minor typo fixed in a comment", 
    "id": "cdbea20afb232a3603f988a1dc235f75d8eff981", 
    "files": [
      "src/object.c"
    ]
  }, 
  {
    "date": 1279710986, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "vm_blocked_clients count fixed in INFO, thanks to Pietern Noordhuis", 
    "id": "1a71fb96697fc2af064fc221b21421ad6a8196fa", 
    "files": [
      "src/networking.c"
    ]
  }, 
  {
    "date": 1278353214, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a crash loading the AOF file containing MULTI/EXEC, a result of WATCH implementation. Test needed...", 
    "id": "b67d234563e03ceb9325b39a78cca11bec28569d", 
    "files": [
      "src/aof.c"
    ]
  }, 
  {
    "date": 1278008566, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed MONITOR output for consistency: now integer encoded values are also formatted like this: \"3932\"", 
    "id": "d3b958c3fc32be66dac929ede482ef5fe8f5b462", 
    "files": [
      "src/replication.c"
    ]
  }, 
  {
    "date": 1278008013, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed error code checking for *write operations and return value in AOF rewriting function", 
    "id": "daf2049d0d62aa2b77bd6f9a38d03bb4bbfed59c", 
    "files": [
      "src/aof.c"
    ]
  }, 
  {
    "date": 1276456191, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed a bug in rdbLoadObject abount specially encoded objects", 
    "id": "bb039e853df6c2754885c5cfb82dc3f7ea7d25b5", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1275729410, 
    "committer": {
      "email": "pcnoordhuis@gmail.com", 
      "name": "Pieter Noordhuis"
    }, 
    "message": "fixed two leaks for the dual encoded lists", 
    "id": "cd627d4e7892701cb480001986184913a3ece7f5", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1275582135, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "memory leak introduced in the latest big changes fixed", 
    "id": "4c8f23700b2943ff724d4ea5c7830d939dbd08d2", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1275581756, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed VM bugs introduced with the top level keys as sds strings changes", 
    "id": "44262c58a417bfcb4a23d767a742a9a2f360fcb4", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1275580974, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "top level keys are no longer redis objects but sds strings. There are still a few bugs to fix when VM is enabled", 
    "id": "092418136490fc94f2520ede706846dac8e43b5e", 
    "files": [
      "tests/test_helper.tcl", 
      "redis.c", 
      "staticsymbols.h"
    ]
  }, 
  {
    "date": 1275394710, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed a few comments", 
    "id": "a4798f733dc2cb973552e0ea84cc5f553951e162", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1275394546, 
    "committer": {
      "email": "antirez@metal.(none)", 
      "name": "antirez"
    }, 
    "message": "fixed bugs introduced in the rewrite of the new VM engine", 
    "id": "e4ed181d4057395c7a83c531d89b022e76ba21b1", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1275339413, 
    "committer": {
      "email": "antirez@metal.(none)", 
      "name": "antirez"
    }, 
    "message": "fixed missing incrRefCount", 
    "id": "7dd8e7cfdfcdce0defee316645359eb9b36cf4d0", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1275337592, 
    "committer": {
      "email": "pcnoordhuis@gmail.com", 
      "name": "Pieter Noordhuis"
    }, 
    "message": "fixed signedness and disambiguate variable names", 
    "id": "b6eb9703949b49d2e5bd71316b4cd545677c5651", 
    "files": [
      "ziplist.c", 
      "ziplist.h", 
      "redis.c"
    ]
  }, 
  {
    "date": 1275329915, 
    "committer": {
      "email": "pcnoordhuis@gmail.com", 
      "name": "Pieter Noordhuis"
    }, 
    "message": "ziplistDelete no longer needs a direction now ziplistPrev is fixed", 
    "id": "6a8e35ad9252f1ea1ff0a449af52aef1f71815f8", 
    "files": [
      "ziplist.c", 
      "ziplist.h"
    ]
  }, 
  {
    "date": 1275182704, 
    "committer": {
      "email": "pcnoordhuis@gmail.com", 
      "name": "Pieter Noordhuis"
    }, 
    "message": "fixed LINDEX to always return bulk response", 
    "id": "bd8db0ada840e2c52ab37470256676a05c6fe855", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1275042287, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed ZINCR Nan bugs leading to server crash and added tests", 
    "id": "5fc9229c3467ed22e68242fecf3a339309de8ab5", 
    "files": [
      "redis.c", 
      "tests/unit/type/zset.tcl"
    ]
  }, 
  {
    "date": 1274973309, 
    "committer": {
      "email": "shift@someone.section.me", 
      "name": "Vincent Palmer"
    }, 
    "message": "Fixed typo.", 
    "id": "ca3f830b32a0a8303a5a761d6212925d9b5ac365", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1274889029, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix EXEC bug that was leaving the client in dirty status when used with WATCH", 
    "id": "1ad4d31631315d0c1e140b0a831e30fa90163fec", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1274786483, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "minor bug fixed in WATCH", 
    "id": "87c68815c3c932e209a88aa3cc8280c6c0587c27", 
    "files": [
      "redis.c", 
      "staticsymbols.h", 
      "redis-cli.c"
    ]
  }, 
  {
    "date": 1274177871, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "build fixed when simpler shells are used to create release.h", 
    "id": "274e45e365a484ba0b3a957ead8c420484d6fca9", 
    "files": [
      "mkreleasehdr.sh", 
      "redis.c"
    ]
  }, 
  {
    "date": 1273870566, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed a warning seen with some GCC version under Linux", 
    "id": "3be2c9d732618512336f66f3de918941fc8f32d6", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1273581056, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed a problem leading to crashes, as keys can't be currently specially encoded, so we can't encode integers at object loading time... For now this can be fixed passing a few flags, or later can be fixed allowing encoded keys as well", 
    "id": "bd59ecfb9293e5d19d0bc3b7654ba78aa544a59f", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1273580033, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "long long to string conversion speedup applied in other places as well. Still the code has bugs, fixing right now...", 
    "id": "ee14da56e6f725509a4dbfc4fe46ef8d8fe7621c", 
    "files": [
      "sds.c", 
      "sds.h", 
      "redis.c"
    ]
  }, 
  {
    "date": 1273059997, 
    "committer": {
      "email": "pcnoordhuis@gmail.com", 
      "name": "Pieter Noordhuis"
    }, 
    "message": "allow AOF to be fixed by truncating to the portion of the file that is valid", 
    "id": "cb8ae3c88908a8a4b9c88d56713ae2aea472cbd8", 
    "files": [
      "redis-check-aof.c"
    ]
  }, 
  {
    "date": 1272384412, 
    "committer": {
      "email": "antirez@metal.(none)", 
      "name": "antirez"
    }, 
    "message": "Fixed a redis-cli bug, was using free instead of zfree call", 
    "id": "8ff6a48b99dd5e706f542be848a62beaf995229b", 
    "files": [
      "redis-cli.c"
    ]
  }, 
  {
    "date": 1272380288, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "AOF is now rewritten on slave after SYNC with master. Thanks to @_km for finding this bug and any others'", 
    "id": "8f63ddca00cd23978fc5a26388681753c7e5318c", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1271605875, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fix for a SORT bug introduced with commit 16fa22f1, regression test added", 
    "id": "08ee9b570f4a9a181c3ed2242c5b2f6a88eddc41", 
    "files": [
      "redis.c", 
      "test-redis.tcl"
    ]
  }, 
  {
    "date": 1271177313, 
    "committer": {
      "email": "alexmchale@gmail.com", 
      "name": "Alex McHale"
    }, 
    "message": "Fixed a tiny memory leak when loading the configuration file.", 
    "id": "9a22de8270fbb594cbdd23fe06a9e193ee01f17a", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1270890851, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "dict.c fixed to play well with enabling/disabling of the hash table", 
    "id": "dae121d9aa38626db9962ff02879b55eb7ca36bf", 
    "files": [
      "dict.c"
    ]
  }, 
  {
    "date": 1269858182, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a refcount stuff leading to PUBSUB crashes", 
    "id": "201037f56215626ed2c96bdc589f486411b146d6", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1269597387, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a critical replication bug: binary values issued with the multi bulk protocol caused a protocol desync with slaves.", 
    "id": "248ea3100391e57725185a87ae77567646f76723", 
    "files": [
      "redis.c", 
      "staticsymbols.h"
    ]
  }, 
  {
    "date": 1269464314, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed the reply about denied  write commands under maxmemory reached condition: now the error will no longer lead to a client-server protocol desync", 
    "id": "b61a28fe35232ca34632e2ad1c755e21a6eb5426", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1268877968, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Optimization fixed and re-activated", 
    "id": "db5946fc27be8721eac4c306639f94797c653074", 
    "files": [
      "redis.c", 
      "Changelog"
    ]
  }, 
  {
    "date": 1268877069, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed redis-cli auth code", 
    "id": "288799e04addb974b85cd6c266918adc8a33964b", 
    "files": [
      "redis-cli.c", 
      "test-redis.tcl"
    ]
  }, 
  {
    "date": 1268833262, 
    "committer": {
      "email": "root@domU-12-31-39-00-C4-C4.compute-1.internal", 
      "name": "root"
    }, 
    "message": "Added Authentication to redis-cli.c using -a switch\nUpdate usage\nfixed Makefile to delete redis-check-dump during make clean", 
    "id": "fdfdae0f3abdbe44905d2de1b89ea839717c2a65", 
    "files": [
      "Makefile", 
      "redis-cli.c"
    ]
  }, 
  {
    "date": 1268787603, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a bug in HSET, a memory leak, and a theoretical bug in dict.c", 
    "id": "2069d06a0bb88acf17153e2ece1ffb857d11645d", 
    "files": [
      "redis.c", 
      "dict.c"
    ]
  }, 
  {
    "date": 1268678006, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed the same problem in ZREVRANK", 
    "id": "653c9240b7dcb823e7bc72e6d88ffa07af481841", 
    "files": [
      "redis.tcl", 
      "redis.c"
    ]
  }, 
  {
    "date": 1268677981, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a ZRANK bug", 
    "id": "cc3b01c30a2acb426d93799f2f3287f27b3d7a56", 
    "files": [
      "redis.tcl", 
      "redis.c"
    ]
  }, 
  {
    "date": 1268390333, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Applied the replication bug patch provided by Jeremy Zawodny, removing temp file collision after the slave got the dump.rdb file in the SYNC stage", 
    "id": "8c5abee892f28d9c19921971b86991b5091e8530", 
    "files": [
      "redis.c", 
      "Changelog"
    ]
  }, 
  {
    "date": 1268137129, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Hash auto conversion from zipmap to hash table, type fixed for hashes, hash loading from disk", 
    "id": "ada386b2189aabee1cf862546d14cc35a827b4e1", 
    "files": [
      "redis.c", 
      "TODO"
    ]
  }, 
  {
    "date": 1267487829, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Better to increment the version minor number when a VM bug is fixed... it will be simpler to understand what's going on when users will report problems with the INFO trace.", 
    "id": "ed7451548a0e874ac3b2e029268655afab96b506", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1267487570, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a subtle VM bug... was not flushing the buffer so the child process read truncated data", 
    "id": "ba76a8f901258bc13812072dc4065b88f2e2d4d0", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1267478149, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Swappability bug due to a typo fixed thanks to code review by Felix Geisend\u00f6rfer @felixge", 
    "id": "c8c72447f6c9e999a17d37338e9d3460f45722f4", 
    "files": [
      "redis.c", 
      "test-redis.tcl"
    ]
  }, 
  {
    "date": 1267269968, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Bug #169 fixed (BLOP/BRPOP interrupted connections are not cleared from the queue)", 
    "id": "5921aa36ede343d728cb53cc7dda87defc966c2f", 
    "files": [
      "redis.conf", 
      "redis.c", 
      "TODO", 
      "Changelog"
    ]
  }, 
  {
    "date": 1266856614, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed 32bit make target to work on Linux out of the box", 
    "id": "9ebed7cf066267c0fe91f100f50c028fc4cec23f", 
    "files": [
      "redis.c", 
      "Makefile", 
      "test-redis.tcl"
    ]
  }, 
  {
    "date": 1266575037, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "A problem with replication with multiple slaves connectiong to a single master fixed. It was due to a typo, and reported on github by the user micmac. Also the copyright year fixed from many files.", 
    "id": "12d090d2d0a9ff8d2c082b97cf405a30c7126752", 
    "files": [
      "sds.c", 
      "redis.c", 
      "pqsort.c", 
      "anet.h", 
      "adlist.c", 
      "sds.h", 
      "adlist.h", 
      "redis-cli.c", 
      "anet.c", 
      "redis.h", 
      "ae_epoll.c", 
      "ae_select.c", 
      "dict.h", 
      "zmalloc.c", 
      "redis-benchmark.c", 
      "ae.h", 
      "pqsort.h", 
      "zmalloc.h", 
      "ae.c", 
      "dict.c"
    ]
  }, 
  {
    "date": 1264950224, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed VM corruption due to child fclosing the VM file directly or indirectly calling exit(), now replaced with _exit() in all the sensible places. Masked a few signals from IO threads.", 
    "id": "478c2c6f5bffa318d24e23519d2e4d7ea68f15fd", 
    "files": [
      "redis.c", 
      "TODO"
    ]
  }, 
  {
    "date": 1264265704, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed memory human style memory reporting, removed server.usedmemory, now zmalloc_used_memory() is used always.", 
    "id": "b72f6a4b70ef642a085f700243ebf885ca7b09f4", 
    "files": [
      "redis.c", 
      "TODO"
    ]
  }, 
  {
    "date": 1264024620, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed a deadlock caused by too much finished processes in queue so that I/O clients writing to the wirte side of the pipe used to awake the main thread where blocking. Then a BGSAVE started waiting for the last active thread to finish, condition impossible because all the I/O threads where blocking on threads. Takes this as a note to myself...", 
    "id": "76b7233adb5c59b072209434d9a5ee795c5affa5", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1264012739, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "ae.c event loop does no longer support exception notifications, as they are fully pointless. Also a theoretical bug that never happens in practice fixed.", 
    "id": "621d5c1985a211662409976d7b49645cad55ea4e", 
    "files": [
      "ae.h", 
      "ae_select.c", 
      "ae_epoll.c", 
      "ae.c", 
      "redis-cli.c"
    ]
  }, 
  {
    "date": 1263924122, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "removed a bug in the function to cancel an I/O job", 
    "id": "970e10bb34690746ba378b0408ec37e7f7b57040", 
    "files": [
      "redis.c", 
      "benchmark.c", 
      "Makefile", 
      "redis-benchmark.c"
    ]
  }, 
  {
    "date": 1263580513, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed a minor memory leak in configuration file parsing", 
    "id": "fefed5979816be8371ce106f9d98bdefc5f806da", 
    "files": [
      "redis.c", 
      "test-redis.tcl"
    ]
  }, 
  {
    "date": 1263579263, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "support for named VM swap file. Fixed a few important interaction issues between the background saving processes and IO threads", 
    "id": "054e426dbd7f5d4788c68fca653e1d4819adeec0", 
    "files": [
      "redis.conf", 
      "redis.c", 
      "test-redis.tcl"
    ]
  }, 
  {
    "date": 1263507507, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a never experienced, theoretical bug that can actually happen in practice. Basically when a thread is working on a I/O Job we need to wait it to finish before to cancel the Job in vmCancelThreadedIOJob(), otherwise the thread may mess with an object that is being manipulated by the main thread as well.", 
    "id": "2e111efe5a8d5092a4a6d391096ff6712cf6f162", 
    "files": [
      "redis.c", 
      "TODO"
    ]
  }, 
  {
    "date": 1263418001, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "access to already freed job structure fixed by statements reoredering", 
    "id": "427a2153d3f8509e34a8caf58612f7ed03a6d9ec", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1263257238, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a bug in the IO Job canceling funtion", 
    "id": "6c96ba7dfe139187988b751fa4ae24dbfbe8be4e", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1263232469, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "removed a bug introduced with non blocking VM", 
    "id": "b3e3d0d78e3b74328f89697ad4f63a07e8acf373", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1263231915, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "a few non blocking VM bugs fixed", 
    "id": "f11b86471486d15cc7e37b5cc4021433e0592c91", 
    "files": [
      "redis.c", 
      "staticsymbols.h"
    ]
  }, 
  {
    "date": 1262739090, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed a bug in bgsave when VM is off but still it was testing for obj->storage field", 
    "id": "38823f081799b5bcdbb07fd56478f07cb865640d", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1262705645, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "VM internals bugfixes, set 1", 
    "id": "7d30035d477f5d97e2b491477f4b95c9bb140d6f", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1262131865, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed a problem with BLPOP timeout of zero, now it blocks forever", 
    "id": "58d976b8e855b4ff83c7bfd910acf9c53e3e7b96", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1261665611, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a minor bug in GETSET, now the SET part is not performed if the GET fails because the key does not contain a string value", 
    "id": "322fc7d855d3c19f8ca95cf5d66f8111f7981a30", 
    "files": [
      "redis.c", 
      "TODO"
    ]
  }, 
  {
    "date": 1261131971, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed sds.c bug #124", 
    "id": "b2b5ae80065ff52a77a3b8c08a89c895d151a52f", 
    "files": [
      "sds.c", 
      "TODO"
    ]
  }, 
  {
    "date": 1260970832, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Regression for epoll bug in redis-test.tcl, version is now 1.1.93", 
    "id": "483049a73786894bb7e5f902b7cabb8b6cabb195", 
    "files": [
      "redis.c", 
      "test-redis.tcl", 
      "Changelog"
    ]
  }, 
  {
    "date": 1260966640, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a lame epoll issue", 
    "id": "67669f0032b27d9c434bc91b1cf5b199e9077fd2", 
    "files": [
      "ae_epoll.c"
    ]
  }, 
  {
    "date": 1260886480, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed some subtle bug in the command processing code almost impossible to spot in the real world, thanks to gcov", 
    "id": "7c49733ce3f550a96f60a9213911fdc9265cedc8", 
    "files": [
      "redis.c", 
      "test-redis.tcl"
    ]
  }, 
  {
    "date": 1260867970, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed issue #121", 
    "id": "0d36ded040eba3b7b6e6ed1437f4f9c0bd44fbbe", 
    "files": [
      "redis.c", 
      "test-redis.tcl"
    ]
  }, 
  {
    "date": 1260059137, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "printf format warnings fixed by casting", 
    "id": "83c6a61889f167d7c29c88069ada887f038985fd", 
    "files": [
      "redis.c", 
      "redis-cli.c"
    ]
  }, 
  {
    "date": 1260058572, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Regression tests for SETNX and MSETNX bugs added", 
    "id": "5acdc75d66b855cd621f324b1a15c48c8491366c", 
    "files": [
      "redis.c", 
      "test-redis.tcl"
    ]
  }, 
  {
    "date": 1260057575, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed daemonization when using kqueue/kevent. Now the server initialization is performed *after* the daemonization", 
    "id": "71c54b21e261536579d350771d13157afeeb84c6", 
    "files": [
      "redis.c", 
      "TODO", 
      "Changelog"
    ]
  }, 
  {
    "date": 1260019565, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "a few redis-cli format specified fixed", 
    "id": "570333015147ce01646ff61e50afc210a12408db", 
    "files": [
      "TODO", 
      "redis-cli.c"
    ]
  }, 
  {
    "date": 1259609106, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed issued #85 (getDecodedObject: Assertion 1 != 1 failed. While sorting a set), added a smarter assert() function to dump the stacktrace, provided a macro to initalize Redis objects on the stack to avoid this kind of bugs.", 
    "id": "dfc5e96ce55aacc4ed798fcc70b52a7509f76541", 
    "files": [
      "redis.c", 
      "staticsymbols.h"
    ]
  }, 
  {
    "date": 1259605612, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed a subtle bug in redis-cli not having visible effects", 
    "id": "e17e0b0529eda98156f988c907789f08299c2f7e", 
    "files": [
      "redis-cli.c"
    ]
  }, 
  {
    "date": 1259427789, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "ZRANGEBYSCORE memory leak fixed, ZRANGEBYSCORE initial test added", 
    "id": "c74e7c775789392f65e4b3cc6b5a7d52ab94053f", 
    "files": [
      "redis.c", 
      "test-redis.tcl"
    ]
  }, 
  {
    "date": 1259259532, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "zero length bulk data reading fixed in loadAppendOnlyFile()", 
    "id": "0f151ef1a032e7065e156e4e2481efa9d4230717", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1259081566, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "sorted sets saving fixed", 
    "id": "6c446631dac7a7fe9e34b18392d4a8498c8c9bc3", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1258807594, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed a SORT memory leak that should never happen in practice", 
    "id": "ed5a857a6dc0eab237c979622a3dba23e4873203", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1258712540, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "ZINCRBY return value fixed", 
    "id": "91d71bfc796cb27cf71043df504e0d84d6e1d31d", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1258652658, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "redis-benchmark hopefully last bug with multi bulk reply fixed", 
    "id": "b892cabed4079de8a1c6ac18041e3ea835c80300", 
    "files": [
      "redis.c", 
      "benchmark.c"
    ]
  }, 
  {
    "date": 1258566425, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "redis-benchmark multi bulk reply support hopefully fixed", 
    "id": "6c4e61b389bc9a9ce909e3ee6addb5ef6fddcf39", 
    "files": [
      "benchmark.c"
    ]
  }, 
  {
    "date": 1258058105, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "ZSCORE fixed, now returns NULL on missing key or missing element", 
    "id": "96d8b4eeba2503c9f679e41963220a72ee5baeda", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1257845169, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed issue 92 in redis: redis-cli (nil) return value lacks CR/LF", 
    "id": "060f6be6bf2976bad5bd6007d21e7e6ff081c92b", 
    "files": [
      "redis-cli.c"
    ]
  }, 
  {
    "date": 1257332367, 
    "committer": {
      "email": "root@yserv.com", 
      "name": "root"
    }, 
    "message": "fixed a refcounting bug with SORT ... STORE leading to random crashes", 
    "id": "121796f792c4d8fdc06fe664d675ec16791f6818", 
    "files": [
      "redis.c", 
      "dict.c"
    ]
  }, 
  {
    "date": 1257255398, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "ZSets double to string serialization fixed", 
    "id": "eaa256ad256e385f6f448df6c162ff14f4d2956b", 
    "files": [
      "redis.c", 
      "TODO", 
      ".gitignore", 
      "test-redis.tcl"
    ]
  }, 
  {
    "date": 1257072946, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "appendfsync parsing in config file fixed. If you benchmarked Redis against different appendfsync options is time to try again ;)", 
    "id": "1766c6dadce7dd59f3f272d8cc21a4ce52c3f561", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1257069950, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "append only file loading fixed", 
    "id": "9387d17dfeb757d685236ff5c792d102ea296631", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1257026590, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed Issue 83:Using TYPE on a zset results in a malformed response from the Redis server", 
    "id": "412a8bcea3e2329ee255174d68b6760416cc3a59", 
    "files": [
      "redis.c", 
      "zmalloc.c"
    ]
  }, 
  {
    "date": 1256813020, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed Issue 74 (ERR just returned on invalid password), now the error message is -ERR invalid password.", 
    "id": "fa4c0aba85fca17e2526831d1afa530724479ed5", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1256812712, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed issue 72 (SLAVEOF shutdowns redis-server on malformed reply)", 
    "id": "4aa701c11aae2b645583e78a808452ae7e1918da", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1256812315, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed issue 77 (Incorrect time in log files) thanks to youwantalex", 
    "id": "6c9385e01d127f8ffa6a783b2a571d8ac4b73666", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1256812243, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed  Issue 76 (redis-server crashes when it can't connect to MASTER and client connects to SLAVE)", 
    "id": "f72b934d1478add5e580e312e93831cbab178a89", 
    "files": [
      "redis.c", 
      "TODO"
    ]
  }, 
  {
    "date": 1256664672, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "A lot of ZSETs tests implemented, and a bug fixed thanks to this new tests", 
    "id": "d7f43c081a49e31aac6b060ca8dfbc259da2c53d", 
    "files": [
      "client-libraries/tcl/redis.tcl", 
      "redis.c", 
      "TODO", 
      "test-redis.tcl"
    ]
  }, 
  {
    "date": 1256574811, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "another leak fixed. Can't find more for now, but still a bug in ZSETs to fix", 
    "id": "ad807e6fa3ce761a862a627316e6545f50779668", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1256031560, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Imporant bug leading to data corruption fixed (NOT affecting stable distribution), Tcl client lib MSET/MSETNX implementation fixed, Added new tests for MSET and MSETNX in test-redis.tcl", 
    "id": "f69f2cbafeceb03a0bc945227f08657ea1c09251", 
    "files": [
      "client-libraries/tcl/redis.tcl", 
      "redis.c", 
      "test-redis.tcl"
    ]
  }, 
  {
    "date": 1255809779, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "MSET fixed, was not able to replace keys already set for a stupid bug", 
    "id": "2ed22c8b29039dce0ae795c4ba3c334b9ec860f4", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1255728993, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "multi bulk input protocol fixed", 
    "id": "638e42aca477816ab4754ffb4e1e2816bdcc163c", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1254929640, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "undoed all the sds hacking that lead just to random bugs and no memory saving ;)", 
    "id": "f1017b3fb318d8524210ce4d599a0b083036dee9", 
    "files": [
      "sds.c", 
      "sds.h", 
      "redis.c"
    ]
  }, 
  {
    "date": 1254471805, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Issue 69 fixed. Object integer encoding now works with replication and MONITORing again.", 
    "id": "0ea663ea01e6cf6b552e99e3416a38ccb56b0a5f", 
    "files": [
      "sds.c", 
      "sds.h", 
      "redis.c", 
      "Changelog"
    ]
  }, 
  {
    "date": 1253298707, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "LREM fixed, used to crash since the new object integer encoding is on the stage", 
    "id": "724a51b1a95b9e6a6937ac363e11df647829d4c6", 
    "files": [
      "redis.c", 
      "test-redis.tcl"
    ]
  }, 
  {
    "date": 1253201039, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "maxmemory didn't worked in 64 systems for values > 4GB since it used to be an unsigned int. Fixed", 
    "id": "d44659004125de932378e0cedb2abfc8cd5e64e1", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1251815452, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed crash with only space and newline as command (issue 61), thanks to a guy having as nick \"fixxxerrr\"", 
    "id": "af807d87e8e30978f9a0d162b8004a4af8e4e3a3", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1246643846, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "bugfix: EXPIRE now propagates to the Slave.", 
    "id": "774230260ff61dbc143236f690ccc73048f7fdfe", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1243010151, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "critical bug about glueoutputbuffers=yes fixed. Under load and with pipelining and clients disconnecting on the middle of the chat with the server, Redis could block. Now it's ok", 
    "id": "6fdc78ac69865b79b16fda97cf29a063dc3d026a", 
    "files": [
      "redis.c", 
      "TODO"
    ]
  }, 
  {
    "date": 1241864312, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "DEL is now a vararg, IMPORTANT: memory leak fixed in loading DB code", 
    "id": "5109cdff8305ad1ea2047524f9d8221fc7cbdfff", 
    "files": [
      "redis.c", 
      "TODO", 
      "redis-cli.c", 
      "Changelog"
    ]
  }, 
  {
    "date": 1241016648, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fixed for HT resize check 32bits overflow", 
    "id": "dec423d9cf21dfe3ed7493eeb08deed9f1cc51a4", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1240959844, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "fix for the LZF off-by-one bug added", 
    "id": "3a2694c44130c82aa216c1961d33e50fc1eb53a6", 
    "files": [
      "redis.c", 
      "TODO"
    ]
  }, 
  {
    "date": 1240505171, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "dictGetRandomKey bug fixed, RANDOMKEY will not block the server anymore", 
    "id": "6f864e62661637917ce6b449ae2c5e11538dfa1f", 
    "files": [
      "client-libraries/php/redis.php", 
      "dict.c", 
      "Changelog"
    ]
  }, 
  {
    "date": 1239145193, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "RANDOMKEY issue 26 fixed, generic test + regression added", 
    "id": "ce7bef0795e6137b36cdfdfa4e747e31fae09405", 
    "files": [
      "redis.c", 
      "test-redis.tcl"
    ]
  }, 
  {
    "date": 1238659026, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Fixed issue 23 about AUTH", 
    "id": "2e77c2ee72c97d33da568efcde3ec3dc954ccc13", 
    "files": [
      "redis.c"
    ]
  }, 
  {
    "date": 1238658885, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Issue 22 fixed", 
    "id": "774e30478070d780f739db047e5551690a090db1", 
    "files": [
      "TODO", 
      "redis.c", 
      "Makefile"
    ]
  }, 
  {
    "date": 1238011248, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "Nasty bug of the new DB format fixed, objects sharing implemented", 
    "id": "10c43610dee70032db40008996790bdeb54632b6", 
    "files": [
      "redis.conf", 
      "redis.c", 
      "TODO"
    ]
  }, 
  {
    "date": 1237816209, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "another missing free->zfree replacement fixed. Thanks to Ludo", 
    "id": "092dac2a64f912fe67be2e924c58979b200aa64b", 
    "files": [
      "TODO", 
      "redis.c", 
      "Makefile", 
      "zmalloc.h"
    ]
  }, 
  {
    "date": 1237808596, 
    "committer": {
      "email": "luc@honk-honk.com", 
      "name": "Luc Heinrich"
    }, 
    "message": "Fixed redis-cli readLine loop to correctly handle EOF.\n\nWhen using the shutdown command with redis-cli the server saves the database and, if successful, silently closes the connection. The redis-cli tool did not correcty handle this EOF case in its readLine loop and was therefore infinitely looping - and eating 100% of the CPU - while waiting for some data which would never come.", 
    "id": "b91f03a4d14c166bb8ead41e5b556b1080ccd559", 
    "files": [
      "redis-cli.c"
    ]
  }, 
  {
    "date": 1237730054, 
    "committer": {
      "email": "antirez@gmail.com", 
      "name": "antirez"
    }, 
    "message": "INFO fixed, MGET implemented, redis-cli implements INFO/MGET", 
    "id": "70003d28b8d7430f9e0104575e7160be2f264602", 
    "files": [
      "redis.c", 
      "redis-cli.c"
    ]
  }
]