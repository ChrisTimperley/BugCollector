[
  {
    "id": "63ab64144e94bfe94999071316f24f5764207ebb",
    "files": [
      "test/test-pipe-getsockname.c"
    ],
    "message": "test: don't close CRT fd handed off to uv_pipe_t\n\nAfter 4ed29c2498408c99079f25bfc0c6aec5bfbf42c4 got fixed, when a CRT fd\nis handed off to a pipe handle using uv_pipe_open libuv will close it\nproperly, so it's an error to do so ourselves.\n\nPR-URL: https://github.com/libuv/libuv/pull/992\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>",
    "committer": {
      "email": "saghul@gmail.com",
      "name": "Sa\u00fal Ibarra Corretg\u00e9"
    },
    "date": 1470904423
  },
  {
    "id": "39ee4121a1e921dd1dd23d05eb641f7f9174172b",
    "files": [
      "src/unix/stream.c"
    ],
    "message": "darwin: handle EINTR in /dev/tty workaround\n\nOn OS X, special files like /dev/null and /dev/tty don't work with\nkqueue.  Libuv falls back to select() in that case but the initial\nprobe didn't handle EINTR.\n\nIntroduced in August 2012 in commit 731adaca (\"unix: use select()\nfor specific fds on OS X\"), this bug was only ten days away from\ncelebrating its fourth birthday.\n\nPR-URL: https://github.com/libuv/libuv/pull/979\nReviewed-By: Colin Ihrig <cjihrig@gmail.com>\nReviewed-By: Sa\u00fal Ibarra Corretg\u00e9 <saghul@gmail.com>",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1470472046
  },
  {
    "id": "70002c80bf1447fad605b61d9d6e83e9d0c1a6bc",
    "files": [
      "src/unix/linux-core.c"
    ],
    "message": "linux: fix potential event loop stall\n\nIt was pointed out[0] that libuv could effectively enter an infinite\nloop (but not a busy loop) under certain conditions when polling for\nevents:\n\n1. When the architecture is 32 bits, and\n2. When timeout > 0, i.e., finite, and\n3. When timeout > max_safe_timeout (~30 minutes), and\n4. When epoll_wait(timeout) returns 0, then\n5. timeout was not properly updated on the next call to epoll_wait().\n\nInspection of the code uncovered a secondary bug where under a similar\nset of circumstances the timeout could drift when the epoll_wait()\nsystem call returned late.\n\n[0] https://github.com/libuv/libuv/pull/354#discussion_r67837112\n\nPR-URL: https://github.com/libuv/libuv/pull/922\nReviewed-By: Colin Ihrig <cjihrig@gmail.com>",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1467652212
  },
  {
    "id": "77c8abae33351acc3a845aebb61f485c94d61cdf",
    "files": [
      "src/win/fs-event.c",
      "test/test-fs-event.c",
      "test/test-list.h"
    ],
    "message": "win: compare entire filename in watch events\n\nThis commit causes Window file watching events to compare the\nentire file path when filtering events. This fixes a bug where\nincomplete path comparisons would cause invalid events to be\nraised.\n\nRefs: https://github.com/libuv/libuv/pull/682\nPR-URL: https://github.com/libuv/libuv/pull/924\nReviewed-By: Sa\u00fal Ibarra Corretg\u00e9 <saghul@gmail.com>",
    "committer": {
      "email": "cjihrig@gmail.com",
      "name": "cjihrig"
    },
    "date": 1466778964
  },
  {
    "id": "34ee25734f752609707de339796c31b49fcfb683",
    "files": [
      "src/unix/fs.c"
    ],
    "message": "unix: don't convert stat buffer when syscall fails\n\nDon't call uv__to_stat() when the stat/fstat/lstat system call fails;\nthe stack-allocated buffer contains only garbage in that case.\n\nNot a very serious bug it's technically undefined behavior and it made\nvalgrind squawk.\n\nIntroduced in commit 499c7976 (\"unix, windows: nanosecond resolution\nfor uv_fs_[fl]stat\").\n\nPR-URL: https://github.com/libuv/libuv/pull/921\nReviewed-By: Colin Ihrig <cjihrig@gmail.com>\nReviewed-By: Sa\u00fal Ibarra Corretg\u00e9 <saghul@gmail.com>",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1466610568
  },
  {
    "id": "89f01a41ab71b3f539247bfb54e15f8dc2c395f8",
    "files": [
      "Makefile.am",
      "test/test-platform-output.c",
      "test/test-poll-close-doesnt-corrupt-stack.c",
      "test/test-poll-closesocket.c",
      "test/test-list.h",
      "uv.gyp"
    ],
    "message": "test: silence build warnings\n\nPR-URL: https://github.com/libuv/libuv/pull/893\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Colin Ihrig <cjihrig@gmail.com>\nReviewed-By: Johan Bergstr\u00f6m <bugs@bergstroem.nu>\nReviewed-By: Sa\u00fal Ibarra Corretg\u00e9 <saghul@gmail.com>",
    "committer": {
      "email": "saghul@gmail.com",
      "name": "Sa\u00fal Ibarra Corretg\u00e9"
    },
    "date": 1464909497
  },
  {
    "id": "6cf935b1eac69c9d7ab889469f524a795213e5ac",
    "files": [
      "src/win/pipe.c"
    ],
    "message": "win,pipe: fixed formatting, DWORD is long unsigned\n\nPR-URL: https://github.com/libuv/libuv/pull/890\nReviewed-By: Sa\u00fal Ibarra Corretg\u00e9 <saghul@gmail.com>",
    "committer": {
      "email": "saghul@gmail.com",
      "name": "Sa\u00fal Ibarra Corretg\u00e9"
    },
    "date": 1464433100
  },
  {
    "id": "a8840fb34741ca0475e6eefe19b42937d4ba94c3",
    "files": [
      "src/unix/thread.c"
    ],
    "message": "darwin: work around condition variable kernel bug\n\nIt has been reported that destroying condition variables that have been\nsignalled but not waited on can sometimes result in application crashes.\nSee https://codereview.chromium.org/1323293005.\n\nPR-URL: https://github.com/libuv/libuv/pull/860\nReviewed-By: Sa\u00fal Ibarra Corretg\u00e9 <saghul@gmail.com>",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1462566382
  },
  {
    "id": "f57bfd4dca7f2b736027a3a41384cea5ab34b39c",
    "files": [
      "Makefile.am",
      "include/pthread-barrier.h",
      "src/unix/internal.h",
      "src/unix/pthread-barrier.c",
      "uv.gyp",
      "include/uv-unix.h",
      "src/unix/thread.c",
      "src/unix/pthread-fixes.c",
      "include/pthread-fixes.h"
    ],
    "message": "unix: fix bug in barrier fallback implementation\n\nThere was a memory corruption issue with the pthread barrier\nimplementation on android, where a barrier could still be in use by one\nthread when being freed by another.\n\nThis fixes that issue and adds lots of missing error handling.\n\nThis implementation is now also used for the OSX fallback.\n\nFixes: https://github.com/libuv/libuv/issues/615\nPR-URL: https://github.com/libuv/libuv/pull/790\nReviewed-By: Sa\u00fal Ibarra Corretg\u00e9 <saghul@gmail.com>\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>",
    "committer": {
      "email": "saghul@gmail.com",
      "name": "Sa\u00fal Ibarra Corretg\u00e9"
    },
    "date": 1461656147
  },
  {
    "id": "d03abfd4007f5b073c406a0d3afe37e6d8407f49",
    "files": [
      "src/win/fs.c"
    ],
    "message": "win: work around sharepoint scandir bug\n\nIt has been reported that for SharePoint connections mapped as a drive,\nuv_fs_scandir() returns \".\" and \"..\" entries when the expectation is\nthat they should be filtered out.\n\nAfter some investigation it looks like the driver returns \".\\0\" and\n\"..\\0\" for those entries, that is, it includes the zero byte in the\nfilename length.  Rewrite the filter to catch those entries as well.\n\nFixes: https://github.com/nodejs/node/issues/4002\nPR-URL: https://github.com/libuv/libuv/pull/636\nReviewed-By: Alexis Campailla <orangemocha@nodejs.org>\nReviewed-By: Colin Ihrig <cjihrig@gmail.com>\nReviewed-By: Sa\u00fal Ibarra Corretg\u00e9 <saghul@gmail.com>",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1460733113
  },
  {
    "id": "70d5014266ec6659e9a9a7c8f9ba320385c9caec",
    "files": [
      "src/unix/pthread-fixes.c"
    ],
    "message": "android: pthread_sigmask() does not set errno\n\nOriginally intended workaround is especially needed for Android <4.4.\nHowever it fails to compare errno collected from pthread_sigmask.\n\nThis has been fixed separately in JXcore. See issue:\nhttps://github.com/jxcore/jxcore-cordova/issues/55\n\nPR-URL: https://github.com/libuv/libuv/pull/833\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Colin Ihrig <cjihrig@gmail.com>",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1460715709
  },
  {
    "id": "a117fbd13bd5246b878c9a55bb3d080830755dfc",
    "files": [
      "src/unix/aix.c"
    ],
    "message": "aix: fix ahafs implementation\n\nuv__makedir_p was not processing all directories in passed string. Now\nif a directory already exists (EEXIST) it simply moves onto the next\ndirectory in the provided string.\n\nFixed bogus assert in uv__ahafs_event.\n\nPR-URL: https://github.com/libuv/libuv/pull/776\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Sa\u00fal Ibarra Corretg\u00e9 <saghul@gmail.com>",
    "committer": {
      "email": "saghul@gmail.com",
      "name": "Sa\u00fal Ibarra Corretg\u00e9"
    },
    "date": 1459500721
  },
  {
    "id": "6060841edca2393345b119c93d11b102b6ce650f",
    "files": [
      "test/test-queue-foreach-delete.c",
      "Makefile.am",
      "test/test-list.h",
      "uv.gyp"
    ],
    "message": "test: test that uv_close() doesn't corrupt QUEUE\n\nThe test adds all types of handles, that were known to be affected by\nQUEUE_REMOVE()-within-QUEUE_FOREACH() bug, to a loop.\nIt then calls uv_close() to trigger QUEUE_REMOVE()-within-QUEUE_FOREACH() case\nand checks whether a particular QUEUE is corrupted or not.\n\nRestrict the test to Linux only for now as it fails on other platforms\nfor various reasons.\n\nPR-URL: https://github.com/libuv/libuv/pull/621\nReviewed-By: Sa\u00fal Ibarra Corretg\u00e9 <saghul@gmail.com>",
    "committer": {
      "email": "saghul@gmail.com",
      "name": "Sa\u00fal Ibarra Corretg\u00e9"
    },
    "date": 1449565345
  },
  {
    "id": "f5796d2fbac47b026e3cc3f2b988a18c1d5b3f21",
    "files": [
      "test/test-tty.c"
    ],
    "message": "test: fix test/test-tty.c for AIX\n\n'/dev/random' causes 'isatty()' to return 1 on AIX[1]. This causes\nan issue where 'dev/tty' is opened (hard coded in\nsrc/unix/tty.c:uv_tty_init). Tried to replace the hardcoded value with\nwhat is returned by 'ttyname()' but on AIX all that is returned is\n'/dev/'.\n\nThis seems to be a bug with the AIX kernel.\n\n[1]http://goo.gl/wGa7mf\n\nPR-URL: https://github.com/libuv/libuv/pull/624\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Sa\u00fal Ibarra Corretg\u00e9 <saghul@gmail.com>",
    "committer": {
      "email": "saghul@gmail.com",
      "name": "Sa\u00fal Ibarra Corretg\u00e9"
    },
    "date": 1448398488
  },
  {
    "id": "9a4fd2689de8d40aad8e7ad3fb3108431167dd88",
    "files": [
      "include/uv-win.h",
      "src/win/thread.c"
    ],
    "message": "win: redo/fix the uv_rwlock APIs\n\nPreviously, on Windows Vista and later, we'd use the Windows native\nSRWLock APIs. However they turned out to be semantically incompatible\nwith pthread read-write locks and/or plain buggy. This patch makes sure\nthat the custom implementation that was previously only used on old\nWindows versions is now used everywhere.\n\nThis patch fixes a number of issues with the old fallback\nimplementation. Specifically:\n\n* The reader count would not be incremented when a thread successfully\n  acquired a read lock while another thread *also* held a read lock.\n\n* `uv_rwlock_tryrdlock()` and `uv_rwlock_trywrlock()` now\n  consistently return UV_EBUSY when a lock couldn't be acquired.\n\n* Any unexpected errors now cause libuv to abort, with the exception of\n  `uv_rwlock_init()`.\n\nSee also https://github.com/libuv/libuv/issues/515.\n\nPR-URL: https://github.com/libuv/libuv/pull/525\nReviewed-By: Sa\u00fal Ibarra Corretg\u00e9 <saghul@gmail.com>",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1442935093
  },
  {
    "id": "3eb6764acd2d708f6873c177a77f9bef3b266fa9",
    "files": [
      "include/uv-win.h",
      "src/win/thread.c"
    ],
    "message": "win: fix unsavory rwlock fallback implementation\n\nBefore this patch an uv_mutex_t (backed by a critical section) could be\nreleased by a tread different from the thread that acquired it, which is\nnot allowed. This is fixed by using a semaphore instead.\n\nNote that the affected code paths were used on Windows XP and Windows\nServer 2003 only.\n\nFixes: https://github.com/libuv/libuv/issues/515\nPR-URL: https://github.com/libuv/libuv/pull/516\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Sa\u00fal Ibarra Corretg\u00e9 <saghul@gmail.com>",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1441944332
  },
  {
    "id": "8b90faff6c55cc4bfbc19f0aec655b89fa7283be",
    "files": [
      "src/unix/fs.c"
    ],
    "message": "fs: fix bug in sendfile for DragonFly\n\nThe code made an implicit assumption that the 'len` variable passed\nto the sendfile(2) syscall is not modified by the operating system\nin case of an error other than EAGAIN or EINTR.\n\nThe man page leaves this unspecified on FreeBSD, DragonFly and\nDarwin, so better check the error code which returns a valid\nvalue in `len` explicitly (only EAGAIN and EINTR).\n\nThis fixes the test case for sendfile on DragonFly.\n\nPR-URL: https://github.com/libuv/libuv/pull/466\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Sa\u00fal Ibarra Corretg\u00e9 <saghul@gmail.com>",
    "committer": {
      "email": "saghul@gmail.com",
      "name": "Sa\u00fal Ibarra Corretg\u00e9"
    },
    "date": 1441092163
  },
  {
    "id": "da42780223bae35d38b6d4d920caa1563e884470",
    "files": [
      "src/threadpool.c"
    ],
    "message": "threadpool: fix thread starvation bug\n\nCommit 0f1bdb6 (\"threadpool: send signal only when queue is empty\")\nintroduces a regression where work is not evenly distributed across\nthe thread pool because the work queue's condition variable is only\nsignalled when the queue is empty, even when there are waiting workers.\n\nIt doesn't turn into outright deadlock because there is always\nat least one thread making forward progress but it does degrade\nthroughput, sometimes massively so.\n\nSignalling whenever there are waiting workers fixes the throughput\nissue while still keeping the number of uv_cond_signal() calls low,\nwhich was the motivation for commit 0f1bdb6.\n\nFixes: https://github.com/libuv/libuv/pull/490\nFixes: https://github.com/libuv/libuv/issues/492\nPR-URL: https://github.com/libuv/libuv/pull/493\nReviewed-By: Sa\u00fal Ibarra Corretg\u00e9 <saghul@gmail.com>",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1440611589
  },
  {
    "id": "c8eebc93a9efcdcc2913723ccd86b35498cc271f",
    "files": [
      "src/unix/freebsd.c"
    ],
    "message": "dragonflybsd: fix uv_exepath\n\nThis fixes a bug I have noticed with nodejs:\n\n> cat test.js\n  console.log(process.execPath);\n\n> node test.js (on DragonFly)\n  node test.js\n\n> node test.js (on Linux)\n  node\n\nPR-URL: https://github.com/libuv/libuv/pull/399\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Sa\u00fal Ibarra Corretg\u00e9 <saghul@gmail.com>",
    "committer": {
      "email": "saghul@gmail.com",
      "name": "Sa\u00fal Ibarra Corretg\u00e9"
    },
    "date": 1434488073
  },
  {
    "id": "d1b5008e7637bee5bd05c4663361ceca590f04ef",
    "files": [
      "src/unix/linux-core.c"
    ],
    "message": "linux: work around epoll bug in kernels < 2.6.37\n\nOld 32 bits kernels (native and compat) have a bug where timeouts larger\nthan (LONG_MAX / CONFIG_HZ) milliseconds are treated as infinite.\n\nWork around that by capping the timeout and polling again if necessary.\n\nPR-URL: https://github.com/libuv/libuv/pull/354\nReviewed-By: Sa\u00fal Ibarra Corretg\u00e9 <saghul@gmail.com>",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1432031333
  },
  {
    "id": "05ef2980ee3bbd636e73f685338e8f21b88d507d",
    "files": [
      "src/unix/udp.c"
    ],
    "message": "aix: fix setsockopt for multicast options\n\nOn AIX the length of socket options\nfor multicast and ttl options is not always sizeof(char).\n\nAIX has the same issue as solaris which was fixed under\nPR-URL: https://github.com/libuv/libuv/pull/243\n\nThis PR extends the fix to cover AIX as well.\n\nPR-URL: https://github.com/libuv/libuv/pull/345\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1431022460
  },
  {
    "id": "09cdc923c2e70d83891b27906a5ec517875879ce",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: fix potential bug if dup2 fails in uv_spawn\n\nPR-URL: https://github.com/libuv/libuv/pull/309\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>",
    "committer": {
      "email": "saghul@gmail.com",
      "name": "Sa\u00fal Ibarra Corretg\u00e9"
    },
    "date": 1428672424
  },
  {
    "id": "1d8332f7e6afb43daa08d643166c9e0cbdfa51a2",
    "files": [
      "src/unix/linux-core.c"
    ],
    "message": "linux: fix epoll_pwait() fallback on arm64\n\narm64 doesn't have a epoll_wait() system call but a logic error stopped\nlibuv from falling back to epoll_pwait().\n\nThis bug was introduced in commit 67bb2b5 (\"linux: fix epoll_pwait()\nregression with < 2.6.19\") which sadly exchanged one regression for\nanother.\n\nPR-URL: https://github.com/libuv/libuv/pull/308\nReviewed-By: Sa\u00fal Ibarra Corretg\u00e9 <saghul@gmail.com>",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1428412048
  },
  {
    "id": "5645b2d69fe02c9f619e9518085416e8c367fbc0",
    "files": [
      "src/unix/linux-core.c"
    ],
    "message": "linux: work around epoll bug in kernels 3.10-3.19\n\nWork around a bug in kernels 3.10 to 3.19 where passing a struct that\nhas the EPOLLWAKEUP flag set generates spurious syslog audit warnings.\n\nA bad check makes the kernel read the events field when it should not\nand complain when the process lacks the CAP_BLOCK_SUSPEND capability.\n\nPR-URL: https://github.com/libuv/libuv/pull/245\nReviewed-By: Sa\u00fal Ibarra Corretg\u00e9 <saghul@gmail.com>",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1425581023
  },
  {
    "id": "5f2016a425664831488a0169fece030635031b5e",
    "files": [
      "test/test-list.h",
      "uv.gyp",
      "test/test-poll-close-doesnt-corrupt-stack.c"
    ],
    "message": "test: test that closing a poll handle doesn't corrupt the stack\n\nThis is a regression test for an issue that was originally reported\nin https://github.com/libuv/libuv/pull/36, and fixed in cd89452.\n\nPR-URL: https://github.com/libuv/libuv/pull/48\nReviewed-By: Sa\u00fal Ibarra Corretg\u00e9 <saghul@gmail.com>",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1418158985
  },
  {
    "id": "f9aa3b3d60cd599860b1c14bbdbd561453ea295a",
    "files": [
      "test/test-list.h",
      "uv.gyp",
      "test/test-poll-close-doesnt-corrupt-stack.c"
    ],
    "message": "test: test that closing a poll handle doesn't corrupt the stack\n\nThis is a regression test for an issue that was originally reported\nin https://github.com/libuv/libuv/pull/36, and fixed in cd89452.\n\nPR-URL: https://github.com/libuv/libuv/pull/48\nReviewed-By: Sa\u00fal Ibarra Corretg\u00e9 <saghul@gmail.com>",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1418158876
  },
  {
    "id": "6591d000d13714c9e362942fbeaeca2b29507a25",
    "files": [
      "docs/src/threading.rst",
      "src/win/thread.c",
      "src/uv-common.c",
      "src/unix/thread.c"
    ],
    "message": "win: fix uv_thread_self()\n\n59658a8de7cc05a58327a164fd2ed4b050f8b4f4 changed uv_thread_self()\nto return uv_thread_t, but uv_thread_t is a thread's HANDLE while\nuv_thread_self() returns the current thread's id.\nThis means that uv_thread_equal() is also broken, as we are\npotentially comparing HANDLES to ids.\n\nChanged uv_thread_self() to return the current thread's creation handle.\nFixed small doc issue.",
    "committer": {
      "email": "saghul@gmail.com",
      "name": "Sa\u00fal Ibarra Corretg\u00e9"
    },
    "date": 1415660581
  },
  {
    "id": "d47962e9d93d4a55a9984623feaf546406c9cdbb",
    "files": [
      "ChangeLog",
      "src/version.c",
      "AUTHORS"
    ],
    "message": "2014.01.23, Version 0.11.18 (Unstable)\n\nChanges since version 0.11.17:\n\n* osx: Fix a possible segfault in uv__io_poll (Alex Crichton)\n\n* windows: improved handling of invalid FDs (Alexis Campailla)\n\n* doc: adding ARCHS flag to OS X build command (Nathan Sweet)\n\n* tcp: reveal bind-time errors before listen (Alexis Campailla)\n\n* tcp: uv_tcp_dualstack() (Fedor Indutny)\n\n* linux: relax assumption on /proc/stat parsing (Luca Bruno)\n\n* openbsd: fix obvious bug in uv_cpu_info (Fedor Indutny)\n\n* process: close stdio after dup2'ing it (Fedor Indutny)\n\n* linux: move sscanf() out of the assert() (Trevor Norris)",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1390423054
  },
  {
    "id": "dbd218e699fec8be311d85e4788be9e28ae884f8",
    "files": [
      "ChangeLog",
      "src/version.c",
      "AUTHORS"
    ],
    "message": "2014.01.23, Version 0.10.23 (Stable)\n\nChanges since version 0.10.22:\n\n* linux: relax assumption on /proc/stat parsing (Luca Bruno)\n\n* openbsd: fix obvious bug in uv_cpu_info (Fedor Indutny)\n\n* process: close stdio after dup2'ing it (Fedor Indutny)",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1390419014
  },
  {
    "id": "8bc29b6f5fff71c69987c44e3cfbb3b79b882398",
    "files": [
      "src/unix/openbsd.c"
    ],
    "message": "openbsd: fix obvious bug in uv_cpu_info\n\n`int which[]` should not be static here, as the function itself is\nchanging it\n\nfix joyent/node#6878",
    "committer": {
      "email": "fedor.indutny@gmail.com",
      "name": "Fedor Indutny"
    },
    "date": 1390302390
  },
  {
    "id": "16c4b21e4dad4624a5a4c23f8e1cff6da0b1ba1c",
    "files": [
      "test/test-pipe-server-close.c"
    ],
    "message": "test: make test-pipe-server-close pass on linux\n\nWhen a server and a client are both part of the same event loop, and\nthe client connects to the server, the order in which the connect\ncallback and the connection callback are called is unspecified.\nApparently on linux the connection callback sometimes happens first,\nwhich is not a bug, and should not make this test fail.",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1387622084
  },
  {
    "id": "c66340d59b8b35399831fb1c3a12c1efdbd91a53",
    "files": [
      "test/test-pipe-server-close.c",
      "build.mk",
      "checksparse.sh",
      "uv.gyp",
      "test/test-list.h"
    ],
    "message": "test: add pipe-server-close test\n\nAdd a regression test for the pipe server close issue on Windows, which\nwas reported in joyent/node#6749 and fixed in 7b16a3f.",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1387597202
  },
  {
    "id": "27795cfc0f3bd9382d73c1a9ce992f4de15823ca",
    "files": [
      "Makefile.am",
      "test/test-list.h",
      "uv.gyp",
      "test/test-emfile.c",
      "src/unix/stream.c"
    ],
    "message": "unix: fix accept() EMFILE error handling\n\nFix a bug that was introduced in commit 3ee4d3f (\"unix, windows:\nreturn error codes directly\") and add a regression test for good\nmeasure.\n\nHat tip to Fedor for pointing out the issue.\n\nFixes #1007.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1385340887
  },
  {
    "id": "bfe645ed7e99ca5670d9279ad472b604c129d2e5",
    "files": [
      "ChangeLog",
      "src/version.c"
    ],
    "message": "2013.11.21, Version 0.11.15 (Unstable)\n\nChanges since version 0.11.14:\n\n* fsevents: report errors to user (Fedor Indutny)\n\n* include: UV_FS_EVENT_RECURSIVE is a flag (Fedor Indutny)\n\n* linux: use CLOCK_MONOTONIC_COARSE if available (Ben Noordhuis)\n\n* build: make systemtap probes work with gyp build (Ben Noordhuis)\n\n* unix: update events from pevents between polls (Fedor Indutny)\n\n* fsevents: support japaneese characters in path (Chris Bank)\n\n* linux: don't turn on SO_REUSEPORT socket option (Ben Noordhuis)\n\n* queue: strengthen type checks (Ben Noordhuis)\n\n* include: remove uv_strlcat() and uv_strlcpy() (Ben Noordhuis)\n\n* build: fix windows smp build with gyp (Geert Jansen)\n\n* unix: return exec errors from uv_spawn, not async (Alex Crichton)\n\n* fsevents: use native character encoding file paths (Ben Noordhuis)\n\n* linux: handle EPOLLHUP without EPOLLIN/EPOLLOUT (Ben Noordhuis)\n\n* windows: use _snwprintf(), not swprintf() (Ben Noordhuis)\n\n* fsevents: use FlagNoDefer for FSEventStreamCreate (Fedor Indutny)\n\n* unix: fix reopened fd bug (Fedor Indutny)\n\n* core: fix fake watcher list and count preservation (Fedor Indutny)\n\n* unix: set close-on-exec flag on received fds (Ben Noordhuis)\n\n* netbsd, openbsd: enable futimes() wrapper (Ben Noordhuis)\n\n* unix: nicer error message when kqueue() fails (Ben Noordhuis)\n\n* samples: add socks5 proxy sample application (Ben Noordhuis)",
    "committer": {
      "email": "tjfontaine@gmail.com",
      "name": "Timothy J Fontaine"
    },
    "date": 1384964545
  },
  {
    "id": "33959f7524090b8d2c6c41e2400ca77e31755059",
    "files": [
      "ChangeLog",
      "src/version.c",
      "AUTHORS"
    ],
    "message": "2013.11.13, Version 0.10.19 (Stable)\n\nChanges since version 0.10.18:\n\n* darwin: avoid calling GetCurrentProcess (Fedor Indutny)\n\n* unix: update events from pevents between polls (Fedor Indutny)\n\n* fsevents: support japaneese characters in path (Chris Bank)\n\n* linux: don't turn on SO_REUSEPORT socket option (Ben Noordhuis)\n\n* build: fix windows smp build with gyp (Geert Jansen)\n\n* linux: handle EPOLLHUP without EPOLLIN/EPOLLOUT (Ben Noordhuis)\n\n* unix: fix reopened fd bug (Fedor Indutny)\n\n* core: fix fake watcher list and count preservation (Fedor Indutny)",
    "committer": {
      "email": "tjfontaine@gmail.com",
      "name": "Timothy J Fontaine"
    },
    "date": 1384282465
  },
  {
    "id": "bbccafbe704090e294481d95f73862bc83f33026",
    "files": [
      "src/unix/sunos.c",
      "uv.gyp",
      "build.mk",
      "src/unix/internal.h",
      "test/test-tcp-close-accept.c",
      "src/unix/kqueue.c",
      "test/test-list.h",
      "checksparse.sh",
      "src/unix/core.c",
      "src/unix/linux-core.c",
      "src/unix/darwin.c"
    ],
    "message": "unix: fix reopened fd bug\n\nWhen fd is closed and new one (with the same number) is opened inside\nkqueue/epoll/port loop's callback - stale events might invoke callbacks\non wrong watchers.\n\nCheck if watcher was changed after invocation and invalidate all events\nwith the same fd.\n\nfix #826",
    "committer": {
      "email": "fedor.indutny@gmail.com",
      "name": "Fedor Indutny"
    },
    "date": 1384254179
  },
  {
    "id": "359d6678930fbb25e612d290a2ff5114e10eda6f",
    "files": [
      "src/unix/sunos.c",
      "test/test-stdio-over-pipes.c",
      "src/unix/loop.c",
      "src/unix/process.c",
      "src/unix/stream.c",
      "src/unix/async.c",
      "src/unix/tcp.c",
      "src/unix/udp.c",
      "src/unix/core.c",
      "src/unix/linux-inotify.c",
      "src/unix/signal.c",
      "src/unix/internal.h",
      "src/unix/kqueue.c",
      "src/unix/pipe.c",
      "src/unix/linux-core.c",
      "src/unix/aix.c"
    ],
    "message": "unix: sanity-check fds before closing\n\nEnsure that close() system calls don't close stdio file descriptors\nbecause that is almost never the intention.\n\nThis is also a partial workaround for a kernel bug that seems to affect\nall Linux kernels when stdin is a pipe that gets closed: fd 0 keeps\nsignalling EPOLLHUP but a subsequent call to epoll_ctl(EPOLL_CTL_DEL)\nfails with EBADF.  See joyent/node#6271 for details and a test case.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1380592554
  },
  {
    "id": "684e2124e7cbe8f94daeba730e83cbf88963430f",
    "files": [
      "src/unix/kqueue.c",
      "include/uv-private/uv-darwin.h",
      "src/unix/fsevents.c",
      "src/unix/darwin.c"
    ],
    "message": "fsevents: use shared FSEventStream\n\nIt seems that number of simultaneously opened FSEventStreams is\nlimited on OSX (i.e. you can have only fixed number of them on\none running system), getting past through this limit will cause\n`FSEventStreamCreate` to return false and write following message\nto stderr:\n\n    (CarbonCore.framework) FSEventStreamStart: register_with_server:\n    ERROR: f2d_register_rpc() => (null) (-21)\n\nTo prevent this, we must use only one shared FSEventStream with a\npaths for all uv_fsevent_t handles, and then filter out events for\neach handle using this paths again.\n\nSee https://github.com/joyent/node/issues/5463\n\nConflicts:\n\tinclude/uv-private/uv-darwin.h\n\tsrc/unix/fsevents.c",
    "committer": {
      "email": "fedor.indutny@gmail.com",
      "name": "Fedor Indutny"
    },
    "date": 1377176274
  },
  {
    "id": "cd2794c01fc84a4118f79e31071cb1bca78918f5",
    "files": [
      "src/unix/kqueue.c",
      "include/uv-darwin.h",
      "src/unix/fsevents.c",
      "src/unix/darwin.c"
    ],
    "message": "fsevents: use shared FSEventStream\n\nIt seems that number of simultaneously opened FSEventStreams is\nlimited on OSX (i.e. you can have only fixed number of them on\none running system), getting past through this limit will cause\n`FSEventStreamCreate` to return false and write following message\nto stderr:\n\n    (CarbonCore.framework) FSEventStreamStart: register_with_server:\n    ERROR: f2d_register_rpc() => (null) (-21)\n\nTo prevent this, we must use only one shared FSEventStream with a\npaths for all uv_fsevent_t handles, and then filter out events for\neach handle using this paths again.\n\nSee https://github.com/joyent/node/issues/5463",
    "committer": {
      "email": "fedor.indutny@gmail.com",
      "name": "Fedor Indutny"
    },
    "date": 1377174913
  },
  {
    "id": "3ee4d3f183331a123ce35edd0d32268a2bb22aa5",
    "files": [
      "src/win/timer.c",
      "src/win/threadpool.c",
      "src/uv-common.h",
      "test/benchmark-multi-accept.c",
      "src/win/process-stdio.c",
      "test/test-tcp-writealot.c",
      "src/unix/error.c",
      "src/uv-common.c",
      "test/test-tcp-open.c",
      "src/win/core.c",
      "test/test-shutdown-eof.c",
      "checksparse.sh",
      "include/uv.h",
      "src/win/signal.c",
      "test/test-fs-poll.c",
      "test/test-condvar.c",
      "test/benchmark-ping-pongs.c",
      "include/uv-errno.h",
      "src/unix/udp.c",
      "src/unix/pipe.c",
      "src/unix/linux-inotify.c",
      "src/win/udp.c",
      "test/test-udp-options.c",
      "test/test-getaddrinfo.c",
      "test/test-threadpool-cancel.c",
      "src/inet.c",
      "src/unix/tty.c",
      "src/win/getaddrinfo.c",
      "src/win/poll.c",
      "src/win/stream.c",
      "src/unix/netbsd.c",
      "src/unix/darwin-proctitle.c",
      "test/test-threadpool.c",
      "test/benchmark-pound.c",
      "src/win/tcp.c",
      "test/test-connection-fail.c",
      "src/win/internal.h",
      "test/test-stdio-over-pipes.c",
      "include/uv-win.h",
      "test/test-ipc.c",
      "src/win/fs.c",
      "src/unix/poll.c",
      "test/test-error.c",
      "src/unix/openbsd.c",
      "Makefile.am",
      "src/unix/signal.c",
      "src/unix/internal.h",
      "test/test-callback-stack.c",
      "src/unix/getaddrinfo.c",
      "test/test-tcp-bind-error.c",
      "test/test-tcp-connect6-error.c",
      "test/test-fs-event.c",
      "test/test-tcp-connect-error.c",
      "test/test-timer-again.c",
      "src/unix/process.c",
      "src/unix/threadpool.c",
      "src/unix/timer.c",
      "test/benchmark-spawn.c",
      "test/test-spawn.c",
      "src/win/process.c",
      "test/test-tcp-connect-timeout.c",
      "test/echo-server.c",
      "src/unix/loop-watcher.c",
      "test/test-semaphore.c",
      "src/unix/linux-core.c",
      "src/unix/aix.c",
      "test/test-pipe-bind-error.c",
      "src/unix/fsevents.c",
      "src/unix/stream.c",
      "src/unix/async.c",
      "test/test-platform-output.c",
      "test/test-ip6-addr.c",
      "src/win/fs-event.c",
      "src/unix/proctitle.c",
      "test/test-tcp-connect-error-after-write.c",
      "test/dns-server.c",
      "test/test-getsockname.c",
      "src/win/error.c",
      "test/test-shutdown-close.c",
      "test/test-tcp-write-to-half-open-connection.c",
      "src/win/tty.c",
      "src/unix/sunos.c",
      "src/win/loop-watcher.c",
      "src/unix/loop.c",
      "src/unix/darwin.c",
      "src/unix/thread.c",
      "test/test-tcp-close-while-connecting.c",
      "test/test-delayed-accept.c",
      "test/test-pipe-connect-error.c",
      "test/blackhole-server.c",
      "src/fs-poll.c",
      "test/test-fs.c",
      "test/benchmark-pump.c",
      "test/test-ping-pong.c",
      "src/unix/kqueue.c",
      "src/unix/fs.c",
      "src/unix/core.c",
      "src/win/thread.c",
      "src/unix/freebsd.c",
      "test/benchmark-udp-pummel.c",
      "test/test-cwd-and-chdir.c",
      "test/test-process-title.c",
      "src/unix/tcp.c",
      "src/win/util.c",
      "src/win/pipe.c",
      "test/test-tcp-bind6-error.c",
      "test/test-get-currentexe.c",
      "test/test-udp-dgram-too-big.c",
      "uv.gyp"
    ],
    "message": "unix, windows: return error codes directly\n\nThis commit changes the libuv API to return error codes directly rather\nthan storing them in a loop-global field.\n\nA code snippet like this one:\n\n    if (uv_foo(loop) < 0) {\n      uv_err_t err = uv_last_error(loop);\n      fprintf(stderr, \"%s\\n\", uv_strerror(err));\n    }\n\nShould be rewritten like this:\n\n    int err = uv_foo(loop);\n    if (err < 0)\n      fprintf(stderr, \"%s\\n\", uv_strerror(err));\n\nThe rationale for this change is that it should make creating bindings\nfor other languages a lot easier: dealing with struct return values is\npainful with most FFIs and often downright buggy.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1373183460
  },
  {
    "id": "536c5f8661af4b57f8cc8be43bf482ae27a9fcd8",
    "files": [
      "src/unix/stream.c"
    ],
    "message": "unix: clear UV_STREAM_SHUTTING after shutdown()\n\nFix a state machine buglet where the UV_STREAM_SHUTTING flag didn't get\ncleared.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1370654073
  },
  {
    "id": "3ab354367b2ff16a5ade1b585fdf7e10599084d3",
    "files": [
      "src/unix/stream.c"
    ],
    "message": "unix: remove overzealous assert\n\nSeveral node.js users are hitting this assert under what appear to be\nmostly benign conditions. In other words, it's unclear whether it's\ncatching real bugs or just has wrong expectations.\n\nAn aborting process is rather disruptive so I'm removing the assert\nfrom the stable branch and relanding it in the master branch.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1370597312
  },
  {
    "id": "a195f9ace23d92345baf57582678bfc3017e6632",
    "files": [
      "ChangeLog",
      "src/version.c"
    ],
    "message": "2013.05.29, Version 0.10.9 (Stable)\n\nChanges since version 0.10.8:\n\n* unix: fix stream refcounting buglet (Ben Noordhuis)\n\n* unix: remove erroneous asserts (Ben Noordhuis)\n\n* unix: add uv__is_closing() macro (Ben Noordhuis)\n\n* unix: stop stream POLLOUT watcher on write error (Ben Noordhuis)",
    "committer": {
      "email": "i@izs.me",
      "name": "isaacs"
    },
    "date": 1369768126
  },
  {
    "id": "80f2f826bf90b84e659321c0b7fd8af419acb85e",
    "files": [
      "src/unix/stream.c"
    ],
    "message": "unix: fix stream refcounting buglet\n\nFix a buglet where uv_read_stop() would mark the handle as stopped even\nwhen there are in-progress write requests.\n\nThis bug is unlikely to have affected anyone, the only case where it\nhas a user-visible effect is when:\n\n  a) the handle has been stopped for reading but not writing, and\n  b) it's the last active handle in the event loop's pollset\n\nIf both conditions are met, it's possible for the event loop to\nterminate prematurely.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1369287192
  },
  {
    "id": "4a8ec0c62295394ac4f4cd0959ed458b3632d392",
    "files": [
      "src/unix/sunos.c"
    ],
    "message": "sunos: handle disabled watcher after callback\n\nFix a potential use-after-free bug where the uv__io watcher struct is\nreferenced after being disabled by its callback function. The stress\nis on 'potential' because in practice the watcher's memory is not\nreleased until the next tick of the event loop.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1367963398
  },
  {
    "id": "09ff5100e3ecae807dd19796e08a0b756bc04ddd",
    "files": [
      "src/win/timer.c"
    ],
    "message": "windows: make timers handle large timeouts\n\nFixes a bug where timers with very large timeouts run on the next tick.\nBased on a similar bug fix for unix (9b61939).\n\nFixes joyent/node#5101.",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1366122633
  },
  {
    "id": "5c10e82ae0bc99eff86d4b9baff1f1aa0bf84c0a",
    "files": [
      "ChangeLog",
      "src/version.c",
      "AUTHORS"
    ],
    "message": "2013.04.11, Version 0.11.1 (Unstable)\n\nThis is the first versioned release from the current unstable libuv\nbranch.\n\nChanges since Node.js v0.11.0:\n\n* all platforms: nanosecond resolution support for uv_fs_[fl]stat\n  (Timothy J. Fontaine)\n\n* all platforms: add netmask to uv_interface_address (Ben Kelly)\n\n* unix: make sure the `status` parameter passed to the `uv_getaddrinfo`\n  is 0 or -1 (Ben Noordhuis)\n\n* unix: limit the number of iovecs written in a single `writev` syscall\n  to IOV_MAX (Fedor Indutny)\n\n* unix: add dtrace probes for tick-start and tick-stop (Timothy J.\n  Fontaine)\n\n* mingw-w64: don't call _set_invalid_parameter_handler (Nils Maier)\n\n* windows: fix memory leak in fs__sendfile (Shannen Saez)\n\n* windows: fix edge case bugs in uv_cpu_info (Bert Belder)\n\n* include: no longer ship with / include ngx-queue.h (Ben Noordhuis)\n\n* include: remove UV_VERSION_* macros from uv.h (Ben Noordhuis)\n\n* documentation updates (Kristian Evensen, Ben Kelly, Ben Noordhuis)\n\n* build: fix dtrace-enabled builds (Ben Noordhuis, Timothy J. Fontaine)\n\n* build: gyp disable thin archives (Timothy J. Fontaine)\n\n* build: add support for Visual Studio 2012 (Nicholas Vavilov)",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1365615787
  },
  {
    "id": "9b619396d93182be26287f261ac654611aa99d95",
    "files": [
      "src/unix/timer.c",
      "test/test-list.h",
      "test/test-timer.c"
    ],
    "message": "unix: make timers handle large timeouts\n\nThis commit fixes two closely related integer overflow bugs:\n\n* Timers with a timeout > INT_MAX cause uv__next_timeout() to return\n  a negative value.\n\n* Timers with very large timeouts (close or equal to ULLONG_MAX) run on\n  the next tick.\n\nIn both cases, clamp the values to prevent the overflow from happening.\n\nFixes joyent/node#5101.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1363874076
  },
  {
    "id": "ae2b30a48f5cf0cda91c395a5af20cfa7769d5dc",
    "files": [
      "src/win/core.c"
    ],
    "message": "windows: initialize stop_flag explicitly\n\nThe default loop lives in the bss section so it's zeroed on startup\nbut loops created with uv_loop_new() live on the heap and contain\nrandom garbage. Initialize the stop_flag explicitly to avoid spurious\nbugs.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1361888787
  },
  {
    "id": "492efb95ffc5b33a179cfaeb8215dc52111fb4d6",
    "files": [
      "src/unix/core.c"
    ],
    "message": "unix: make uv_stop work when embedded\n\n* Make uv_stop() work when libuv is embedded in another event loop.\n\n* Fix a small bug where loop->stop_flag was not reset when mode ==\n  UV_RUN_ONCE or UV_RUN_NOWAIT. The next call to uv_run() would return\n  immediately without doing any work.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1361808062
  },
  {
    "id": "da33bba7c04e0873b457a9a4290bed2adf620154",
    "files": [
      "include/uv.h",
      "src/unix/thread.c"
    ],
    "message": "darwin: make uv_cond_timedwait() clock skew safe\n\nUse pthread_cond_timedwait_relative_np() so we're not prone to spurious\nbugs caused by clock skew.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1360189689
  },
  {
    "id": "3d779000b16f766f9fe5465fec970157740d0e06",
    "files": [
      "src/win/udp.c"
    ],
    "message": "win/udp: fix bug in getsockopt() return value check",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1359566864
  },
  {
    "id": "fc42885d0ebb877864f989a0a78ed3b4125448aa",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: set closed fd to -1, avoid double close bugs\n\n* abort() if close() fails\n* set fd to -1 after close() to prevent double close bugs",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1357907979
  },
  {
    "id": "6f679a4ff7bd332eb601e11a7d815311e22612c5",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: don't swap stdin file descriptors\n\nBug introduced in 47f496a. It turns out the file descriptors of the\nstdin pipe don't have to be swapped around.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1357907520
  },
  {
    "id": "2f55353490506ed08709c65205bedeb67342b194",
    "files": [
      "src/unix/sunos.c",
      "src/unix/kqueue.c",
      "src/unix/core.c",
      "src/unix/linux/linux-core.c",
      "src/unix/internal.h"
    ],
    "message": "unix: update loop->time after poll\n\nFixes a bug where timers expire prematurely when the following\nconditions hold:\n\n  a) libuv first spends some time blocked in the platform poll function\n  b) a callback then calls uv_timer_start()\n\nCause: uv_timer_start() uses an out-of-date loop->time in its\n'when should the timer callback run?' calculations.\n\nSolution: Update loop->time before invoking any callbacks.\n\nFixes #678.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1357493403
  },
  {
    "id": "e079a99abddb30a7f935792eda003b5ce37b396b",
    "files": [
      "uv.gyp",
      "src/unix/internal.h",
      "src/unix/stream.c",
      "test/test-list.h",
      "src/unix/core.c",
      "src/unix/udp.c",
      "test/test-tcp-read-stop.c"
    ],
    "message": "unix: fix event loop stall\n\nFix a rather obscure bug where the event loop stalls when an I/O watcher is\nstopped while an artificial event, generated with uv__io_feed(), is pending.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1355426232
  },
  {
    "id": "a385ae4f59aeb10b24e60c3d6880a38a645635bd",
    "files": [
      "src/unix/tcp.c",
      "src/unix/stream.c"
    ],
    "message": "unix: only set SO_REUSEADDR on tcp listen sockets\n\nAvoid the extra syscall, it's a no-op for non-listening sockets.\n\nAt least, it should be - it remains to be investigated if a FreeBSD kernel bug\naffects ephemeral port allocation inside connect(). See [1] for details.\n\n[1] http://www.freebsd.org/cgi/query-pr.cgi?pr=174087",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1355060073
  },
  {
    "id": "59a2c639316bd23f738c78147dd79ad4b61b3cf1",
    "files": [
      "test/benchmark-multi-accept.c"
    ],
    "message": "bench: remove dead and buggy code\n\nPipe accept benchmarks have never been implemented, remove the code path.\n\nSaid code path also contained a bug: it tried to bind to the same pipe that is\nbound to a few lines down.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1353029063
  },
  {
    "id": "c252bcb3f02d2faf54f8a241c60f36d97495bcbc",
    "files": [
      "test/benchmark-pump.c"
    ],
    "message": "bench: fix loop starvation bug\n\nDon't keep writing until the write queue fills up. On fast systems (mine), that\nnever happens - the data is sent out as fast as the benchmark generates it.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1352937727
  },
  {
    "id": "2d1f17fecbdc40370e9daa39dc351fcd5e47164c",
    "files": [
      "test/test-async.c"
    ],
    "message": "test: work around valgrind bug",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1352422678
  },
  {
    "id": "cb03e3bd26587b851552ad8b54b30600e48ef829",
    "files": [
      "src/unix/fs.c"
    ],
    "message": "darwin: work around concurrent write() kernel bug\n\nSimultaneously writing from multiple threads to the same file descriptor is not\nsafe on OS X. We already serialized all pwrite() system calls, apply the same\nworkaround to the write() system call.\n\nFixes a node.js test, test/simple/test-fs-sir-writes-alot.js, that was failing\nbecause parts of the output file got filled with nul bytes.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1349828154
  },
  {
    "id": "328f29b06f989d5e775ae4c4b6b28b7245c42737",
    "files": [
      "src/win/handle-inl.h",
      "src/win/signal.c"
    ],
    "message": "windows: fix stupid uv_signal bugs",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1345480788
  },
  {
    "id": "aa69f34d53dfa0897aa00a7a1f0e97b3f6947d9b",
    "files": [
      "include/uv-private/uv-win.h",
      "test/test-spawn.c",
      "src/win/process.c",
      "src/win/req-inl.h",
      "src/win/process-stdio.c",
      "src/win/pipe.c",
      "src/win/internal.h"
    ],
    "message": "windows: report spawn errors to the exit callback\n\nFormerly spawn errors would be reported as a message printed to the\nprocess' stderr, to match unix behaviour. Unix has now been fixed to\nbe more sensible, so this hack can now be removed.\n\nThis also fixes a race condition that could occur when the user closes\na process handle before the exit callback has been made.",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1344889907
  },
  {
    "id": "ac0d46851ae0eccd5131207234e08cd2ed2ed681",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: work around darwin bug, don't poll() on pipe\n\npoll() on newer versions of OS X sets POLLHUP|POLLIN whereas older versions\n(and other Unices) only set POLLHUP. It was tripping up a check that expected\nto read data when POLLIN was set.\n\nWhile easy to work around, I switched it to a blocking read instead:\nit's less code and avoids surprises like the one above altogether.\n\nFixes #522.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1344725958
  },
  {
    "id": "d192a317aa3388de5cb59b9ebe0a1057f7aaafc9",
    "files": [
      "src/unix/sunos.c"
    ],
    "message": "sunos: workaround OS bug to prevent fs.watch() from spinning\n\nThis is a back-port of commit cfb06db from the master branch.\n\nFixes joyent/node#3768.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1343747260
  },
  {
    "id": "cfb06db5e5998571efeef54dc40484d11610dbbf",
    "files": [
      "src/unix/sunos.c"
    ],
    "message": "sunos: workaround OS bug to prevent fs.watch() from spinning\n\nFixes joyent/node#3768.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1343746560
  },
  {
    "id": "a9f6f06feaf02ebb48d4b41bd2ac47fcb2096a00",
    "files": [
      "src/unix/freebsd.c",
      "test/test-process-title.c"
    ],
    "message": "unix: fix format string vulnerability in freebsd.c\n\nuv_set_process_title() was susceptible to a format string vulnerability:\n\n  $ node -e 'process.title = Array(42).join(\"%s\")'\n  Segmentation fault: 11 (core dumped)\n\nThe fix is trivial - call setproctitle(\"%s\", s) instead of setproctitle(s) -\nbut valgrind complains loudly about reads from and writes to uninitialized\nmemory in libc. It's not a libuv bug because the test case below triggers the\nsame warnings:\n\n  #include <stdio.h>\n  #include <stdlib.h>\n  #include <sys/types.h>\n  #include <unistd.h>\n\n  int main(void)\n  {\n    setproctitle(\"%s\", \"test\");\n    return 0;\n  }\n\nThat's why this commit replaces setproctitle() with sysctl(KERN_PROC_ARGS).",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1342192598
  },
  {
    "id": "1a6b6b781c1b30ed6ff694d934c7dac4f975cf81",
    "files": [
      "src/unix/tcp.c"
    ],
    "message": "unix: deduplicate socket creation code in tcp.c\n\nIncidentally fixes a rather obscure bug where uv_tcp_connect() reconnected\nand leaked a file descriptor when the handle was already busy connecting,\nhandle->fd was zero (unlikely) and uv_tcp_connect() got called again.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1340988450
  },
  {
    "id": "84f0d96ae04bc2c75b2f4bc6946ee781df5457c4",
    "files": [
      "src/unix/dl.c"
    ],
    "message": "unix: reset error status in uv_dlopen()\n\nFixes a bug where uv_dlopen() mistakenly reported failure because of previous\nerrors.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1339458501
  },
  {
    "id": "b5a15f5cdf4679775bd9e6baf0568d97dd588170",
    "files": [
      "test/test-tcp-shutdown-after-write.c"
    ],
    "message": "test: fix test-tcp-shutdown-after-write bug\n\nIt was calling uv_read_start before the uv_connect call had completed.\nAlthough we want to allow this in the future, right now it's not\nsupported.",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1339117913
  },
  {
    "id": "619686e9e98318e0a45dde473a4f984216baa3d6",
    "files": [
      "src/win/process.c"
    ],
    "message": "windows: fix fall-through bug in init_child_stdio()",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1338663906
  },
  {
    "id": "3ec9c67f935adfd3515acaa1c5ec5222fbdc6f94",
    "files": [
      "include/uv-private/uv-win.h",
      "include/uv.h",
      "src/win/process.c"
    ],
    "message": "windows: improve spawn stdio support\n\n* Make using an existing stream for stdio actually work\n* Support up to 256 stdio channels\n* Fix some minor bugs",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1338565640
  },
  {
    "id": "528123ad9ae8ae09da29174590dc7fb3592dfe9b",
    "files": [
      "src/win/poll.c"
    ],
    "message": "windows: fix bugs in uv__fast_poll_cancel_poll_req",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1338512731
  },
  {
    "id": "2e3e658be1b89d23cad4c126d7e84e2ca1177586",
    "files": [
      "src/unix/poll.c"
    ],
    "message": "unix: fix uv_poll CPU usage spike\n\nSa\u00fal Ibarra Corretg\u00e9 reports that calling uv_poll_start() repeatedly results\nin CPU usage spikes. Fixed by stopping the poll I/O watcher before updating it.\n\nFixes #424.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1337770364
  },
  {
    "id": "80b554129b613b4ca30a50e985bb49eb764ba152",
    "files": [
      "src/unix/loop.c",
      "include/uv-private/uv-unix.h",
      "src/unix/core.c"
    ],
    "message": "unix: reactive new idle watcher implementation\n\nThe new idle watcher was temporarily disabled in 073a48d due to some semantic\nincompatibilities with the previous implementation. This commit resolves those\nissues and reactivates the new implementation.\n\nOne outstanding bug is that idle watchers can run in a different order\n(relative to other handle types) than the old implementation, e.g. (timer, idle)\ninstead of the expected (idle, timer). This will be fixed in an upcoming commit.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1337692432
  },
  {
    "id": "e82d46452e3db141d3875286cf90be0de6d724e0",
    "files": [
      "src/unix/stream.c"
    ],
    "message": "unix: fix close-before-connect bug\n\nClosing the TCP socket before the SYN/ACK handshake completed hung the event\nloop, the connect req didn't get unregistered.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1337296797
  },
  {
    "id": "b750dec517ae5da70d07a51e02586184f1259168",
    "files": [
      "src/win/tcp.c"
    ],
    "message": "Windows: fix iocp emulation bugs for tcp handles\n\nMakes ipc_tcp_connection pass on Windows XP",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1336164842
  },
  {
    "id": "b3fe1830409fff6a55131af3156654ee4a712426",
    "files": [
      "src/unix/kqueue.c"
    ],
    "message": "unix: fix fs_event refcount bug on darwin\n\nThe event loop got unref'd twice when the handle was closed.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1330616525
  },
  {
    "id": "44c9f63cb1df484fed8117c4611358eca5f67786",
    "files": [
      "src/unix/internal.h",
      "src/unix/core.c",
      "src/unix/ev/ev.c"
    ],
    "message": "unix: don't rely on libev to track timer state\n\nAn obscure libev bug sometimes makes it miss state changes. Keep track of the\nstate ourselves.\n\nFixes joyent/node#2515.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1330616518
  },
  {
    "id": "0459097745637b8789dd363a5a8ebb7ba428d121",
    "files": [
      "src/unix/kqueue.c"
    ],
    "message": "unix: fix fs_event refcount bug on darwin\n\nThe event loop got unref'd twice when the handle was closed.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1330527354
  },
  {
    "id": "2f886c892e7ed960f6a1ce2831af58c3c6276977",
    "files": [
      "src/unix/internal.h",
      "src/unix/core.c",
      "src/unix/ev/ev.c"
    ],
    "message": "unix: don't rely on libev to track timer state\n\nAn obscure libev bug sometimes makes it miss state changes. Keep track of the\nstate ourselves.\n\nFixes joyent/node#2515.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1330446290
  },
  {
    "id": "9c064fbbd20cff5e985d9856930769031809a368",
    "files": [
      "src/win/tty.c"
    ],
    "message": "Win: utf-8 decoder bug when compiling with gcc",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1322775958
  },
  {
    "id": "fce90652ed38ab0925131ed141972354a494933b",
    "files": [
      "src/win/core.c",
      "src/win/req.c"
    ],
    "message": "Windows: avoid the loop starvation bug. Closes GH-154",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1322505401
  },
  {
    "id": "179f475b2ad64729feb0422f06ce133cb364482a",
    "files": [
      "src/win/fs.c"
    ],
    "message": "win: fix fs__readdir buffer overflow bug\n\nThanks Runner Mei for pointing this out. Closes GH-224.",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1319247760
  },
  {
    "id": "c0e5db2d49d43488ad5169a442eed357c616088d",
    "files": [
      "src/unix/linux.c"
    ],
    "message": "linux: fix events after close bug",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1319148170
  },
  {
    "id": "51e9dbc2bbdba0de482343c0fe116211cddd5ead",
    "files": [
      "include/uv-private/uv-win.h",
      "src/win/winsock.c",
      "src/win/winapi.c",
      "src/win/winapi.h",
      "src/win/winsock.h",
      "src/win/udp.c",
      "src/win/internal.h",
      "include/uv.h"
    ],
    "message": "Work around windows udp bug, allow zero reads",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1319148091
  },
  {
    "id": "10de090b9e8796785597f920af526d0012319559",
    "files": [
      "src/unix/core.c"
    ],
    "message": "unix: centralize loop init logic\n\nAlso fixes a bug where loops other than the main loop didn't pick the kqueue\nbackend, which broke the fs event watcher on Darwin and the BSDs.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1324410453
  },
  {
    "id": "eb6d754a0620fc8035d2a0cac39cee007e023a50",
    "files": [
      "src/win/tty.c"
    ],
    "message": "Win: utf-8 decoder bug when compiling with gcc",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1322764812
  },
  {
    "id": "9673abeab5e44d064724d43bf97eb0c0eedfe3a1",
    "files": [
      "src/unix/fs.c"
    ],
    "message": "unix: fix pointer ownership bug\n\nlibuv realloc'd a pointer that belonged to and was later freed by libev.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1317078164
  },
  {
    "id": "37e8bf2556ff088ee6886299eac4a6f0883b354a",
    "files": [
      "src/unix/core.c"
    ],
    "message": "unix: fix dangling pointer free() bug",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1316445803
  },
  {
    "id": "bca49960fbde41517a833bc3f6bca1971c9746c0",
    "files": [
      "include/uv-private/uv-unix.h",
      "src/unix/stream.c"
    ],
    "message": "unix: handle stream write errors properly\n\n1. Ensure that failed writes don't leave the write queue in an inconsistent\n   state. Before, write requests were handed back to the user but were not\n   removed from the write queue. The cause of at least one use-after-free bug.\n\n2. Pass the error to the callback on the next iteration of the event loop\n   instead of returning it immediately.",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1315966605
  },
  {
    "id": "0d373eb0b1db884bacfeffef7502f3f40e3dc6b7",
    "files": [
      "src/win/fs.c"
    ],
    "message": "win: fix bug in fs__readlink",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1315524352
  },
  {
    "id": "c2741514bc72abc22240adbbc7d0a2e7264f7815",
    "files": [
      "src/win/process.c"
    ],
    "message": "win: fix spawn() bug",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1315497702
  },
  {
    "id": "cbbb254e575422206558672b8de85cc5fef1ed86",
    "files": [
      "src/eio/eio.c"
    ],
    "message": "Fix for joyent/node#1506, OSX threaded write()s bug",
    "committer": {
      "email": "ry@tinyclouds.org",
      "name": "Ryan Dahl"
    },
    "date": 1314656471
  },
  {
    "id": "36c9b791d4b37de7312f623c7c6a736e46642760",
    "files": [
      "test/benchmark-udp-packet-storm.c",
      "test/test-udp-send-and-recv.c"
    ],
    "message": "Fix bugs in test-udp-send-and-recv and benchmark-udp-packet-storm",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1314156247
  },
  {
    "id": "b328e4cb058f69a6cdacbc2a5ac4a4cba3f1137d",
    "files": [
      "src/uv-unix.c"
    ],
    "message": "uv-unix: fd 0 is valid file descriptor\n\nuv__bind() and uv_tcp_listen() created a new socket\nif tcp->fd <= 0 but 0 is a valid file descriptor.\n\nThe second bug was that the newly created socket\nwasn't actually assigned to tcp->fd.\n\nFixes failing node.js test:\n  test/simple/test-regress-GH-746.js",
    "committer": {
      "email": "info@bnoordhuis.nl",
      "name": "Ben Noordhuis"
    },
    "date": 1313019380
  },
  {
    "id": "831b15a47c8fd04da38399872bc0c5ec0a7d70cc",
    "files": [
      "src/win/pipe.c"
    ],
    "message": "Windows: fix WaitNamedPipe thread bug",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1312904118
  },
  {
    "id": "ec143961d135adb3f49f5a2322774ef43e2520b9",
    "files": [
      "src/win/process.c"
    ],
    "message": "Windows: fix bug in process arguments buffer size computation",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1312328552
  },
  {
    "id": "cf5babef80a82cc8afc6153535c20ef4d7481169",
    "files": [
      "src/eio/eio.c"
    ],
    "message": "Fix getaddrinfo bug",
    "committer": {
      "email": "ry@tinyclouds.org",
      "name": "Ryan Dahl"
    },
    "date": 1311904063
  },
  {
    "id": "7210f9106b8039b2f085c3683d193561a0148af7",
    "files": [
      "oio-win.c"
    ],
    "message": "Windows: fix bugs",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1304818108
  },
  {
    "id": "6d8aa96ab66a8ab3ca4d06be628490cd279a0013",
    "files": [
      "oio-win.c",
      "oio-win.h"
    ],
    "message": "Check/prepare/idle for windows. No tests yes, so bugs are likely.",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1304807232
  },
  {
    "id": "b5e9579d055cec08066f1c72a0450f99b94a1bf0",
    "files": [
      "test/test-bind-error.c"
    ],
    "message": "Work around possible linux bug in bind_error_addrnotavail_1",
    "committer": {
      "email": "ry@tinyclouds.org",
      "name": "Ryan Dahl"
    },
    "date": 1304466916
  },
  {
    "id": "270078adeffd1e87b4fd8804873899281a4f7792",
    "files": [
      "test/test-delayed-accept.c"
    ],
    "message": "Fix bugs in test-delayed-accept",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1304462508
  },
  {
    "id": "5a56c90af9542fe36f19c65b8bcc2d714a838bf3",
    "files": [
      "oio-win.c",
      "oio-win.h"
    ],
    "message": "Windows implementation - buggy",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1304392941
  },
  {
    "id": "6accf285dbe82b290e28dc6c3664ed335594c149",
    "files": [
      "test/test-bind-error.c",
      "test/test-tcp-writealot.c",
      "test/test-callback-stack.c",
      "test/test-ping-pong.c",
      "test/test-delayed-accept.c",
      "test/test-timeout.c",
      "test/test-connection-fail.c"
    ],
    "message": "Fixed tests",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1304382911
  },
  {
    "id": "c1a04b6dfd20344852be85c758552668fbda54df",
    "files": [
      "oio-win.c"
    ],
    "message": "Don't use SO_REUSEADDR on Windows.\n\nIt's semantics suck. See http://bugs.python.org/issue2550",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1303776146
  },
  {
    "id": "c48e753d981e75dc003291fc6c9b213c5bbc0941",
    "files": [
      "test/test-timeout.c"
    ],
    "message": "Fix bug in test-timeout",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1303766268
  },
  {
    "id": "53207d0e784a66bc812efa2d527e57214549fe89",
    "files": [
      "test/test-ping-pong.c"
    ],
    "message": "Fix bug in test",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1302737739
  },
  {
    "id": "336a768a2103e54c7a7ababecf2c9d4696d33307",
    "files": [
      "ol-win.c",
      "ol-win.h"
    ],
    "message": "Windows: bugfixes, read, write",
    "committer": {
      "email": "bertbelder@gmail.com",
      "name": "Bert Belder"
    },
    "date": 1301468266
  }
]