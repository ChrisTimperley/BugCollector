[
  {
    "files": [
      "items.c",
      "memcached.h",
      "items.h",
      "memcached.c"
    ],
    "id": "502e94080d30a77e05d6373b25322e7160a91f39",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1471653295,
    "message": "refactor checkpoint for LRU crawler\n\nnow has internal module system for the LRU crawler.\n\nautocrawl checker should be a bit better now. doesn't\nconstantly re-run the histogram calcs.\n\nmetadump works as a module now. ended up generalizing the client case outside\nof the module system since it looks reusable. Cut the amount of functions\nrequired for metadump specifically to nothing.\n\nstill need to bug hunt, a few more smaller refactors, and see about pulling\nthis out into its own file."
  },
  {
    "files": [
      "items.c",
      "memcached.h",
      "memcached.c",
      "thread.c"
    ],
    "id": "31e7d8f5feb4a4a4c52557b2a2597bd074de47ca",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1471653295,
    "message": "allow redispatching sidethread conn to worker\n\nalso fixes a bug where metadump was closing the client connection after a\nsingle slab class.\n\nnot ported to the logger yet."
  },
  {
    "files": [
      "items.c",
      "memcached.h",
      "slabs.h",
      "memcached.c",
      "t/binary.t",
      "slabs.c",
      "t/slabs-reassign-chunked.t"
    ],
    "id": "ee461d1102053668758e19922813617a0cb9bba6",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1468374166,
    "message": "slabs reassigns works with chunks and chunked items.\n\nalso fixes the new LRU algorithm to balance by total bytes used rather than\ntotal chunks used, since total chunks used isn't tracked for multi-chunk\nitems.\n\nalso fixes a bug where the lru limit wasn't being utilized for HOT_LRU\n\nalso some cleanup from previous commits."
  },
  {
    "files": [
      "memcached.h",
      "slabs.c",
      "memcached.c",
      "t/chunked-items.t"
    ],
    "id": "b05653f9a8ab3ee70431ef83a136e15f22e617ea",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1468374166,
    "message": "chunked item second checkpoint\n\ncan actually fetch items now, and fixed a few bugs with storage/freeing.\n\nadded fetching for binprot.\nadded some basic tests.\n\nmany tests still fail for various reasons, and append/prepend isn't fixed yet."
  },
  {
    "files": [
      "memcached.c"
    ],
    "id": "96d50a8cf638c0086605f9438761311b66561fb6",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1468319320,
    "message": "Fix ancient binprot bug with OOM errors desycning\n\nsets getting OOM's for item alloc would swallow the upload bytes in ascii\nprotocol but missed in binprot. Swallow is usually passed through\nwrite_bin_error, but out_of_memory() calls write_bin_error indirectly with a\nzero for swallow."
  },
  {
    "files": [
      "memcached.c"
    ],
    "id": "697cac04059ddb6dcc8e0bb82e59dda37fd57f9c",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1447843547,
    "message": "fixed libevent version check: add the missing 1.0.x version check"
  },
  {
    "files": [
      "items.c"
    ],
    "id": "8ab8a1db296e5e20b1861331e4b6c22f200ace12",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1420436749,
    "message": "fix a few bugs and add more stats\n\nwasn't passing total_chunks into the bg thread anymore, which causes all items\nto flow to cold.\n\nalso re-added ability to see hot/warm/cold counts. NOEXP is missing until\nthat's implemented."
  },
  {
    "files": [
      "items.c",
      "slabs.h",
      "items.h",
      "memcached.c",
      "slabs.c",
      "thread.c"
    ],
    "id": "fb2698975689c87db8be170630cced57798d474f",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1420356842,
    "message": "first pass at LRU maintainer thread\n\nThe basics work, but tests still do not pass.\n\nA background thread wakes up once per second, or when signaled. It is signaled\nif a slab class gets an allocation request and has fewer than N chunks free.\n\nThe background thread shuffles LRU's: HOT, WARM, COLD. HOT is where new items\nexist. HOT and WARM flow into COLD. Active items in COLD flow back to WARM.\nEvictions are pulled from COLD.\n\nitem_update's no longer do anything (and need to be fixed to tick it->time).\nItems are reshuffled within or around LRU's as they reach the bottom.\n\nRatios of HOT/WARM memory are hardcoded, as are the low/high watermarks.\nThread is not fast enough right now, sets cannot block on it."
  },
  {
    "files": [
      "items.c",
      "memcached.h",
      "slabs.c",
      "memcached.c",
      "thread.c"
    ],
    "id": "69d1c69997660e79755480b4e4085691ad45911e",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1420099895,
    "message": "cache_lock refactoring\n\nitem_lock() now protects accesses to item structures. cache_lock is just for\nLRU and LRU stats. This patch removes cache_lock from a number of places it's\nno longer needed.\n\nSome pre-existing bugs became obvious: flush_all, cachedump, and slab\nreassignment's do_item_get short-circuit all need repairs."
  },
  {
    "files": [
      "memcached.c",
      "testapp.c"
    ],
    "id": "7edb1a037824bd9164447c2a860de5402d2d548d",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1420097037,
    "message": "gatkq: return key in response\n\nGATKQ was incorrectly mapped to GAT instead of GATK in binary protocol\nhandling and thus didn't return a key in the response.  Fixed that and added\ntest cases for GAT, GATQ, GATK and GATKQ in testapp.\n\nNoticed this while testing a new memcahe client library, OMcache:\n    https://github.com/saaros/omcache/"
  },
  {
    "files": [
      "items.c",
      "memcached.h",
      "items.h",
      "assoc.c",
      "thread.c"
    ],
    "id": "6af7aa0b1581b3bfac98e4fd7c67801cd1f8f1fb",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1419735415,
    "message": "Pause all threads while swapping hash table.\n\nWe used to hold a global lock around all modifications to the hash table.\n\nThen it was switched to wrapping hash table accesses in a global lock during\nhash table expansion, set by notifying each worker thread to change lock\nstyles. There was a bug here which causes trylocks to clobber, due to the\nspecific item locks not being held during the global lock:\nhttps://code.google.com/p/memcached/issues/detail?id=370\n\nThe patch previous to this one uses item locks during hash table expansion.\nSince the item lock table is always smaller than the hash table, an item lock\nwill always cover both its new and old buckets.\n\nHowever, we still need to pause all threads during the pointer swap and setup.\nThis patch pauses all background threads and worker threads, swaps the hash\ntable, then unpauses them.\n\nThis trades the (possibly significant) slowdown during the hash table copy,\nwith a short total hang at the beginning of each expansion. As previously;\nthose worried about consistent performance can presize the hash table with\n`-o hashpower=n`"
  },
  {
    "files": [
      "memcached.c"
    ],
    "id": "ee961e456457728ba78057961eca357edaea1ec1",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1398843344,
    "message": "fix infinite loop regression in 1.4.18\n\nSeems that a closed connection can fire off extra events sometimes? There\nmight still be another bug lurking."
  },
  {
    "files": [
      "items.c"
    ],
    "id": "fd39b1953b04b7dd9fdfe9a4f0d69e2225095ba0",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1398665639,
    "message": "don't fetch yourself during memory allocation\n\nIt was possible to, while replacing an item, find your own item from the tail\nand examine it. This reverse some logic and adds a not-completely-covering\ncheck of ignoring an item if it has the same (complete) hash value.\n\nThis is the second half of the general fix for the infamous \"issue 260\" from\ngoogle code bugs."
  },
  {
    "files": [
      "memcached.c"
    ],
    "id": "d7757c3e5260902312c983d4577f4b57fcefad78",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1391384042,
    "message": "Stop returning ASCII error messages to binary clients\n\nIn a couple out-of-memory conditions, out_string() was being called\nregardless of the client's protocol.  Wrap all the out-of-memory\nout_string() calls with a helper function that returns a binary\nresponse if appropriate. (In most cases, this is in ASCII protocol\nhandling code and thus is a no-op change, but using the wrapper in some\nplaces and not others is an invitation to future bugs of this type.)"
  },
  {
    "files": [
      "memcached.h",
      "t/binary-sasl.t",
      "memcached.c"
    ],
    "id": "87c1cf0f20be20608d3becf854e9cf0910f4ad32",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1387572992,
    "message": "explicitly record sasl auth states\n\nIt was previously possible to bypass authentication due to implicit\nstate management.  Now we explicitly consider ourselves\nunauthenticated on any new connections and authentication attempts.\n\nbug316\n\nSigned-off-by: Dustin Sallings <dustin@spy.net>"
  },
  {
    "files": [
      "items.c",
      "memcached.h",
      "items.h",
      "memcached.c",
      "slabs.c",
      "thread.c"
    ],
    "id": "2db1bf462c67c66323850272acd0f2b60d6e62ec",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1346657754,
    "message": "alloc loop now attempts an item_lock\n\nFixes a few issues with a restructuring... I think -M was broken before,\nshould be fixed now. It had a refcount leak.\n\nNow walks up to five items from the bottom in case of the bottomost items\nbeing item_locked, or refcount locked. Helps avoid excessive OOM errors for\nsome oddball cases. Those happen more often if you're hammering on a handful\nof pages in a very large class size (100k+)\n\nThe hash item lock ensures that if we're holding that lock, no other thread\ncan be incrementing the refcount lock at that time. It will mean more in\nfuture patches.\n\nslab rebalancer gets a similar update."
  },
  {
    "files": [
      "memcached.c"
    ],
    "id": "045da59d01eefdb0ff8faf9d3a28e03ba78cbc80",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1343606706,
    "message": "Fixed issue with invalid binary protocol touch command expiration time\n(http://code.google.com/p/memcached/issues/detail?id=275)"
  },
  {
    "files": [
      "cache.c"
    ],
    "id": "1d0978c57574120d9e34770f19e6261f9f2eadb8",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1343605472,
    "message": "totally destroy test caches\n\nsomeone pointed out that cache_destroy wasn't freeing the cache_t pointer.\n\nmemcached itself never destroys a cache it creates, so this is fine, but it's\nfixed for completeness..."
  },
  {
    "files": [
      "memcached.c"
    ],
    "id": "55ef5d374d1c6eaa1344cfd2576f9ab62306c1c2",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1343600096,
    "message": "Error and exit if we don't have hugetlb support\n\nI imagine host people on linux run this and then get both thumbs stuck up\ntheir noses when weird bugs happen. Lets start by not lying to them."
  },
  {
    "files": [
      "items.c",
      "memcached.h",
      "slabs.c",
      "memcached.c"
    ],
    "id": "63bf748a10d1e55c67783a517d2d4d28d2a14303",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1343418436,
    "message": "automove levels are an int instead of bool now\n\nalso fix a bug causing slab rebalance thread to spin instead of waiting on the\ncondition... duhr."
  },
  {
    "files": [
      "timedrun.c"
    ],
    "id": "016a87c593240b8d4430b3f139d90132439a5562",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1326345166,
    "message": "bug237: Don't compute incorrect argc for timedrun\n\nSince spawn_and_wait doesn't use argc anyway, might as well just not\nsend a value in."
  },
  {
    "files": [
      "memcached.c"
    ],
    "id": "a16ce583273e42924f2cce61d4ce8832b76e01a4",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1326329567,
    "message": "binary deletes were not ticking stats counters\n\nThanks to Stephen Yang for the bug report."
  },
  {
    "files": [
      "items.c"
    ],
    "id": "f58de2a4b115bfc00ba24e42244d26ee561cde3a",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1323982401,
    "message": "clean up the do_item_alloc logic\n\nFix an unlikely bug where search == NULL and the first alloc fails, which then\nattempts to use search.\n\nAlso reorders branches from most likely to least likely, and removes all\nredundant tests that I can see. No longer double checks things like refcount\nor exptime for the eviction case."
  },
  {
    "files": [
      "t/binary.t",
      "memcached.c"
    ],
    "id": "2096c491453f4278fdc2fc03759fccfd98ad4168",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1317198405,
    "message": "bug220: incr would sometimes return the previous item's CAS\n\nThis happens when we allocate a new item instead of reusing the space\nof an existing one, but consistently set the CAS from the original\nitem's CAS (which is being discarded)."
  },
  {
    "files": [
      "memcached.c"
    ],
    "id": "d5c7aae768c685c9e83da3f6e17b5f7e866853bf",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1317196747,
    "message": "Fixed multi get request also when key is found"
  },
  {
    "files": [
      "memcached.c"
    ],
    "id": "d492aaf66fc16c4f2c932fcd0774a666a6279318",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1317196738,
    "message": "Fixed bug on multi get processing"
  },
  {
    "files": [
      "memcached.c"
    ],
    "id": "2928a78562c91d2706b35826eea77f3bf0366035",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1312991092,
    "message": "Don't permanently close UDP listeners on error\n\nAlso, don't inflate rbytes as we can only ever process one UDP packet at a\ntime.\n\nPatch by pi3orama. Fixed by Dormando to use the correct state and actually\nwork.\n\nI'm not fully convinced of the rbytes bit. We must ensure that a UDP packet\nwith multiple commands in it has all of its commands processed before we can\npossibly call recvfrom again."
  },
  {
    "files": [
      "items.c",
      "t/issue_163.t",
      "slabs.h",
      "slabs.c"
    ],
    "id": "efad616d1cd8bf8eb5d6e7573a1952cacb3073ee",
    "committer": {
      "email": "trond.norbye@gmail.com",
      "name": "Trond Norbye"
    },
    "date": 1289579799,
    "message": "Issue 163: Buggy mem_requested values"
  },
  {
    "files": [
      "items.c"
    ],
    "id": "49ef81a2e9b055e8b37caf3d0956012fbbe07ae8",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1270265562,
    "message": "Remove item > 1MB assertion - bug 119"
  },
  {
    "files": [
      "testapp.c"
    ],
    "id": "655a3a81cad88d601bc57e74489308dabe24910d",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1256954532,
    "message": "Enable test for bug101 to be skipped.\n\nThis can potentially use a lot of memory on a host and some of the\nbuild slaves don't like that too much.\n\nIt will run everywhere by default, but may be disabled by setting the\nSKIP_TEST_101 environment variable."
  },
  {
    "files": [
      "memcached.c",
      "t/issue_67.t"
    ],
    "id": "6dc28e905d7b9f7809f6e8c0e372588740c28e47",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1256944242,
    "message": "TCP and UDP ports should follow each other. bug67"
  },
  {
    "files": [
      "t/issue_104.t",
      "memcached.c"
    ],
    "id": "b1001be042a5b078bfc00a87fec1467f12045323",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1256850209,
    "message": "Issue 104: stats bug for cmd_get"
  },
  {
    "files": [
      "t/stats-detail.t",
      "memcached.c",
      "t/issue_3.t",
      "t/udp.t"
    ],
    "id": "dd599c0e95fed031258ed7363281c643d517ab79",
    "committer": {
      "email": "Trond.Norbye@sun.com",
      "name": "Trond Norbye"
    },
    "date": 1256836031,
    "message": "Provide better errors for deletion scenarios. bug3"
  },
  {
    "files": [
      "slabs.c"
    ],
    "id": "47ab3b002b1591de6b51430dbabc0fe33542ce55",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1256833701,
    "message": "Remove slab size special case for growth factor 2. bug56\n\nUsing any growth factor, the minimum slab size is always 104 bytes\n(unless using -n option to use a specific value) except for 2. In this\ncase, it's 128 bytes and cannot be reduced using -n option (it can be\nincreased however).\n\nFrom slabs.c:\n    /* Factor of 2.0 means use the default memcached behavior */\n    if (factor == 2.0 && size < 128)\n        size = 128;\n\nWhat I sugget is to simply remove this part. If the default behaviour\nneeds to be kept to 128 bytes per default when factor is 128, maybe\ndefault value could for the -n option could be adapted to do so. But I\ndon't see a good reason for this specific difference between factor 2\nand others."
  },
  {
    "files": [
      "memcached.h",
      "thread.c",
      "memcached.c",
      "t/00-startup.t"
    ],
    "id": "2fe44f1c75621c5c759b3314f3cd19ccde7f5df2",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1253315537,
    "message": "Cleanup of number of threads declarations (issue 91)\n\n     * Change setings.num_threads (-t option) meaning (Now it is a number\n       of worker threads).\n     * Fix bug in -t option checking.\n     * Simple data struct for dispatcher (no thread-local stat and so on).\n     * No special threads[0] for dispatcher thread info.\n     * thread_local_stats_{reset|aggregate} does not cycle on unused\n       dispatcher thread stat.\n     * Simplify thread initialization and connection dispatching logic.\n\n(notes from Dustin):\n\nA list in a commit is typically a red flag, but this isn't really\nlisting a bunch of distinct things that were done, but a bunch of ways\nthings were made better by a simple refactoring.\n\nI also added a test that verifies that it fails if you add \"-t 0\".\nBefore, it did not fail, but the whole server would crash if you\nconnected to it.  This test doesn't confirm the server crashed in that\ncase, but at least confirms the exact issue 91 case, which is that it\ndoes the right thing when \"-t 0\" is specified."
  },
  {
    "files": [
      "t/binary.t",
      "memcached.c",
      "testapp.c"
    ],
    "id": "52f16b3e0756c7cdf618a28dadb24eb5e5f58d7b",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1251932898,
    "message": "binary set with cas does not return the new cas id\n\n(dustin) I updated the perl test to check for this when it's doing CAS\nstuff.  Found some bugs in the perl test that took too long to fix."
  },
  {
    "files": [
      "memcached.c",
      "t/issue_70.t"
    ],
    "id": "483e82adc89c984cbe040857d9cf43fc725883cd",
    "committer": {
      "email": "Trond.Norbye@sun.com",
      "name": "Trond Norbye"
    },
    "date": 1251280266,
    "message": "Fix memory corruption issue with bad item lengths\n\nPartially fixed in 1.2.8, unfixed somewhere since, now fully fixed.\n\nNegative values allowed memory corruption, and high values also allowed\ncorruption in swallow mode. Length is now guaranteed to be positive.\n\nFixes issue 70."
  },
  {
    "files": [
      "memcached.c",
      "testapp.c"
    ],
    "id": "89d5126bdb65fa9bcc945dd77fdf71261becd72e",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1251009492,
    "message": "Issue #77: Bug in the realloc code caused the previous allocated buffer to be reused..."
  },
  {
    "files": [
      "memcached.c"
    ],
    "id": "5f95d0554f78bb06bcc57b12135b604a61953f0d",
    "committer": {
      "email": "Trond.Norbye@sun.com",
      "name": "Trond Norbye"
    },
    "date": 1250709424,
    "message": "Do not use strcpy for copying strings to fixed-size buffers.\n\nIf someone specified a unix domain socket path longer than 103\ncharacters long and blow stuff up.\n\nThis is part of the fix of issue 64."
  },
  {
    "files": [
      "memcached.c"
    ],
    "id": "223a43644dcf986533b3f65179cd4181e152f9c8",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1244795195,
    "message": "Fixed typo in -R usage output, made 'default's more consistent"
  },
  {
    "files": [
      "memcached.h",
      "memcached.c",
      "thread.c"
    ],
    "id": "a0e4a7563fd575d89cd34411a2c090fae1d826f4",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1239511604,
    "message": "fix resumption of accept loop under multithread\n\ncritical fix:\nunder multithreaded mode, in version 1.2.7, memcached would not resume\naccepting connections after hitting the max connections limit.\n\nthis is due to a pre-existing bug in the accept_new_conns code, which\nwas hit when the \"fix\" was rolled in to ensure listening threads never\ndid real work.  Previously, at least one closing connection would\n(randomly) be on the accepting thread, so the test for (are we the\nlistening thread?) would still work."
  },
  {
    "files": [
      "items.c"
    ],
    "id": "91adade7077902f43cbed1ea5483c0f49a59603d",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1238347691,
    "message": "print why a key was not found when extra verbose\n\nsimple logs for simple people. Patch inspired by a bug hunting session with\nevan weaver. It's been useful a few times since."
  },
  {
    "files": [
      "items.c",
      "doc/protocol.txt"
    ],
    "id": "4ad6da605d4708bde44c24b186139c276b4020e1",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1238347432,
    "message": "dumb hack to self-repair stuck slabs\n\nsince 1.2.6, most of the refcount leaks have been quashed.\nI still get them in production, extremely rarely.\nIt's possibly we'll have refcount leaks on and off even in the future.\n\nThis hack acknowledges this and exists since we want to guarantee, as much as\npossible, that memcached is a stable service. Having to monitor for and\nrestart the service on account of \"rare bugs\" isn't acceptable."
  },
  {
    "files": [
      "memcached.c"
    ],
    "id": "7a5a1375cf3220f9c69a9b51ebaf56b6d7f41db4",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1238347015,
    "message": "fix a handful of socket listen bugs.\n\nAF_UNSPEC is still necessary for UDP sometimes.\nWe guarantee that at least one address returned from getaddrinfo binds\nsuccessfully, and in cases of lacking network or ipv6 addresses some of those\nsocket() calls might fail. That's normal. We were bailing on them.\nThis change also removes the need to pass AI_ADDRCONFIG on machines with ipv6\nstacks disabled."
  },
  {
    "files": [
      "memcached.c",
      "t/udp.t"
    ],
    "id": "9ce2e0ac5638064cb1d268292b08256e33643a19",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1237627277,
    "message": "Fix ascii UDP set (bug36).\n\nhttp://code.google.com/p/memcached/issues/detail?id=36"
  },
  {
    "files": [
      "memcached.c",
      "t/00-startup.t"
    ],
    "id": "1b4a42a27fd179e88ddbcd252f519e4ac6b7dc5c",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1237458424,
    "message": "Fixed -C and -b: (with tests).\n\nUsing the settings stats, we can verify the startup effects -C and -b:\nbring and validate that they were both broken by a recent change."
  },
  {
    "files": [
      "memcached.c"
    ],
    "id": "0a7d84694cdbe721aadcc5d327992914fa48dc86",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1237001054,
    "message": "A bit more space for server_stats, and an assertion (bug 27).\n\nI couldn't figure out how to get the stats output big enough to exceed\n1024, but I accept it might.\n\nI've given it a bit more space here and added an assertion to detect\nwhen we fail in case we can figure out how to actually have this occur.\n\nMaxing out pretty much everything got me up to 828 bytes:\n\nSTAT pid 35893\nSTAT uptime 152\nSTAT time 1237000260\nSTAT version 1.3.2\nSTAT pointer_size 32\nSTAT rusage_user 0.002487\nSTAT rusage_system 0.005412\nSTAT curr_connections 4\nSTAT total_connections 5\nSTAT connection_structures 5\nSTAT cmd_get 18446744073709551610\nSTAT cmd_set 18446744073709551610\nSTAT get_hits 18446744073709551610\nSTAT get_misses 18446744073709551610\nSTAT delete_misses 18446744073709551610\nSTAT delete_hits 18446744073709551610\nSTAT incr_misses 18446744073709551610\nSTAT incr_hits 18446744073709551610\nSTAT decr_misses 18446744073709551610\nSTAT decr_hits 18446744073709551610\nSTAT cas_misses 18446744073709551610\nSTAT cas_hits 18446744073709551610\nSTAT cas_badval 18446744073709551610\nSTAT bytes_read 1\nSTAT bytes_written 18446744073709551610\nSTAT limit_maxbytes 67108864\nSTAT threads 5\nSTAT bytes 18446744073709551610\nSTAT curr_items 4294967290\nSTAT total_items 4294967290\nSTAT evictions 18446744073709551610"
  },
  {
    "files": [
      "memcached.c"
    ],
    "id": "5e40caa44b5e1affa4e8a4d6a08481f3d5efcaee",
    "committer": {
      "email": "Trond.Norbye@sun.com",
      "name": "Trond Norbye"
    },
    "date": 1236928827,
    "message": "Fix alignment bug in append_bin_stats\n\nSee http://code.google.com/p/memcached/issues/detail?id=26"
  },
  {
    "files": [
      "slabs.c"
    ],
    "id": "7f7769a1d12bf086b8c01c577b7635e25bca57f5",
    "committer": {
      "email": "steve.yen@gmail.com",
      "name": "Steve Yen"
    },
    "date": 1236012506,
    "message": "stats slabs total_pages typo fixed\n\nDuring conversion to support binary protocol, \"total_pages\" was\nincorrectly changed to \"total_page\"."
  },
  {
    "files": [
      "t/binary.t",
      "memcached.c",
      "t/incrdecr.t"
    ],
    "id": "013e17cc7487d3d24c7f6b30c206bd6421ed6f6d",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1235669669,
    "message": "Fix for bug21.\n\nSome strange signness handling around decr caused values that would be\nsigned 64-bit numbers to get dropped to zero."
  },
  {
    "files": [
      "memcached.c"
    ],
    "id": "8b3de7118e595579f0ec3b37f63bcd1218eb8228",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1234568100,
    "message": "Remove bad memset call in process_bin_stats.\n\n(Victor found the bug and submitted a bunch of text, I just committed\nit -- Dustin)\n\nUnclear why this exists in the first place (history doesn't show\nanything significant), but at some point after it was written, it\nbecame wrong.\n\nAs this is a local variable and is not read after this memset and the\nmemset is wrong, I'm taking Victor's path of just removing it.\n\nhttp://code.google.com/p/memcached/issues/detail?id=19\n\nSigned-off-by: Dustin Sallings <dustin@spy.net>"
  },
  {
    "files": [
      "items.c",
      "t/cas.t",
      "items.h",
      "memcached.c"
    ],
    "id": "bad6c614e58639d0685706f17dc9562323c30f39",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1234404194,
    "message": "Update CAS on non-replace incr/decr.\n\nThis fixes a problem reported as bug 15 where incr and decr do not\nchange CAS values when they aren't completely replacing the item\n(which is the typical case).\n\nhttp://code.google.com/p/memcached/issues/detail?id=15"
  },
  {
    "files": [
      "thread.c"
    ],
    "id": "f20c484720170768646c1f80ca9094c2e59b004f",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1233639073,
    "message": "Fixed data types for init_state and protocol in CQ_ITEM.\n\nThese were both listed as int when they're used as parameter of enum\ntypes conn_states and protocol respectively."
  },
  {
    "files": [
      "thread.c"
    ],
    "id": "4be8a5a7beae75b67bf52b50aa59609148508b34",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1233265262,
    "message": "Fixed bad patch: stats locks shouldn't be commented out"
  },
  {
    "files": [
      "doc/memcached.1",
      "memcached.c"
    ],
    "id": "1a37377cebeab6b472fb735df4c5ed9b8be4c3e2",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1231556018,
    "message": "Fixed spelling of INADDR_ANY"
  },
  {
    "files": [
      "Makefile.am",
      "daemon.c",
      "configure.ac",
      "memcached.h",
      "memcached.c"
    ],
    "id": "08c14e4e1e9c0f2cba1b45722d0f395887c150d7",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1230970152,
    "message": "Always use bundled daemonize function, fixed warnings on MacOSX"
  },
  {
    "files": [
      "memcached.c"
    ],
    "id": "40aff8b0f113b9068ef55922cc482533284e83dd",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1230970152,
    "message": "Fixed a memory corruption bug in stats."
  },
  {
    "files": [
      "slabs.c"
    ],
    "id": "b4cdbb48ba6b850d6fd4c12b8ace2e6901c7aa87",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1230970151,
    "message": "Fixed a typo in stats key and cleaned whitespaces."
  },
  {
    "files": [
      "memcached.c"
    ],
    "id": "43360802fa26a587f3e0509e47f7728e26f5f646",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1230970151,
    "message": "Fixed indent issues."
  },
  {
    "files": [
      "t/getset.t",
      "memcached.c"
    ],
    "id": "5f54ede879939a160168fabbc8cfc462f28e0004",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1230890786,
    "message": "Don't leave stale data on failed set attempt.\n\nThis is mildly less confusing for folks with OOM errors or who store items for long periods of time, but occasionally attempt setting a very large item. While I don't believe this actually fixes a class of bugs we've seen due to refcount leaks, I make this change for consistency."
  },
  {
    "files": [
      "thread.c"
    ],
    "id": "afdf5a93c0103392b8ff00186f8dffcb00c77542",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1229978154,
    "message": "Fix thread DTrace probe.\n\nTrond pointed out that I missed fixing the thread dtrace probe *directly above* the other line I fixed. Har har oops."
  },
  {
    "files": [
      "t/getset.t",
      "memcached.c"
    ],
    "id": "c27f9c9c8f6e2665efd3d70330956830f74e4778",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1229978153,
    "message": "Don't leave stale data on failed set attempt.\n\nThis is mildly less confusing for folks with OOM errors or who store items for long periods of time, but occasionally attempt setting a very large item. While I don't believe this actually fixes a class of bugs we've seen due to refcount leaks, I make this change for consistency."
  },
  {
    "files": [
      "items.c"
    ],
    "id": "41aa0a55342b83ef2c8eec957878792f7c28b2e4",
    "committer": {
      "email": "Trond.Norbye@sun.com",
      "name": "Trond Norbye"
    },
    "date": 1209779228,
    "message": "Bug fix for hash corruption in do_item_alloc"
  },
  {
    "files": [
      "memcached.h",
      "memcached.c"
    ],
    "id": "f1351f9bbaae4fd923722f5563843f5d1c54a5f7",
    "committer": {
      "email": "Trond.Norbye@sun.com",
      "name": "Trond Norbye"
    },
    "date": 1209339467,
    "message": "Syscall optimizations.\n\nI have been using the last two days to test the modifications I have done to\nthe binary protocol, and I have not been able to find any new bugs. From my\ntesting the binary protocol now use the same amount of system calls as the\ntextual protocol.\n\nI have tried to use a common state machine, and branch the execution path as\nlate as possible.\n\ngit-svn-id: http://code.sixapart.com/svn/memcached/branches/binary@775 b0b603af-a30f-0410-a34e-baf09ae79d0b"
  },
  {
    "files": [
      "memcached.c"
    ],
    "id": "a3ef767906699fea833e5d8bb9aa18cc7008d774",
    "committer": {
      "email": "dustin@spy.net",
      "name": "Dustin Sallings"
    },
    "date": 1209338186,
    "message": "Fixed another place where a protocol was referenced by an magic integer.\n\ngit-svn-id: http://code.sixapart.com/svn/memcached/branches/binary@719 b0b603af-a30f-0410-a34e-baf09ae79d0b"
  },
  {
    "files": [
      "memcached.c"
    ],
    "id": "d041e67d92e7c18688cb8b387553007464c4e855",
    "committer": {
      "email": "tomash.brechko@gmail.com",
      "name": "Tomash Brechko"
    },
    "date": 1197087373,
    "message": "Fix \"flush_all 0\" bug. (Tomash Brechko)\n\n\ngit-svn-id: http://code.sixapart.com/svn/memcached/trunk/server@667 b0b603af-a30f-0410-a34e-baf09ae79d0b"
  },
  {
    "files": [
      "thread.c"
    ],
    "id": "b1de136f476cdfff3be656aac533701dcd58c946",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1196551081,
    "message": "Idiotic copy/paste mistake by dormando. Fixed by dormando ;)\n\n\ngit-svn-id: http://code.sixapart.com/svn/memcached/trunk/server@653 b0b603af-a30f-0410-a34e-baf09ae79d0b"
  },
  {
    "files": [
      "memcached.h",
      "memcached.c"
    ],
    "id": "b17a0c8bdfb9167306a36298e625ec4dad546882",
    "committer": {
      "email": "dormando@rydia.net",
      "name": "dormando"
    },
    "date": 1195675127,
    "message": "Fix bugs reported by Tomash Brechko for the new cas patch.\n\n\ngit-svn-id: http://code.sixapart.com/svn/memcached/trunk/server@650 b0b603af-a30f-0410-a34e-baf09ae79d0b"
  },
  {
    "files": [
      "items.c"
    ],
    "id": "9759cca7b9abf9225824a7ed0f865449e0714a19",
    "committer": {
      "email": "tomash.brechko@gmail.com",
      "name": "Tomash Brechko"
    },
    "date": 1195205767,
    "message": "Fix C operation priority bug. (Tomash Brechko)\n\n\ngit-svn-id: http://code.sixapart.com/svn/memcached/trunk/server@642 b0b603af-a30f-0410-a34e-baf09ae79d0b"
  },
  {
    "files": [
      "memcached.c",
      "t/00-startup.t"
    ],
    "id": "d2f3f245b7509218f10e197b2d3a336030c625a7",
    "committer": {
      "email": "plindner@hi5.com",
      "name": "Paul Lindner"
    },
    "date": 1176898887,
    "message": "Bug fix from Xueron Nee <xueron@gmail.com> for -l args problems.\nAdded test cases to t/00-startup.t to insure this doesn't break.\n\n\ngit-svn-id: http://code.sixapart.com/svn/memcached/trunk/server@521 b0b603af-a30f-0410-a34e-baf09ae79d0b"
  },
  {
    "files": [
      "items.c",
      "memcached.c"
    ],
    "id": "c47ee897b0a3ebf77968bf7945ae509d50541d63",
    "committer": {
      "email": "plindner@hi5.com",
      "name": "Paul Lindner"
    },
    "date": 1176408195,
    "message": "fix potential bug with memcpy(), use in two more places\n\ngit-svn-id: http://code.sixapart.com/svn/memcached/trunk/server@501 b0b603af-a30f-0410-a34e-baf09ae79d0b"
  },
  {
    "files": [
      "t/expirations.t",
      "memcached.c",
      "ChangeLog"
    ],
    "id": "42fda7d0fe6bed03e36bb9308f58d68d2fded7a2",
    "committer": {
      "email": "adamtdixon@gmail.com",
      "name": "Adam Dixon"
    },
    "date": 1166991428,
    "message": "2006-12-23\n        * fix expirations of items set with absolute expiration times in\n          the past, before the server's start time.  bug was introduced in\n          1.2.0 with rel_time_t.  Thanks to Adam Dixon\n          <adamtdixon@gmail.com> for the bug report and test case!\n\n\n\n\ngit-svn-id: http://code.sixapart.com/svn/memcached/trunk/server@456 b0b603af-a30f-0410-a34e-baf09ae79d0b"
  },
  {
    "files": [
      "items.c",
      "memcached.h",
      "t/flush-all.t",
      "memcached.c"
    ],
    "id": "c5944dc2b4bdf5c94448466884f06f26d403baf4",
    "committer": {
      "email": "sgrimm@facebook.com",
      "name": "Steven Grimm"
    },
    "date": 1164057416,
    "message": "Fix for flush_all 1-second window bug. You can now do a \"set\" immediately\nafter a \"flush_all\" without the newly set data getting expired.\n\n\ngit-svn-id: http://code.sixapart.com/svn/memcached/trunk/server@436 b0b603af-a30f-0410-a34e-baf09ae79d0b"
  },
  {
    "files": [
      "memcached.c"
    ],
    "id": "c0e420b96ecfd5cccd51b3305cbbb53cd3845494",
    "committer": {
      "email": "sgrimm@facebook.com",
      "name": "Steven Grimm"
    },
    "date": 1157423850,
    "message": "Always read UDP-based commands from the front of the packet; we fixed this\na while ago but I apparently never sent a patch out to the mailing list.\n\n\ngit-svn-id: http://code.sixapart.com/svn/memcached/trunk/server@363 b0b603af-a30f-0410-a34e-baf09ae79d0b"
  },
  {
    "files": [
      "memcached.c",
      "assoc.c",
      "test/delete-window.t"
    ],
    "id": "20892be054226aa3b92ca333de14d7aec3f64181",
    "committer": {
      "email": "brad@danga.com",
      "name": "Brad Fitzpatrick"
    },
    "date": 1157347745,
    "message": "fix some long-standing psuedo-bugs with regard to the delete-locked\nwindow (when you specify a time parameter to the delete command, which\nprevents adds/replaces for that many seconds)\n\nin particular, if you had a small timeout, less than 5 seconds, then a\nfuture add/replace which should've worked wouldn't because the\ndelete_timer wouldn't have run yet.\n\nthis has caused a lot of people just evalutating memcached and playing\naround as they read the protocol docs to go crazy, as they couldn't\nsee the delete timer happening, and it all just appeared random to\nthem\n\nthis also unifies some duplicated code, and adds some assertions, in\nparticular in assoc_insert to make sure that key isn't already in the\nhashtable.\n\n\n\ngit-svn-id: http://code.sixapart.com/svn/memcached/trunk/server@337 b0b603af-a30f-0410-a34e-baf09ae79d0b"
  },
  {
    "files": [
      "memcached.c",
      "ChangeLog"
    ],
    "id": "1a07ead83cedae5d1e2e99589820797e00792486",
    "committer": {
      "email": "don@smugmug.com",
      "name": "Don MacAskill"
    },
    "date": 1112659826,
    "message": "+2005-04-04\n+       * patch from Don MacAskill <don@smugmug.com> 'flush_all' doesn't\n+       seem to work properly.  Basically, if you try to add a key which\n+       is present, but expired, the store fails but the old key is no\n+       longer expired.\n\nSubject: Serious bug in memcached - patch attached\nParts/Attachments:\n   1.1 Shown     44 lines  Text\n   1.2 Shown     22 lines  Text\n   1.3   OK      13 lines  Text (charset: UTF-8)\n   2            3.2 KB     Application, \"S/MIME Cryptographic Signature\"\n----------------------------------------\n\n\n... or, at least, it seems that way.  :)  'flush_all' doesn't seem to\nwork properly.  Basically, if you try to add a key which is present, but\nexpired, the store fails but the old key is no longer expired.  Here's\noutput:\n\nget key1\nEND\n\nadd key1 1 0 2\n27\nSTORED\n\nget key1\nVALUE key1 1 2\n27\nEND\n\nflush_all\nOK\n\nadd key1 1 0 2\n28\nNOT_STORED\n\nget key1\nVALUE key1 1 2\n27\nEND\n\nI suppose it's possible there's some design reason why it behaves that\nway, but if so, I don't know what it is.  Certainly breaks our stuff.  :)\n\n(we built a memcached tracker which controls the state of our pool of\nmemcached processes.  It flushes any hosts/ports which fail at any\nwrites, among other things, and this bug caused some big problems, as\nyou can imagine).\n\nPatch against CVS attached.  It's probably mildly overkill (probably\ndoesn't need to destroy the item on a stale 'get', only on 'add', but\nit's pretty simple and gives me the warm fuzzies).\n\nDon\n\n\ngit-svn-id: http://code.sixapart.com/svn/memcached/trunk@236 b0b603af-a30f-0410-a34e-baf09ae79d0b"
  },
  {
    "files": [
      "memcached.c"
    ],
    "id": "79aed47d868fa9a797cb8b139bf25403b32a8bba",
    "committer": {
      "email": "mellon@pobox.com",
      "name": "Anatoly Vorobey"
    },
    "date": 1095117942,
    "message": "Several cosmetic fixed from Andrei Nigmatulin:\n\n1) change printf/scanf format flags to %ld for time_t variables\n(was %u in a few places)\n2) correct format strings for rusage values in \"stats\" output, and\nalso improve those values' readability.\n3) use return value of sprintf() instead of an extra strlen() in one place.\n\n\ngit-svn-id: http://code.sixapart.com/svn/memcached/trunk@224 b0b603af-a30f-0410-a34e-baf09ae79d0b"
  },
  {
    "files": [
      "memcached.c",
      "ChangeLog"
    ],
    "id": "585d68ca18529aed6528f4b55292a94acf3b9a41",
    "committer": {
      "email": "mdorman@debian.org",
      "name": "Michael Alan Dorman"
    },
    "date": 1089935722,
    "message": "2004-06-15\n       * immediate deletes weren't being unlinked a few seconds,\n         preventing \"add\" commands to the same key in that time period.\n         thanks to Michael Alan Dorman <mdorman@debian.org> for the\n         bug report and demo script.\n\n\ngit-svn-id: http://code.sixapart.com/svn/memcached/trunk@211 b0b603af-a30f-0410-a34e-baf09ae79d0b"
  },
  {
    "files": [
      "configure.ac",
      "memcached.c",
      "ChangeLog"
    ],
    "id": "bfebefb716288ad5490e38172856245e1544e504",
    "committer": {
      "email": "brad@danga.com",
      "name": "Brad Fitzpatrick"
    },
    "date": 1059544430,
    "message": "Releasing 1.1.8 bugfix release.\n\nAvva:\n\nThe below fixes the bug. There was a conflict between the usual meaning of\nexptime=0 (don't expire) and the new fancy let-exptime-be-used-as-delta\nstuff.\n\n\ngit-svn-id: http://code.sixapart.com/svn/memcached/trunk@79 b0b603af-a30f-0410-a34e-baf09ae79d0b"
  },
  {
    "files": [
      "items.c",
      "memcached.c"
    ],
    "id": "aee9d46c583c0a2f3b84efd86e04b315139ad878",
    "committer": {
      "email": "brad@danga.com",
      "name": "Brad Fitzpatrick"
    },
    "date": 1056745950,
    "message": "subtle disconnect bug fix!!\n\n\ngit-svn-id: http://code.sixapart.com/svn/memcached/trunk@55 b0b603af-a30f-0410-a34e-baf09ae79d0b"
  },
  {
    "files": [
      "items.c"
    ],
    "id": "6d0b7ceedd14594fbcd252e05313a2644aebdea1",
    "committer": {
      "email": "brad@danga.com",
      "name": "Brad Fitzpatrick"
    },
    "date": 1056594492,
    "message": "whoa, major bug in recent change.\n\n\ngit-svn-id: http://code.sixapart.com/svn/memcached/trunk@47 b0b603af-a30f-0410-a34e-baf09ae79d0b"
  },
  {
    "files": [
      "memcached.c"
    ],
    "id": "ef3644d3389c9a6c8d1a8088c33eea7e4ddade57",
    "committer": {
      "email": "mellon@pobox.com",
      "name": "Anatoly Vorobey"
    },
    "date": 1056503249,
    "message": "avva says:\n\nSo, I did find one source of leak... but it's not the one that could\ncause this bug, I think.\n\nLook at stats of some memcache process that's been running long. In\nalmost all classes no. of items reported by 'stats items' is less than\n\"total chunks\" of 'stats slabs' even though there aren't any free\nslabs. Now the numbers aren't supposed to be equal, because some items\nare out of linked list but tied up in delete queue or being printed.\nBut if the difference is in thousands of items, e.g. here:\nhttp://www.livejournal.com/admin/temp/memcache.bml?host=10.0.0.32:11212&mode=raw\nsomething is wrong.\n\nAnyway, the bug I found is that when delete_handler() goes over the\nqueue, it decreases refcount rather than call item_remove(). In almost\nall cases it won't make any difference, because the item is still in\nthe linked list and item_remove() wouldn't free it anyway. But if:\n\n1) someone DELETEs an item and this sets its exptime to now()+4 and\nputs it into the delete queue.\n2) 4 seconds pass, but delete_handler() hasn't been called yet (it's\ncalled every 5 seconds, approx.). In this brief and rare period of\ntime, this item is called with GET.\n3) since its exptime passed, the item is unlinked. Now when\ndelete_handler() gets to it, it'll decrease the refcount, but noone\nwill ever free it.\n\n\nHe included a fix:\n\n--- cvs/wcmtools/memcached/memcached.c  Tue Jun 24 10:38:55 2003\n+++ src/memcached/memcached.c   Tue Jun 24 16:50:01 2003\n@@ -1058,7 +1058,7 @@\n             if (todelete[i]->exptime < now) {\n                 /* no longer mark it deleted. it's now expired, same as dead */\n                 todelete[i]->it_flags &= ~ITEM_DELETED;\n-                todelete[i]->refcount--;\n+                item_remove(todelete[i]);\n             } else {\n                 todelete[j++] = todelete[i];\n             }\n\n\nBut I think what I'm commiting will work just as well.  (it just\nremoves items immediately instead of letting them fall off and die\nlater)\n\n\ngit-svn-id: http://code.sixapart.com/svn/memcached/trunk@42 b0b603af-a30f-0410-a34e-baf09ae79d0b"
  }
]